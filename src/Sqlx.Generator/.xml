<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sqlx.Generator</name>
    </assembly>
    <members>
        <member name="T:Sqlx.AbstractGenerator">
            <summary>
            Simplified stored procedures generator with unified service architecture.
            </summary>
        </member>
        <member name="M:Sqlx.AbstractGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.AbstractGenerator"/> class.
            </summary>
        </member>
        <member name="M:Sqlx.AbstractGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.AbstractGenerator.Execute(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.AbstractGenerator.GetRequiredSymbols(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <summary>
            Gets the required symbol references for code generation.
            </summary>
        </member>
        <member name="M:Sqlx.AbstractGenerator.GenerateSqlxAttribute(Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String)">
            <summary>
            Generates or copies attributes for a method.
            </summary>
        </member>
        <member name="M:Sqlx.AbstractGenerator.GenerateSqlxAttribute(Microsoft.CodeAnalysis.AttributeData)">
            <summary>
            Generates SqlxAttribute from existing attribute data.
            </summary>
        </member>
        <member name="M:Sqlx.AbstractGenerator.IsCollectionType(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Determines if a type is a collection type.
            </summary>
        </member>
        <member name="T:Sqlx.AbstractGenerator.SymbolReferences">
            <summary>
            Container for symbol references needed during code generation.
            </summary>
        </member>
        <member name="M:Sqlx.AbstractGenerator.SymbolReferences.#ctor(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.AbstractGenerator.SymbolReferences"/> class.
            </summary>
        </member>
        <member name="P:Sqlx.AbstractGenerator.SymbolReferences.SqlxAttributeSymbol">
            <summary>
            Gets the Sqlx attribute symbol.
            </summary>
        </member>
        <member name="P:Sqlx.AbstractGenerator.SymbolReferences.ExpressionToSqlAttributeSymbol">
            <summary>
            Gets the ExpressionToSql attribute symbol.
            </summary>
        </member>
        <member name="P:Sqlx.AbstractGenerator.SymbolReferences.SqlExecuteTypeAttributeSymbol">
            <summary>
            Gets the SqlExecuteType attribute symbol.
            </summary>
        </member>
        <member name="P:Sqlx.AbstractGenerator.SymbolReferences.RepositoryForAttributeSymbol">
            <summary>
            Gets the RepositoryFor attribute symbol.
            </summary>
        </member>
        <member name="P:Sqlx.AbstractGenerator.SymbolReferences.TableNameAttributeSymbol">
            <summary>
            Gets the TableName attribute symbol.
            </summary>
        </member>
        <member name="P:Sqlx.AbstractGenerator.SymbolReferences.IsValid">
            <summary>
            Gets a value indicating whether the essential symbols are available.
            </summary>
        </member>
        <member name="M:Sqlx.AbstractGenerator.ProcessCollectedSyntaxNodes(Microsoft.CodeAnalysis.GeneratorExecutionContext,Sqlx.ISqlxSyntaxReceiver)">
            <summary>
            Processes collected syntax nodes to populate symbol lists.
            </summary>
        </member>
        <member name="M:Sqlx.AbstractGenerator.HasSqlxAttribute(Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Checks if a method has Sqlx attributes using semantic analysis.
            </summary>
        </member>
        <member name="M:Sqlx.AbstractGenerator.HasRepositoryForAttribute(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Checks if a type has RepositoryFor attribute using semantic analysis.
            </summary>
        </member>
        <member name="M:Sqlx.ClassGenerationContext.SetExecutionContext(Microsoft.CodeAnalysis.GeneratorExecutionContext)">
            <summary>
            Sets the generator execution context and nullable options
            </summary>
        </member>
        <member name="M:Sqlx.ClassGenerationContext.GetSymbolWithPrimaryConstructor(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Func{Microsoft.CodeAnalysis.ISymbol,System.Boolean})">
            <summary>
            Gets a symbol (field, property, or primary constructor parameter) that matches the check condition
            </summary>
        </member>
        <member name="T:Sqlx.Constants">
            <summary>
            Define constants used in the Sqlx framework
            </summary>
        </member>
        <member name="T:Sqlx.Constants.SqlExecuteTypeValues">
            <summary>
            SQL operation type enumeration values
            </summary>
        </member>
        <member name="T:Sqlx.Constants.GeneratedVariables">
            <summary>
            Variable names in generated code
            </summary>
        </member>
        <member name="T:Sqlx.Constants.TypeNames">
            <summary>
            Type name constants
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.AttributeHandler">
            <summary>
            Default implementation of attribute handler.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.AttributeHandler.GenerateOrCopyAttributes(Sqlx.Generator.Core.IndentedStringBuilder,Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String)">
            <summary>
            Generates or copies attributes for a method.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.AttributeHandler.GenerateSqlxAttribute(Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String)">
            <summary>
            Generates a Sqlx attribute for a method.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.AttributeHandler.GenerateSqlxAttribute(Microsoft.CodeAnalysis.AttributeData)">
            <summary>
            Generates an attribute from existing attribute data.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.BaseDialectProvider">
            <summary>
            Base class for database dialect providers with common functionality.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.BaseDialectProvider.SqlDefine">
            <inheritdoc />
        </member>
        <member name="P:Sqlx.Generator.Core.BaseDialectProvider.DialectType">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.BaseDialectProvider.GenerateLimitClause(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.BaseDialectProvider.GenerateInsertWithReturning(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.BaseDialectProvider.GenerateBatchInsert(System.String,System.String[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.BaseDialectProvider.GenerateUpsert(System.String,System.String[],System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.BaseDialectProvider.GetDatabaseTypeName(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.BaseDialectProvider.FormatDateTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.BaseDialectProvider.GetCurrentDateTimeSyntax">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.BaseDialectProvider.GetConcatenationSyntax(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.BaseDialectProvider.GetInsertParts(System.String,System.String[])">
            <summary>
            Helper method to generate basic insert statement parts.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.CodeGenerationService">
            <summary>
            Default implementation of code generation service.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.CodeGenerationService.GenerateRepositoryMethod(Sqlx.Generator.Core.RepositoryMethodContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.CodeGenerationService.GenerateRepositoryImplementation(Sqlx.Generator.Core.RepositoryGenerationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.CodeGenerationService.GenerateMethodDocumentation(Sqlx.Generator.Core.IndentedStringBuilder,Microsoft.CodeAnalysis.IMethodSymbol)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.CodeGenerationService.GenerateMethodDocumentationWithSql(Sqlx.Generator.Core.IndentedStringBuilder,Microsoft.CodeAnalysis.IMethodSymbol,System.String)">
            <summary>
            Generate method documentation with processed SQL
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.CodeGenerationService.GenerateEnhancedMethodDocumentation(Sqlx.Generator.Core.IndentedStringBuilder,Microsoft.CodeAnalysis.IMethodSymbol,System.String,Sqlx.Generator.Core.SqlTemplateResult)">
            <summary>
            Generate enhanced method documentation with detailed template processing information
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.CodeGenerationService.GenerateMethodVariables(Sqlx.Generator.Core.IndentedStringBuilder,Microsoft.CodeAnalysis.IMethodSymbol)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.CodeGenerationService.GenerateInterceptorMethods(Sqlx.Generator.Core.IndentedStringBuilder,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Generate interceptor methods for the specified repository class, including pre and post execution callbacks.
            </summary>
            <param name="sb">The string builder used to construct code.</param>
            <param name="repositoryClass">The repository class symbol to generate interceptor methods for.</param>
        </member>
        <member name="T:Sqlx.Generator.Core.DatabaseDialectProviderExtensions">
            <summary>
            Extension methods for IDatabaseDialectProvider.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.DatabaseDialectProviderExtensions.WrapColumn(Sqlx.Generator.Core.IDatabaseDialectProvider,System.String)">
            <summary>
            Wraps a column name with the appropriate database-specific delimiters.
            </summary>
            <param name="provider">The dialect provider.</param>
            <param name="columnName">The column name to wrap.</param>
            <returns>The wrapped column name.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.DatabaseDialectProviderExtensions.WrapString(Sqlx.Generator.Core.IDatabaseDialectProvider,System.String)">
            <summary>
            Wraps a string value with the appropriate database-specific delimiters.
            </summary>
            <param name="provider">The dialect provider.</param>
            <param name="value">The string value to wrap.</param>
            <returns>The wrapped string value.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.DatabaseDialectProviderExtensions.GetParameterPrefix(Sqlx.Generator.Core.IDatabaseDialectProvider)">
            <summary>
            Gets the parameter prefix for the database dialect.
            </summary>
            <param name="provider">The dialect provider.</param>
            <returns>The parameter prefix (e.g., "@", "$", ":"). </returns>
        </member>
        <member name="T:Sqlx.Generator.Core.GenerationContext">
            <summary>
            Unified context for code generation containing all necessary information.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.GenerationContext.#ctor(Microsoft.CodeAnalysis.GeneratorExecutionContext,Microsoft.CodeAnalysis.INamedTypeSymbol,Sqlx.Generator.Core.ISqlxGeneratorService)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Generator.Core.GenerationContext"/> class for repository generation.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.GenerationContext.#ctor(Microsoft.CodeAnalysis.GeneratorExecutionContext,Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String,Sqlx.Generator.Core.ISqlxGeneratorService,Sqlx.Generator.Core.IndentedStringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Generator.Core.GenerationContext"/> class for method generation.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.GenerationContext.ExecutionContext">
            <summary>
            Gets the execution context.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.GenerationContext.RepositoryClass">
            <summary>
            Gets the repository class (if applicable).
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.GenerationContext.Method">
            <summary>
            Gets the method symbol (if applicable).
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.GenerationContext.EntityType">
            <summary>
            Gets the entity type symbol.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.GenerationContext.TableName">
            <summary>
            Gets the table name.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.GenerationContext.GeneratorService">
            <summary>
            Gets the unified generator service.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.GenerationContext.StringBuilder">
            <summary>
            Gets the string builder for code generation.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.GenerationContext.IsAsync">
            <summary>
            Gets a value indicating whether the operation is async.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.GenerationContext.MethodName">
            <summary>
            Gets the method name.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.GenerationContext.Compilation">
            <summary>
            Gets the compilation context.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.ICodeGenerationService">
            <summary>
            Interface for code generation services.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.ICodeGenerationService.GenerateRepositoryMethod(Sqlx.Generator.Core.RepositoryMethodContext)">
            <summary>
            Generates repository method implementation.
            </summary>
            <param name="context">The generation context.</param>
        </member>
        <member name="M:Sqlx.Generator.Core.ICodeGenerationService.GenerateRepositoryImplementation(Sqlx.Generator.Core.RepositoryGenerationContext)">
            <summary>
            Generates repository implementation.
            </summary>
            <param name="context">The repository generation context.</param>
        </member>
        <member name="M:Sqlx.Generator.Core.ICodeGenerationService.GenerateMethodDocumentation(Sqlx.Generator.Core.IndentedStringBuilder,Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Generates method documentation.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Sqlx.Generator.Core.ICodeGenerationService.GenerateMethodDocumentationWithSql(Sqlx.Generator.Core.IndentedStringBuilder,Microsoft.CodeAnalysis.IMethodSymbol,System.String)">
            <summary>
            Generates method documentation with resolved SQL.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="method">The method.</param>
            <param name="processedSql">The processed SQL statement.</param>
        </member>
        <member name="M:Sqlx.Generator.Core.ICodeGenerationService.GenerateMethodVariables(Sqlx.Generator.Core.IndentedStringBuilder,Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Generates variable declarations for repository methods.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="method">The method.</param>
        </member>
        <member name="T:Sqlx.Generator.Core.IDatabaseDialectProvider">
            <summary>
            Provides database-specific SQL generation and syntax handling.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.IDatabaseDialectProvider.SqlDefine">
            <summary>
            Gets the SQL definition for this dialect.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.IDatabaseDialectProvider.DialectType">
            <summary>
            Gets the dialect type.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.IDatabaseDialectProvider.GenerateLimitClause(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Generates a LIMIT clause for pagination.
            </summary>
            <param name="limit">The maximum number of rows to return.</param>
            <param name="offset">The number of rows to skip.</param>
            <returns>The SQL LIMIT clause.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.IDatabaseDialectProvider.GenerateInsertWithReturning(System.String,System.String[])">
            <summary>
            Generates an INSERT statement with RETURNING clause for getting the inserted ID.
            </summary>
            <param name="tableName">The table name.</param>
            <param name="columns">The column names.</param>
            <returns>The SQL INSERT statement with RETURNING clause.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.IDatabaseDialectProvider.GenerateBatchInsert(System.String,System.String[],System.Int32)">
            <summary>
            Generates a batch INSERT statement optimized for the specific database.
            </summary>
            <param name="tableName">The table name.</param>
            <param name="columns">The column names.</param>
            <param name="batchSize">The batch size.</param>
            <returns>The SQL batch INSERT statement.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.IDatabaseDialectProvider.GenerateUpsert(System.String,System.String[],System.String[])">
            <summary>
            Generates an UPSERT (INSERT ... ON CONFLICT UPDATE) statement.
            </summary>
            <param name="tableName">The table name.</param>
            <param name="columns">The column names.</param>
            <param name="keyColumns">The key columns for conflict detection.</param>
            <returns>The SQL UPSERT statement.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.IDatabaseDialectProvider.GetDatabaseTypeName(System.Type)">
            <summary>
            Converts a .NET type to the appropriate database type name.
            </summary>
            <param name="dotNetType">The .NET type.</param>
            <returns>The database-specific type name.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.IDatabaseDialectProvider.FormatDateTime(System.DateTime)">
            <summary>
            Formats a date/time value for the specific database.
            </summary>
            <param name="dateTime">The date/time value.</param>
            <returns>The formatted date/time string.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.IDatabaseDialectProvider.GetCurrentDateTimeSyntax">
            <summary>
            Gets the syntax for getting the current date/time.
            </summary>
            <returns>The SQL expression for current date/time.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.IDatabaseDialectProvider.GetConcatenationSyntax(System.String[])">
            <summary>
            Gets the syntax for string concatenation.
            </summary>
            <param name="expressions">The expressions to concatenate.</param>
            <returns>The SQL string concatenation expression.</returns>
        </member>
        <member name="T:Sqlx.Generator.Core.ISqlTemplateEngine">
            <summary>
            Interface for SQL template processing engine.
            This is the unified way to handle all SQL template processing in Sqlx.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.ISqlTemplateEngine.ProcessTemplate(System.String,Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String)">
            <summary>
            Processes a SQL template and returns the final SQL with parameter handling.
            </summary>
            <param name="templateSql">The SQL template with placeholders.</param>
            <param name="method">The method being processed.</param>
            <param name="entityType">The entity type if available.</param>
            <param name="tableName">The table name.</param>
            <returns>The processed SQL template result.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.ISqlTemplateEngine.ValidateTemplate(System.String)">
            <summary>
            Validates a SQL template for correctness.
            </summary>
            <param name="templateSql">The SQL template to validate.</param>
            <returns>Validation result with errors if any.</returns>
        </member>
        <member name="T:Sqlx.Generator.Core.SqlTemplateResult">
            <summary>
            Result of SQL template processing.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlTemplateResult.ProcessedSql">
            <summary>
            Gets or sets the processed SQL.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlTemplateResult.Parameters">
            <summary>
            Gets or sets the parameter mappings.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlTemplateResult.HasDynamicFeatures">
            <summary>
            Gets or sets whether the template uses dynamic features.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlTemplateResult.Warnings">
            <summary>
            Gets or sets any processing warnings.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlTemplateResult.Errors">
            <summary>
            Gets or sets any processing errors.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlTemplateResult.Metadata">
            <summary>
            Gets or sets additional metadata about the processed template.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.ParameterMapping">
            <summary>
            Parameter mapping information.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.ParameterMapping.Name">
            <summary>
            Gets or sets the parameter name.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.ParameterMapping.Type">
            <summary>
            Gets or sets the parameter type.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.ParameterMapping.IsNullable">
            <summary>
            Gets or sets whether the parameter is nullable.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.ParameterMapping.DbType">
            <summary>
            Gets or sets the DB type.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.ParameterMapping.DefaultValue">
            <summary>
            Gets or sets the default value for the parameter.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.ParameterMapping.IsOptional">
            <summary>
            Gets or sets whether the parameter is optional.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.ParameterMapping.MaxLength">
            <summary>
            Gets or sets the maximum length for string parameters.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.TemplateValidationResult">
            <summary>
            Template validation result.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.TemplateValidationResult.IsValid">
            <summary>
            Gets or sets whether the template is valid.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.TemplateValidationResult.Errors">
            <summary>
            Gets or sets validation errors.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.TemplateValidationResult.Warnings">
            <summary>
            Gets or sets validation warnings.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.TemplateValidationResult.Suggestions">
            <summary>
            Gets or sets validation suggestions.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.TemplateValidationResult.Metadata">
            <summary>
            Gets or sets additional validation metadata.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.ISqlxGeneratorService">
            <summary>
            Unified service interface for Sqlx code generation.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.ISqlxGeneratorService.TypeInferenceService">
            <summary>
            Gets the type inference service.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.ISqlxGeneratorService.CodeGenerationService">
            <summary>
            Gets the code generation service.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.ISqlxGeneratorService.TemplateEngine">
            <summary>
            Gets the template engine.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.ISqlxGeneratorService.AttributeHandler">
            <summary>
            Gets the attribute handler.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.ISqlxGeneratorService.MethodAnalyzer">
            <summary>
            Gets the method analyzer.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.ISqlxGeneratorService.InferEntityTypeFromInterface(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Infers the entity type from a service interface.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.ISqlxGeneratorService.InferEntityTypeFromMethod(Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Infers the entity type from a method.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.ISqlxGeneratorService.GetServiceInterface(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Gets the service interface from repository class.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.ISqlxGeneratorService.GetTableName(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets the table name for an entity type.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.ISqlxGeneratorService.AnalyzeMethod(Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Analyzes a method to determine its operation characteristics.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.ISqlxGeneratorService.GenerateRepositoryImplementation(Sqlx.Generator.Core.GenerationContext)">
            <summary>
            Generates repository implementation.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.ISqlxGeneratorService.GenerateAttributes(Sqlx.Generator.Core.IndentedStringBuilder,Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String)">
            <summary>
            Generates or copies attributes for a method.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.ITypeInferenceService">
            <summary>
            Interface for type inference services.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.ITypeInferenceService.InferEntityTypeFromServiceInterface(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Infers the entity type from a service interface.
            </summary>
            <param name="serviceInterface">The service interface.</param>
            <returns>The inferred entity type.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.ITypeInferenceService.InferEntityTypeFromMethod(Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Infers the entity type from a method.
            </summary>
            <param name="method">The method.</param>
            <returns>The inferred entity type.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.ITypeInferenceService.GetServiceInterfaceFromSyntax(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Gets the service interface from repository class.
            </summary>
            <param name="repositoryClass">The repository class.</param>
            <param name="compilation">The compilation context.</param>
            <returns>The service interface.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.ITypeInferenceService.GetTableNameFromEntity(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets the table name for an entity type.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="tableNameAttributeSymbol">The table name attribute symbol.</param>
            <returns>The table name.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.ITypeInferenceService.GetTableName(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets the table name for a repository class and service type.
            </summary>
            <param name="repositoryClass">The repository class.</param>
            <param name="serviceType">The service type.</param>
            <param name="tableNameAttributeSymbol">The table name attribute symbol.</param>
            <returns>The table name.</returns>
        </member>
        <member name="T:Sqlx.Generator.Core.MethodAnalysisResult">
            <summary>
            Result of method analysis for code generation.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.MethodAnalysisResult.#ctor(Sqlx.Generator.Core.MethodOperationType,System.Boolean,Microsoft.CodeAnalysis.ITypeSymbol,System.Boolean,System.Boolean)">
            <summary>
            Result of method analysis for code generation.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.MethodOperationType">
            <summary>
            Types of SQL operations.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.MethodAnalyzer">
            <summary>
            Default implementation of method analyzer.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.MethodAnalyzer.AnalyzeMethod(Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Analyzes a method to determine its characteristics for code generation.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.MethodAnalyzer.IsAsyncMethod(Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Determines if a method is asynchronous.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.MethodAnalyzer.GetActualReturnType(Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Gets the actual return type from async methods.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.MySqlDialectProvider">
            <summary>
            MySQL database dialect provider with MySQL-specific SQL syntax.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.MySqlDialectProvider.SqlDefine">
            <inheritdoc />
        </member>
        <member name="P:Sqlx.Generator.Core.MySqlDialectProvider.DialectType">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.MySqlDialectProvider.GenerateLimitClause(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.MySqlDialectProvider.GenerateInsertWithReturning(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.MySqlDialectProvider.GenerateUpsert(System.String,System.String[],System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.MySqlDialectProvider.GetDatabaseTypeName(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.MySqlDialectProvider.FormatDateTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.MySqlDialectProvider.GetCurrentDateTimeSyntax">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.MySqlDialectProvider.GetConcatenationSyntax(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Sqlx.Generator.Core.PostgreSqlDialectProvider">
            <summary>
            PostgreSQL database dialect provider with PostgreSQL-specific SQL syntax.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.PostgreSqlDialectProvider.SqlDefine">
            <inheritdoc />
        </member>
        <member name="P:Sqlx.Generator.Core.PostgreSqlDialectProvider.DialectType">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.PostgreSqlDialectProvider.GenerateLimitClause(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.PostgreSqlDialectProvider.GenerateInsertWithReturning(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.PostgreSqlDialectProvider.GenerateBatchInsert(System.String,System.String[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.PostgreSqlDialectProvider.GenerateUpsert(System.String,System.String[],System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.PostgreSqlDialectProvider.GetDatabaseTypeName(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.PostgreSqlDialectProvider.FormatDateTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.PostgreSqlDialectProvider.GetCurrentDateTimeSyntax">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.PostgreSqlDialectProvider.GetConcatenationSyntax(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Sqlx.Generator.Core.RepositoryGenerationContext">
            <summary>
            Context for repository generation.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.RepositoryGenerationContext.#ctor(Microsoft.CodeAnalysis.GeneratorExecutionContext,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Sqlx.Generator.Core.ITypeInferenceService,Sqlx.Generator.Core.ICodeGenerationService,Sqlx.Generator.Core.ISqlTemplateEngine,Sqlx.Generator.Core.AttributeHandler,Sqlx.Generator.Core.MethodAnalyzer)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Generator.Core.RepositoryGenerationContext"/> class.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryGenerationContext.ExecutionContext">
            <summary>
            Gets the execution context.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryGenerationContext.RepositoryClass">
            <summary>
            Gets the repository class.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryGenerationContext.RepositoryForAttributeSymbol">
            <summary>
            Gets the repository for attribute symbol.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryGenerationContext.TableNameAttributeSymbol">
            <summary>
            Gets the table name attribute symbol.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryGenerationContext.SqlxAttributeSymbol">
            <summary>
            Gets the Sqlx attribute symbol.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryGenerationContext.TypeInferenceService">
            <summary>
            Gets the type inference service.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryGenerationContext.CodeGenerationService">
            <summary>
            Gets the code generation service.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryGenerationContext.TemplateEngine">
            <summary>
            Gets the template engine.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryGenerationContext.AttributeHandler">
            <summary>
            Gets the attribute handler.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryGenerationContext.MethodAnalyzer">
            <summary>
            Gets the method analyzer.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.RepositoryMethodContext">
            <summary>
            Context for repository method generation.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.RepositoryMethodContext.#ctor(Sqlx.Generator.Core.IndentedStringBuilder,Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String,System.String,Sqlx.Generator.Core.AttributeHandler,Sqlx.Generator.Core.MethodAnalyzer)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Generator.Core.RepositoryMethodContext"/> class.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryMethodContext.StringBuilder">
            <summary>
            Gets the string builder.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryMethodContext.Method">
            <summary>
            Gets the method symbol.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryMethodContext.EntityType">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryMethodContext.TableName">
            <summary>
            Gets the table name.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryMethodContext.ProcessedSql">
            <summary>
            Gets the processed SQL.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryMethodContext.AttributeHandler">
            <summary>
            Gets the attribute handler.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.RepositoryMethodContext.MethodAnalyzer">
            <summary>
            Gets the method analyzer.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.SharedCodeGenerationUtilities">
            <summary>
            Shared code generation utilities to reduce code duplication
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SharedCodeGenerationUtilities.GenerateFileHeader(Sqlx.Generator.Core.IndentedStringBuilder,System.String)">
            <summary>
            Generate standard file header
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SharedCodeGenerationUtilities.GenerateErrorHandling(Sqlx.Generator.Core.IndentedStringBuilder,System.Action)">
            <summary>
            Generate simplified error handling block
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SharedCodeGenerationUtilities.GenerateCommandSetup(Sqlx.Generator.Core.IndentedStringBuilder,System.String,Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Generate command creation and parameter binding
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SharedCodeGenerationUtilities.GetDbType(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Get DbType
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SharedCodeGenerationUtilities.GenerateEntityMapping(Sqlx.Generator.Core.IndentedStringBuilder,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String)">
            <summary>
            Generate entity property mapping
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SharedCodeGenerationUtilities.IsNullableType(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Check if type is nullable
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SharedCodeGenerationUtilities.ConvertToSnakeCase(System.String)">
            <summary>
            Convert C# property names to snake_case database column names
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.SqlDefine">
            <summary>
            Internal SQL dialect definition for code generation.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlDefine.ColumnLeft">
            <summary>
            Gets column left delimiter
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlDefine.ColumnRight">
            <summary>
            Gets column right delimiter
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlDefine.StringLeft">
            <summary>
            Gets string left delimiter
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlDefine.StringRight">
            <summary>
            Gets string right delimiter
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlDefine.ParameterPrefix">
            <summary>
            Gets parameter prefix
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlDefine.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the SqlDefine struct
            </summary>
            <param name="columnLeft">Column left delimiter</param>
            <param name="columnRight">Column right delimiter</param>
            <param name="stringLeft">String left delimiter</param>
            <param name="stringRight">String right delimiter</param>
            <param name="parameterPrefix">Parameter prefix</param>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlDefine.MySql">
            <summary>
            Get SQL dialect definition for MySQL database.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlDefine.SqlServer">
            <summary>
            Get SQL dialect definition for SQL Server database.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlDefine.PostgreSql">
            <summary>
            Get SQL dialect definition for PostgreSQL database.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlDefine.SQLite">
            <summary>
            Get SQL dialect definition for SQLite database.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlDefine.PgSql">
            <summary>
            Get SQL dialect definition for PostgreSQL database (alias).
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlDefine.Oracle">
            <summary>
            Get SQL dialect definition for Oracle database.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlDefine.DB2">
            <summary>
            Get SQL dialect definition for DB2 database.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlDefine.WrapString(System.String)">
            <summary>
            Wrap the specified string using string delimiters.
            </summary>
            <param name="input">The string to wrap.</param>
            <returns>The wrapped string.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlDefine.WrapColumn(System.String)">
            <summary>
            Wrap the specified column name using column delimiters.
            </summary>
            <param name="input">The column name to wrap.</param>
            <returns>The wrapped column name.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlDefine.Deconstruct(System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Deconstruct the SqlDefine structure into its component parts.
            </summary>
            <param name="columnLeft">Left delimiter for column names.</param>
            <param name="columnRight">Right delimiter for column names.</param>
            <param name="stringLeft">Left delimiter for strings.</param>
            <param name="stringRight">Right delimiter for strings.</param>
            <param name="parameterPrefix">Prefix for parameters.</param>
        </member>
        <member name="T:Sqlx.Generator.Core.SqlDefineTypes">
            <summary>
            SQL dialect types enumeration for code generation.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlDefineTypes.MySql">
            <summary>
            MySQL database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlDefineTypes.SqlServer">
            <summary>
            SQL Server database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlDefineTypes.PostgreSql">
            <summary>
            PostgreSQL database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlDefineTypes.Oracle">
            <summary>
            Oracle database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlDefineTypes.DB2">
            <summary>
            DB2 database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlDefineTypes.SQLite">
            <summary>
            SQLite database dialect type.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.SQLiteDialectProvider">
            <summary>
            SQLite database dialect provider with SQLite-specific SQL syntax.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SQLiteDialectProvider.SqlDefine">
            <inheritdoc />
        </member>
        <member name="P:Sqlx.Generator.Core.SQLiteDialectProvider.DialectType">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.SQLiteDialectProvider.GenerateLimitClause(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.SQLiteDialectProvider.GenerateInsertWithReturning(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.SQLiteDialectProvider.GenerateUpsert(System.String,System.String[],System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.SQLiteDialectProvider.GetDatabaseTypeName(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.SQLiteDialectProvider.FormatDateTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.SQLiteDialectProvider.GetCurrentDateTimeSyntax">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.SQLiteDialectProvider.GetConcatenationSyntax(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Sqlx.Generator.Core.SqlServerDialectProvider">
            <summary>
            SQL Server database dialect provider with SQL Server-specific SQL syntax.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlServerDialectProvider.SqlDefine">
            <inheritdoc />
        </member>
        <member name="P:Sqlx.Generator.Core.SqlServerDialectProvider.DialectType">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.SqlServerDialectProvider.GenerateLimitClause(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.SqlServerDialectProvider.GenerateInsertWithReturning(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.SqlServerDialectProvider.GenerateUpsert(System.String,System.String[],System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.SqlServerDialectProvider.GetDatabaseTypeName(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.SqlServerDialectProvider.FormatDateTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.SqlServerDialectProvider.GetCurrentDateTimeSyntax">
            <inheritdoc />
        </member>
        <member name="M:Sqlx.Generator.Core.SqlServerDialectProvider.GetConcatenationSyntax(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Sqlx.Generator.Core.SqlTemplateEngine">
            <summary>
            SQL template processing engine implementation.
            This is the core engine that processes SQL templates with placeholders and generates appropriate code.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplateEngine.ProcessTemplate(System.String,Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplateEngine.ValidateTemplate(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplateEngine.ConvertToSnakeCase(System.String)">
            <summary>
            Converts C# property names to snake_case database column names.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.SqlTemplatePlaceholder">
            <summary>
            SQL template placeholder processor, supports dynamic replacement of placeholders like {{columns}}, {{table}}, {{where}} etc
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.SqlTemplatePlaceholder.Placeholders">
            <summary>
            Supported placeholder types
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlTemplatePlaceholder.Placeholders.Columns">
            <summary>
            Column name placeholder, used to replace table column name list.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlTemplatePlaceholder.Placeholders.Table">
            <summary>
            Table name placeholder, used to replace database table name.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlTemplatePlaceholder.Placeholders.Where">
            <summary>
            WHERE clause placeholder, used to replace query conditions.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlTemplatePlaceholder.Placeholders.OrderBy">
            <summary>
            ORDER BY clause placeholder, used to replace sorting conditions.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlTemplatePlaceholder.Placeholders.Insert">
            <summary>
            INSERT statement placeholder, used to replace insert column names.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlTemplatePlaceholder.Placeholders.Update">
            <summary>
            UPDATE statement placeholder, used to replace update column names.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlTemplatePlaceholder.Placeholders.Values">
            <summary>
            VALUES clause placeholder, used to replace insert values.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlTemplatePlaceholder.Placeholders.Joins">
            <summary>
            JOIN clause placeholder, used to replace table joins.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlTemplatePlaceholder.Placeholders.Select">
            <summary>
            SELECT clause placeholder, used to replace query column names.
            </summary>
        </member>
        <member name="F:Sqlx.Generator.Core.SqlTemplatePlaceholder.Placeholders.Count">
            <summary>
            COUNT function placeholder, used to replace count queries.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.ProcessTemplate(System.String,Sqlx.Generator.Core.SqlPlaceholderContext)">
            <summary>
            Process placeholder replacement in SQL templates
            </summary>
            <param name="sqlTemplate">Original SQL template</param>
            <param name="context">Replacement context</param>
            <returns>Processed SQL string</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.ContainsPlaceholders(System.String)">
            <summary>
            Check if SQL template contains placeholders
            </summary>
            <param name="sqlTemplate">SQL template</param>
            <returns>Whether it contains placeholders</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.GetPlaceholders(System.String)">
            <summary>
            Get all placeholders in SQL template
            </summary>
            <param name="sqlTemplate">SQL template</param>
            <returns>List of placeholders</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.ProcessColumnsPlaceholder(Sqlx.Generator.Core.SqlPlaceholderContext,System.String)">
            <summary>
            Process {{columns}} placeholder
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.ProcessTablePlaceholder(Sqlx.Generator.Core.SqlPlaceholderContext,System.String)">
            <summary>
            Process {{table}} placeholder
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.ProcessWherePlaceholder(Sqlx.Generator.Core.SqlPlaceholderContext,System.String)">
            <summary>
            Process {{where}} placeholder
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.ProcessOrderByPlaceholder(Sqlx.Generator.Core.SqlPlaceholderContext,System.String)">
            <summary>
            Process {{orderby}} placeholder
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.ProcessInsertPlaceholder(Sqlx.Generator.Core.SqlPlaceholderContext,System.String)">
            <summary>
            Process {{insert}} placeholder
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.ProcessUpdatePlaceholder(Sqlx.Generator.Core.SqlPlaceholderContext,System.String)">
            <summary>
            Process {{update}} placeholder
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.ProcessValuesPlaceholder(Sqlx.Generator.Core.SqlPlaceholderContext,System.String)">
            <summary>
            Process {{values}} placeholder
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.ProcessJoinsPlaceholder(Sqlx.Generator.Core.SqlPlaceholderContext,System.String)">
            <summary>
            Process {{joins}} placeholder
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.ProcessSelectPlaceholder(Sqlx.Generator.Core.SqlPlaceholderContext,System.String)">
            <summary>
            Process {{select}} placeholder
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.ProcessCountPlaceholder(Sqlx.Generator.Core.SqlPlaceholderContext,System.String)">
            <summary>
            Process {{count}} placeholder
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.GetEntityColumns(Microsoft.CodeAnalysis.INamedTypeSymbol,Sqlx.Generator.Core.SqlDefine,System.Boolean)">
            <summary>
            Get all columns of the entity type
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.GetPrimaryKeyColumn(Microsoft.CodeAnalysis.INamedTypeSymbol,Sqlx.Generator.Core.SqlDefine)">
            <summary>
            Get primary key columns
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.ParseArgs(System.String)">
            <summary>
            Parse placeholder parameters
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlTemplatePlaceholder.GetColumnNameWithoutWrapper(System.String)">
            <summary>
            Get column name with wrapper removed
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.SqlPlaceholderContext">
            <summary>
            SQL placeholder replacement context
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlPlaceholderContext.EntityType">
            <summary>
            Get or set the entity type symbol.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlPlaceholderContext.TableName">
            <summary>
            Get or set the database table name.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlPlaceholderContext.SqlDefine">
            <summary>
            Get or set the SQL dialect definition.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlPlaceholderContext.Method">
            <summary>
            Get or set the current method symbol being processed.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlPlaceholderContext.AdditionalData">
            <summary>
            Get or set additional context data.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlPlaceholderContext.#ctor(Sqlx.Generator.Core.SqlDefine)">
            <summary>
            Initialize a new instance of the SqlPlaceholderContext class.
            </summary>
            <param name="sqlDefine">SQL dialect definition.</param>
        </member>
        <member name="T:Sqlx.Generator.Core.SqlxGeneratorService">
            <summary>
            Unified service implementation for Sqlx code generation.
            Combines type inference, method analysis, and code generation capabilities.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlxGeneratorService.TypeInferenceService">
            <summary>
            Gets the type inference service.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlxGeneratorService.CodeGenerationService">
            <summary>
            Gets the code generation service.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlxGeneratorService.TemplateEngine">
            <summary>
            Gets the template engine.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlxGeneratorService.AttributeHandler">
            <summary>
            Gets the attribute handler.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.SqlxGeneratorService.MethodAnalyzer">
            <summary>
            Gets the method analyzer.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlxGeneratorService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Generator.Core.SqlxGeneratorService"/> class.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlxGeneratorService.InferEntityTypeFromInterface(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlxGeneratorService.InferEntityTypeFromMethod(Microsoft.CodeAnalysis.IMethodSymbol)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlxGeneratorService.GetServiceInterface(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Compilation)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlxGeneratorService.GetTableName(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlxGeneratorService.GetTableName(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlxGeneratorService.AnalyzeMethod(Microsoft.CodeAnalysis.IMethodSymbol)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlxGeneratorService.GenerateRepositoryImplementation(Sqlx.Generator.Core.GenerationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.SqlxGeneratorService.GenerateAttributes(Sqlx.Generator.Core.IndentedStringBuilder,Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Sqlx.Generator.Core.TemplateEngineFactory">
            <summary>
            Factory for creating SQL template engines.
            </summary>
        </member>
        <member name="P:Sqlx.Generator.Core.TemplateEngineFactory.Default">
            <summary>
            Gets a new default template engine instance.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Core.TypeInferenceService">
            <summary>
            Default implementation of type inference service.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.TypeInferenceService.InferEntityTypeFromServiceInterface(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.TypeInferenceService.InferEntityTypeFromMethod(Microsoft.CodeAnalysis.IMethodSymbol)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.TypeInferenceService.GetServiceInterfaceFromSyntax(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Compilation)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.TypeInferenceService.GetTableNameFromEntity(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <inheritdoc/>
        </member>
        <member name="M:Sqlx.Generator.Core.TypeInferenceService.GetTableName(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <inheritdoc/>
        </member>
        <member name="T:Sqlx.Generator.Core.IndentedStringBuilder">
            <summary>
            Provides a string builder with automatic indentation functionality for generating formatted code.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Core.IndentedStringBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Generator.Core.IndentedStringBuilder"/> class.
            </summary>
            <param name="content">Initial content for the string builder.</param>
        </member>
        <member name="M:Sqlx.Generator.Core.IndentedStringBuilder.Append(System.String)">
            <summary>
            Append the specified string to the string builder, adding indentation when needed.
            </summary>
            <param name="value">The string to append.</param>
            <returns>The current IndentedStringBuilder instance to support method chaining.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.IndentedStringBuilder.Append(System.Char)">
            <summary>
            Append the specified character to the string builder, adding indentation when needed.
            </summary>
            <param name="value">The character to append.</param>
            <returns>The current IndentedStringBuilder instance to support method chaining.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.IndentedStringBuilder.AppendLine">
            <summary>
            Append a newline character to the string builder.
            </summary>
            <returns>The current IndentedStringBuilder instance to support method chaining.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.IndentedStringBuilder.AppendLineIf(System.Boolean,System.String,System.String)">
            <summary>
            Conditionally append a line of content to the string builder.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="trueValue">The string to append when condition is true.</param>
            <param name="falseValue">The string to append when condition is false (optional).</param>
            <returns>The current IndentedStringBuilder instance to support method chaining.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.IndentedStringBuilder.AppendLine(System.String)">
            <summary>
            Append the specified string to the string builder and add a newline.
            </summary>
            <param name="value">The string to append.</param>
            <returns>The current IndentedStringBuilder instance to support method chaining.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.IndentedStringBuilder.PushIndent">
            <summary>
            Increase the indentation level, subsequent content will use deeper indentation.
            </summary>
            <returns>The current IndentedStringBuilder instance to support method chaining.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.IndentedStringBuilder.PopIndent">
            <summary>
            Decrease the indentation level, subsequent content will use shallower indentation.
            </summary>
            <returns>The current IndentedStringBuilder instance to support method chaining.</returns>
        </member>
        <member name="M:Sqlx.Generator.Core.IndentedStringBuilder.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sqlx.Generator.DatabaseDialectFactory">
            <summary>
            Simple factory for creating database dialect providers.
            No caching needed - these are lightweight objects.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.DatabaseDialectFactory.GetDialectProvider(Sqlx.Generator.Core.SqlDefineTypes)">
            <summary>
            Gets the dialect provider for the specified database type.
            </summary>
            <param name="dialectType">The database dialect type.</param>
            <returns>The appropriate dialect provider.</returns>
        </member>
        <member name="M:Sqlx.Generator.DatabaseDialectFactory.GetDialectProvider(Sqlx.Generator.Core.SqlDefine)">
            <summary>
            Gets the dialect provider for the specified SQL definition.
            </summary>
            <param name="sqlDefine">The SQL definition.</param>
            <returns>The appropriate dialect provider.</returns>
        </member>
        <member name="M:Sqlx.Generator.DatabaseDialectFactory.InferDialectFromCharacteristics(Sqlx.Generator.Core.SqlDefine)">
            <summary>
            Infers the dialect type from SqlDefine characteristics.
            </summary>
            <param name="sqlDefine">The SQL definition.</param>
            <returns>The inferred dialect type.</returns>
        </member>
        <member name="M:Sqlx.Generator.DatabaseDialectFactory.CreateDialectProvider(Sqlx.Generator.Core.SqlDefineTypes)">
            <summary>
            Creates a dialect provider for the specified type.
            </summary>
            <param name="dialectType">The dialect type.</param>
            <returns>The created dialect provider.</returns>
        </member>
        <member name="T:Sqlx.Generator.Tools.TemplateValidator">
            <summary>
            Simplified template validation tool.
            </summary>
        </member>
        <member name="M:Sqlx.Generator.Tools.TemplateValidator.#ctor(Sqlx.Generator.Core.ISqlTemplateEngine)">
            <summary>
            Initializes a new instance of the TemplateValidator class.
            </summary>
            <param name="engine">Template engine to use for validation.</param>
        </member>
        <member name="M:Sqlx.Generator.Tools.TemplateValidator.ValidateTemplate(System.String,Sqlx.Generator.Tools.ValidationContext)">
            <summary>
            Validates a single template and returns basic results.
            </summary>
            <param name="template">Template to validate.</param>
            <param name="context">Optional validation context.</param>
            <returns>Validation report.</returns>
        </member>
        <member name="M:Sqlx.Generator.Tools.TemplateValidator.ValidateTemplates(System.Collections.Generic.IEnumerable{Sqlx.Generator.Tools.TemplateInfo})">
            <summary>
            Validates multiple templates and returns a batch report.
            </summary>
            <param name="templates">Templates to validate.</param>
            <returns>Batch validation report.</returns>
        </member>
        <member name="T:Sqlx.Generator.Tools.ValidationContext">
            <summary>
            Validation context information.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Tools.TemplateInfo">
            <summary>
            Template information for validation.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Tools.TemplateValidationReport">
            <summary>
            Template validation report.
            </summary>
        </member>
        <member name="T:Sqlx.Generator.Tools.BatchValidationReport">
            <summary>
            Batch validation report.
            </summary>
        </member>
        <member name="T:Sqlx.PrimaryConstructorAnalyzer">
            <summary>
            Analyzer for primary constructors and record types in C# 12+.
            </summary>
        </member>
        <member name="M:Sqlx.PrimaryConstructorAnalyzer.IsRecord(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Determines if a type is a record type.
            </summary>
        </member>
        <member name="M:Sqlx.PrimaryConstructorAnalyzer.HasPrimaryConstructor(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Determines if a type has a primary constructor.
            </summary>
        </member>
        <member name="M:Sqlx.PrimaryConstructorAnalyzer.GetPrimaryConstructor(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets the primary constructor of a type, if it exists.
            </summary>
        </member>
        <member name="M:Sqlx.PrimaryConstructorAnalyzer.GetPrimaryConstructorParameters(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets the parameters of the primary constructor.
            </summary>
        </member>
        <member name="M:Sqlx.PrimaryConstructorAnalyzer.GetAccessibleMembers(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets all accessible members (properties from primary constructor + regular properties).
            </summary>
        </member>
        <member name="M:Sqlx.PrimaryConstructorAnalyzer.IsPrimaryConstructor(Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Determines if a constructor is likely a primary constructor.
            </summary>
        </member>
        <member name="M:Sqlx.PrimaryConstructorAnalyzer.GetPropertyNameFromParameter(System.String)">
            <summary>
            Converts a parameter name to the corresponding property name (PascalCase).
            </summary>
        </member>
        <member name="T:Sqlx.IMemberInfo">
            <summary>
            Represents information about a member (property or primary constructor parameter).
            </summary>
        </member>
        <member name="T:Sqlx.PropertyMemberInfo">
            <summary>
            Member info for regular properties.
            </summary>
        </member>
        <member name="T:Sqlx.PrimaryConstructorParameterMemberInfo">
            <summary>
            Member info for primary constructor parameters.
            </summary>
        </member>
        <member name="T:Sqlx.CSharpGenerator">
            <summary>
            Stored procedures generator for C#.
            </summary>
        </member>
        <member name="M:Sqlx.CSharpGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.CSharpGenerator"/> class.
            </summary>
        </member>
        <member name="M:Sqlx.CSharpGenerator.Initialize(Microsoft.CodeAnalysis.GeneratorInitializationContext)">
            <summary>
            Called to initialize the generator and register for the various 
            <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>
            callbacks.
            </summary>
            <param name="context">The generator context.</param>
        </member>
        <member name="T:Sqlx.CSharpGenerator.CSharpSyntaxReceiver">
            <summary>
            C# specific syntax receiver for collecting method symbols and repository classes.
            </summary>
        </member>
        <member name="M:Sqlx.Extensions.IsCollectionType(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Determines if a type is a collection type (IEnumerable, List, Array, etc.)
            </summary>
        </member>
        <member name="P:Sqlx.GenerationContextBase.DbConnection">
            <summary>
            Gets the <see cref="T:System.Data.Common.DbConnection"/> if the method paramters has.
            </summary>
        </member>
        <member name="P:Sqlx.GenerationContextBase.TransactionParameter">
            <summary>
             Gets the <see cref="T:System.Data.Common.DbTransaction"/> if the method paramters has.
            </summary>
        </member>
        <member name="P:Sqlx.GenerationContextBase.DbContext">
            <summary>
             Gets the DbContext if the method paramters has.
            </summary>
        </member>
        <member name="T:Sqlx.ISqlxSyntaxReceiver">
            <summary>
            Simple interface for syntax receiver collections.
            </summary>
        </member>
        <member name="P:Sqlx.ISqlxSyntaxReceiver.Methods">
            <summary>
            Gets list of collected methods.
            </summary>
        </member>
        <member name="P:Sqlx.ISqlxSyntaxReceiver.RepositoryClasses">
            <summary>
            Gets list of collected repository classes.
            </summary>
        </member>
        <member name="P:Sqlx.ISqlxSyntaxReceiver.MethodSyntaxNodes">
            <summary>
            Gets list of collected method syntax nodes for later processing.
            </summary>
        </member>
        <member name="P:Sqlx.ISqlxSyntaxReceiver.ClassSyntaxNodes">
            <summary>
            Gets list of collected class syntax nodes for later processing.
            </summary>
        </member>
        <member name="P:Sqlx.MethodGenerationContext.RawSqlParameter">
            <summary>
             Gets the SqlAttribute if the method paramters has.
            </summary>
        </member>
        <member name="P:Sqlx.MethodGenerationContext.CancellationTokenParameter">
            <summary>
             Gets the <see cref="T:System.Threading.CancellationToken"/> if the method paramters has.
            </summary>
        </member>
        <member name="P:Sqlx.MethodGenerationContext.TimeoutParameter">
            <summary>
            Gets the commandtimeout.
            </summary>
        </member>
        <member name="P:Sqlx.MethodGenerationContext.ReaderHandlerParameter">
            <summary>
            Gets the DbReaderHandler.
            </summary>
        </member>
        <member name="P:Sqlx.MethodGenerationContext.ExpressionToSqlParameter">
            <summary>
            Gets the ExpressionToSql parameter for LINQ expression processing.
            </summary>
        </member>
        <member name="P:Sqlx.MethodGenerationContext.SqlParameters">
            <summary>
            Gets the method paramters remove the extars.
            </summary>
        </member>
        <member name="P:Sqlx.MethodGenerationContext.ReturnIsEnumerable">
            <summary>
            Public properties for tests
            </summary>
        </member>
        <member name="T:Sqlx.NameMapper">
            <summary>
            Provides mapping name support between parameter names in C# to Stored procedures parameter names.
            </summary>
        </member>
        <member name="M:Sqlx.NameMapper.MapName(System.String)">
            <summary>
            Maps parameter name to snake_case for database compatibility.
            </summary>
            <param name="parameterName">Name of the parameter to map.</param>
            <returns>Corresponding snake_case database column name.</returns>
        </member>
    </members>
</doc>
