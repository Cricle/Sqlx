// -----------------------------------------------------------------------
// <copyright file="MethodGenerationNullAndOpenTests.cs" company="Cricle">
// Copyright (c) Cricle. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.Linq;

namespace Sqlx.Tests.Core
{
    [TestClass]
    public class MethodGenerationNullAndOpenTests
    {
        [TestMethod]
        public void Sync_Select_Generates_NullChecks_And_Open()
        {
            var source = @"using Sqlx.Annotations; using System.Data.Common; using System.Collections.Generic; 
namespace N { 
  [RepositoryFor(typeof(IRepo))]
  public partial class Repo : IRepo { private readonly DbConnection connection; public Repo(DbConnection c){connection=c;} }
  public interface IRepo {
    [SqlExecuteType(SqlExecuteTypes.Select, ""users"")] int GetByIds(IList<int> ids);
  }
}";

            var code = string.Join("\n", Generate(source));
            Assert.IsTrue(code.Contains("// Parameter null checks (fail fast)"));
            Assert.IsTrue(code.Contains("if (ids == null)"));
            Assert.IsTrue(code.Contains("throw new global::System.ArgumentNullException(nameof(ids));"));
            Assert.IsTrue(code.Contains("connection.Open();"));
        }

        [TestMethod]
        public void Async_Select_Generates_OpenAsync_With_CancellationToken()
        {
            var source = @"using Sqlx.Annotations; using System.Data.Common; using System.Threading; using System.Threading.Tasks; 
namespace N { 
  [RepositoryFor(typeof(IRepo))]
  public partial class Repo : IRepo { private readonly DbConnection connection; public Repo(DbConnection c){connection=c;} }
  public interface IRepo {
    [SqlExecuteType(SqlExecuteTypes.Select, ""users"")] Task<int> GetCountAsync(CancellationToken cancellationToken);
  }
}";

            var code = string.Join("\n", Generate(source));
            Assert.IsTrue(code.Contains("await connection.OpenAsync(cancellationToken);"));
        }

        [TestMethod]
        public void String_Param_Should_Not_Have_NullCheck()
        {
            var source = @"using Sqlx.Annotations; using System.Data.Common; 
namespace N { 
  [RepositoryFor(typeof(IRepo))]
  public partial class Repo : IRepo { private readonly DbConnection connection; public Repo(DbConnection c){connection=c;} }
  public interface IRepo {
    [SqlExecuteType(SqlExecuteTypes.Select, ""users"")] int GetByName(string name);
  }
}";

            var code = string.Join("\n", Generate(source));
            Assert.IsFalse(code.Contains("if (name == null)"));
        }

        [TestMethod]
        public void System_Params_Should_Not_Have_NullCheck()
        {
            var source = @"using Sqlx.Annotations; using System.Data.Common; 
namespace N { 
  [RepositoryFor(typeof(IRepo))]
  public partial class Repo : IRepo { private readonly DbConnection connection; public Repo(DbConnection c){connection=c;} }
  public interface IRepo {
    [SqlExecuteType(SqlExecuteTypes.Select, ""users"")] int GetWithTran(DbTransaction tran);
  }
}";

            var code = string.Join("\n", Generate(source));
            Assert.IsFalse(code.Contains("if (tran == null)"));
        }

        private static List<string> Generate(string source)
        {
            var syntaxTree = CSharpSyntaxTree.ParseText(source);
            var references = new List<MetadataReference>
            {
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(System.Data.Common.DbConnection).Assembly.Location)
            };

            var compilation = CSharpCompilation.Create(
                "MgcNullOpenAsm",
                new[] { syntaxTree },
                references,
                new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

            var generator = new CSharpGenerator();
            var driver = CSharpGeneratorDriver.Create(generator);
            driver.RunGeneratorsAndUpdateCompilation(compilation, out var newCompilation, out var diags);

            var generated = new List<string>();
            foreach (var tree in newCompilation.SyntaxTrees)
            {
                var text = tree.ToString();
                if (text.Contains("// <auto-generated>") || string.IsNullOrEmpty(tree.FilePath))
                    generated.Add(text);
            }
            return generated;
        }
    }

    
}


