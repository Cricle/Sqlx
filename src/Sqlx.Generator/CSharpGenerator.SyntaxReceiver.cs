// -----------------------------------------------------------------------
// <auto-generated>
// -----------------------------------------------------------------------

#nullable enable

namespace Sqlx;

using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

public partial class CSharpGenerator
{
    /// <summary>
    /// C# specific syntax receiver for collecting method symbols and repository classes.
    /// </summary>
    private class CSharpSyntaxReceiver : ISqlxSyntaxReceiver, ISyntaxReceiver
    {
        public List<IMethodSymbol> Methods { get; } = new List<IMethodSymbol>();
        public List<INamedTypeSymbol> RepositoryClasses { get; } = new List<INamedTypeSymbol>();
        
        // Collect syntax nodes for later processing
        public List<MethodDeclarationSyntax> MethodSyntaxNodes { get; } = new List<MethodDeclarationSyntax>();
        public List<ClassDeclarationSyntax> ClassSyntaxNodes { get; } = new List<ClassDeclarationSyntax>();

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            // Collect method declarations with potential Sqlx attributes
            if (syntaxNode is MethodDeclarationSyntax methodDeclaration && HasSqlxAttributeSyntax(methodDeclaration))
            {
                MethodSyntaxNodes.Add(methodDeclaration);
            }
            // Collect class declarations with potential RepositoryFor attributes
            else if (syntaxNode is ClassDeclarationSyntax classDeclaration && HasRepositoryForAttributeSyntax(classDeclaration))
            {
                ClassSyntaxNodes.Add(classDeclaration);
            }
        }

        public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
        {
            var semanticModel = context.SemanticModel;
            
            // Collect methods with Sqlx attributes
            if (context.Node is MethodDeclarationSyntax methodDeclaration && 
                semanticModel.GetDeclaredSymbol(methodDeclaration) is IMethodSymbol method && 
                HasSqlxAttribute(method))
            {
                Methods.Add(method);
            }
            // Collect repository classes with RepositoryFor attributes
            else if (context.Node is ClassDeclarationSyntax classDeclaration && 
                     semanticModel.GetDeclaredSymbol(classDeclaration) is INamedTypeSymbol type && 
                     HasRepositoryForAttribute(type))
            {
                RepositoryClasses.Add(type);
            }
        }

        private static bool HasSqlxAttribute(IMethodSymbol method)
        {
            // Only collect methods declared in classes to avoid generating implementations for interfaces
            if (method.ContainingType?.TypeKind != TypeKind.Class)
                return false;

            // Check semantic attributes first
            if (HasSemanticSqlxAttribute(method))
                return true;

            // Fallback: syntax-based detection for tests without using directives
            return HasSyntaxSqlxAttribute(method);
        }

        private static bool HasSemanticSqlxAttribute(IMethodSymbol method) =>
            method.GetAttributes().Any(attr => IsSqlxAttributeName(attr.AttributeClass?.Name));

        private static bool HasSyntaxSqlxAttribute(IMethodSymbol method)
        {
            var syntax = method.DeclaringSyntaxReferences.FirstOrDefault()?.GetSyntax() as Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax;
            return syntax?.AttributeLists.Any(attrList =>
                attrList.Attributes.Any(attr => IsSqlxAttributeName(attr.Name.ToString()))) == true;
        }

        private static bool IsSqlxAttributeName(string? name) => name is 
            "SqlxAttribute" or "Sqlx" or "SqlTemplateAttribute" or "SqlTemplate" or 
            "SqlExecuteTypeAttribute" or "SqlExecuteType";

        private static bool HasSqlxAttributeSyntax(MethodDeclarationSyntax methodDeclaration) =>
            methodDeclaration.AttributeLists.Any(attrList =>
                attrList.Attributes.Any(attr => IsSqlxAttributeName(attr.Name.ToString())));

        private static bool HasRepositoryForAttributeSyntax(ClassDeclarationSyntax classDeclaration) =>
            classDeclaration.AttributeLists.Any(attrList =>
                attrList.Attributes.Any(attr => IsRepositoryForAttributeName(attr.Name.ToString())));

        private static bool HasRepositoryForAttribute(INamedTypeSymbol type) =>
            type.GetAttributes().Any(attr => IsRepositoryForAttributeName(attr.AttributeClass?.Name));

        private static bool IsRepositoryForAttributeName(string? name) => name is 
            "RepositoryForAttribute" or "RepositoryFor";
    }
}


