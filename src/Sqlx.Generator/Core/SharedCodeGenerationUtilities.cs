// -----------------------------------------------------------------------
// <copyright file="SharedCodeGenerationUtilities.cs" company="Cricle">
// Copyright (c) Cricle. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

using Microsoft.CodeAnalysis;
using System.Collections.Concurrent;
using System.Linq;

namespace Sqlx.Generator;

/// <summary>
/// Shared code generation utilities to reduce code duplication
/// </summary>
public static class SharedCodeGenerationUtilities
{
    // 缓存ToDisplayString()结果以提升性能
    private static readonly ConcurrentDictionary<ISymbol, string> _displayStringCache =
        new(SymbolEqualityComparer.Default);

    // 缓存类型检查结果，避免重复的类型分析
    private static readonly ConcurrentDictionary<ITypeSymbol, bool> _isScalarTypeCache =
        new(SymbolEqualityComparer.Default);

    // 缓存属性的SQL名称
    private static readonly ConcurrentDictionary<IPropertySymbol, string> _sqlNameCache =
        new(SymbolEqualityComparer.Default);

    /// <summary>获取符号的显示字符串，使用缓存提升性能</summary>
    public static string GetCachedDisplayString(this ISymbol symbol) =>
        _displayStringCache.GetOrAdd(symbol, s => s.ToDisplayString());

    /// <summary>缓存版本的标量类型检查</summary>
    public static bool IsCachedScalarType(this ITypeSymbol type) =>
        _isScalarTypeCache.GetOrAdd(type, t => t.IsScalarType());

    /// <summary>缓存版本的SQL名称获取</summary>
    public static string GetCachedSqlName(this IPropertySymbol property) =>
        _sqlNameCache.GetOrAdd(property, p => p.GetSqlName());
    /// <summary>Extract inner type from Task&lt;T&gt; type strings</summary>
    public static string ExtractInnerTypeFromTask(string taskType) => taskType switch
    {
        var t when t.StartsWith("Task<") && t.EndsWith(">") => t.Substring(5, t.Length - 6),
        var t when t.StartsWith("System.Threading.Tasks.Task<") && t.EndsWith(">") => t.Substring(28, t.Length - 29),
        _ => taskType // 对于非Task类型，返回原始类型而不是"object"
    };

    /// <summary>Escape SQL string for C# string literal</summary>
    public static string EscapeSqlForCSharp(string? sql)
    {
        if (string.IsNullOrEmpty(sql)) return string.Empty;

        // 性能优化：单次检查避免不必要的操作
        var hasEscapeChars = sql.IndexOfAny(new[] { '"', '\r', '\n' }) >= 0;
        if (!hasEscapeChars) return sql;

        return sql.Replace("\"", "\\\"").Replace("\r\n", "\\r\\n").Replace("\n", "\\n").Replace("\r", "\\r");
    }

    /// <summary>
    /// Generate standard file header
    /// </summary>
    public static void GenerateFileHeader(IndentedStringBuilder sb, string namespaceName)
    {
        sb.AppendLine("// <auto-generated>");
        sb.AppendLine("#nullable disable");
        sb.AppendLine("#pragma warning disable");
        sb.AppendLine("// </auto-generated>");
        sb.AppendLine();
        sb.AppendLine($"namespace {namespaceName};");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Data;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine();
    }

    /// <summary>
    /// Generate command creation and parameter binding
    /// </summary>
    public static void GenerateCommandSetup(IndentedStringBuilder sb, string sql, IMethodSymbol method, string connectionName)
    {
        sb.AppendLine($"__cmd__ = {connectionName}.CreateCommand();");

        // Properly escape SQL string for C# code generation
        var escapedSql = sql.Replace("\"", "\"\"").Replace("\r\n", "\\r\\n").Replace("\n", "\\n").Replace("\t", "\\t");
        sb.AppendLine($"__cmd__.CommandText = @\"{escapedSql}\";");
        sb.AppendLine();

        // Generate parameter binding
        foreach (var param in method.Parameters.Where(p => p.Type.Name != "CancellationToken"))
        {
            var paramName = $"@{param.Name}";
            sb.AppendLine($"var param_{param.Name} = __cmd__.CreateParameter();")
              .AppendLine($"param_{param.Name}.ParameterName = \"{paramName}\";")
              .AppendLine($"param_{param.Name}.Value = {param.Name};")
              .AppendLine($"param_{param.Name}.DbType = {GetDbType(param.Type)};")
              .AppendLine($"__cmd__.Parameters.Add(param_{param.Name});")
              .AppendLine();
        }
    }

    /// <summary>
    /// Get DbType
    /// </summary>
    public static string GetDbType(ITypeSymbol type)
    {
        return type.SpecialType switch
        {
            SpecialType.System_String => "global::System.Data.DbType.String",
            SpecialType.System_Int32 => "global::System.Data.DbType.Int32",
            SpecialType.System_Int64 => "global::System.Data.DbType.Int64",
            SpecialType.System_Boolean => "global::System.Data.DbType.Boolean",
            SpecialType.System_DateTime => "global::System.Data.DbType.DateTime",
            SpecialType.System_Decimal => "global::System.Data.DbType.Decimal",
            SpecialType.System_Double => "global::System.Data.DbType.Double",
            _ => "global::System.Data.DbType.Object"
        };
    }

    /// <summary>
    /// Generate entity property mapping
    /// </summary>
    public static void GenerateEntityMapping(IndentedStringBuilder sb, INamedTypeSymbol entityType, string variableName)
    {
        // Remove nullable annotation - 使用缓存版本提升性能
        var entityTypeName = entityType.GetCachedDisplayString();
        if (entityTypeName.EndsWith("?"))
        {
            entityTypeName = entityTypeName.TrimEnd('?');
        }

        // 性能优化：避免不必要的ToList()调用，直接遍历
        // 支持 set 和 init 属性
        var properties = entityType.GetMembers().OfType<IPropertySymbol>()
            .Where(p => p.CanBeReferencedByName && p.SetMethod != null)
            .ToArray();

        if (properties.Length == 0)
        {
            // No properties to map, just create empty object
            if (variableName == "__result__")
            {
                sb.AppendLine($"__result__ = new {entityTypeName}();");
            }
            else
            {
                sb.AppendLine($"var {variableName} = new {entityTypeName}();");
            }
            return;
        }

        // Use object initializer syntax to support init-only properties
        if (variableName == "__result__")
        {
            sb.AppendLine($"__result__ = new {entityTypeName}");
        }
        else
        {
            sb.AppendLine($"var {variableName} = new {entityTypeName}");
        }
        
        sb.AppendLine("{");
        sb.PushIndent();

        for (int i = 0; i < properties.Length; i++)
        {
            var prop = properties[i];
            var columnName = ConvertToSnakeCase(prop.Name);
            var readMethod = prop.Type.UnwrapNullableType().GetDataReaderMethod();
            var isNullable = prop.Type.CanBeReferencedByName && prop.Type.NullableAnnotation == Microsoft.CodeAnalysis.NullableAnnotation.Annotated;
            var defaultValue = isNullable ? "null" : GetDefaultValue(prop.Type);

            var valueExpression = string.IsNullOrEmpty(readMethod)
                ? $"({prop.Type.GetCachedDisplayString()})reader[\"{columnName}\"]"  // 使用缓存版本
                : $"reader.{readMethod}(reader.GetOrdinal(\"{columnName}\"))";

            var comma = i < properties.Length - 1 ? "," : "";
            sb.AppendLine($"{prop.Name} = reader.IsDBNull(reader.GetOrdinal(\"{columnName}\")) ? {defaultValue} : {valueExpression}{comma}");
        }

        sb.PopIndent();
        sb.AppendLine("};");
    }

    /// <summary>
    /// Get default value for a type
    /// </summary>
    private static string GetDefaultValue(ITypeSymbol type)
    {
        if (type.NullableAnnotation == Microsoft.CodeAnalysis.NullableAnnotation.Annotated)
            return "null";

        return type.SpecialType switch
        {
            SpecialType.System_String => "string.Empty",
            SpecialType.System_Boolean => "false",
            SpecialType.System_Int32 => "0",
            SpecialType.System_Int64 => "0L",
            SpecialType.System_Decimal => "0m",
            SpecialType.System_Double => "0.0",
            SpecialType.System_Single => "0f",
            _ => $"default({type.GetCachedDisplayString()})"  // 使用缓存版本
        };
    }

    /// <summary>Convert C# property names to snake_case database column names</summary>
    public static string ConvertToSnakeCase(string name)
    {
        if (string.IsNullOrEmpty(name)) return name;
        if (name.Contains("_")) return name.ToLowerInvariant();

        // 性能优化：预计算容量更精确，避免重分配
        var result = new System.Text.StringBuilder(name.Length + (name.Length >> 2));
        for (int i = 0; i < name.Length; i++)
        {
            char current = name[i];
            if (char.IsUpper(current))
            {
                if (i > 0 && !char.IsUpper(name[i - 1])) result.Append('_');
                result.Append(char.ToLowerInvariant(current));
            }
            else
            {
                result.Append(current);
            }
        }
        return result.ToString();
    }
}
