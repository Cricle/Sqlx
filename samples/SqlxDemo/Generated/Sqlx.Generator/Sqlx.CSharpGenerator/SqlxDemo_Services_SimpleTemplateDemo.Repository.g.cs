// <auto-generated>
#nullable disable
#pragma warning disable
// </auto-generated>

namespace SqlxDemo.Services;

using System;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;

using System.Linq;
using System.Threading;
using Sqlx.Annotations;

partial class SimpleTemplateDemo
{
    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{where:id}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM simple_template_demo WHERE id = @id</code>
    /// <para>🔧 Template Parameters:</para>
    /// <para>  • @id</para>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:id&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="id">The id parameter.</param>
    /// <returns>A task containing the User result.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{where:id}}")]
    public System.Threading.Tasks.Task<SqlxDemo.Models.User?> GetUserByIdAsync(int id)
    {
        SqlxDemo.Models.User? __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM simple_template_demo WHERE id = @id";

        var param_id = __cmd__.CreateParameter();
        param_id.ParameterName = "@id";
        param_id.Value = id;
        param_id.DbType = global::System.Data.DbType.Int32;
        __cmd__.Parameters.Add(param_id);

        try
        {
            OnExecuting("GetUserByIdAsync", __cmd__);

            using var reader = __cmd__.ExecuteReader();
            if (reader.Read())
            {
            }
            else
            {
                __result__ = default;
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUserByIdAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUserByIdAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto|exclude=Password}} FROM {{table}} WHERE {{where:id}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM simple_template_demo WHERE id = @id</code>
    /// <para>🔧 Template Parameters:</para>
    /// <para>  • @id</para>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:id&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="id">The id parameter.</param>
    /// <returns>A task containing the User result.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto|exclude=Password}} FROM {{table}} WHERE {{where:id}}")]
    public System.Threading.Tasks.Task<SqlxDemo.Models.User?> GetUserSafelyAsync(int id)
    {
        SqlxDemo.Models.User? __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM simple_template_demo WHERE id = @id";

        var param_id = __cmd__.CreateParameter();
        param_id.ParameterName = "@id";
        param_id.Value = id;
        param_id.DbType = global::System.Data.DbType.Int32;
        __cmd__.Parameters.Add(param_id);

        try
        {
            OnExecuting("GetUserSafelyAsync", __cmd__);

            using var reader = __cmd__.ExecuteReader();
            if (reader.Read())
            {
            }
            else
            {
                __result__ = default;
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUserSafelyAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUserSafelyAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} {{orderby:id}} {{limit:sqlite|default=20}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM simple_template_demo ORDER BY id ASC LIMIT 20</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:id&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:sqlite&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} {{orderby:id}} {{limit:sqlite|default=20}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersPagedAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM simple_template_demo ORDER BY id ASC LIMIT 20";

        try
        {
            OnExecuting("GetUsersPagedAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersPagedAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersPagedAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{where:auto}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM simple_template_demo WHERE name = @name</code>
    /// <para>🔧 Template Parameters:</para>
    /// <para>  • @name</para>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="name">The name parameter.</param>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{where:auto}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersByNameAsync(string name)
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM simple_template_demo WHERE name = @name";

        var param_name = __cmd__.CreateParameter();
        param_name.ParameterName = "@name";
        param_name.Value = name;
        param_name.DbType = global::System.Data.DbType.String;
        __cmd__.Parameters.Add(param_name);

        try
        {
            OnExecuting("GetUsersByNameAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersByNameAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersByNameAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Creates a new entity in the database.
    /// <para>📝 Original Template:</para>
    /// <code>INSERT INTO {{table}} ({{columns:auto|exclude=Id}}) VALUES ({{values:auto}})</code>
    /// <para>❌ Template Errors:</para>
    /// <para>  • Template contains potential SQL injection patterns</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="name">The name parameter.</param>
    /// <param name="email">The email parameter.</param>
    /// <param name="age">The age parameter.</param>
    /// <returns>A task containing the number of affected rows.</returns>
    [global::Sqlx.Annotations.Sqlx("INSERT INTO {{table}} ({{columns:auto|exclude=Id}}) VALUES ({{values:auto}})")]
    public System.Threading.Tasks.Task<int> CreateUserAsync(string name, string email, int age)
    {
        int __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"";

        var param_name = __cmd__.CreateParameter();
        param_name.ParameterName = "@name";
        param_name.Value = name;
        param_name.DbType = global::System.Data.DbType.String;
        __cmd__.Parameters.Add(param_name);

        var param_email = __cmd__.CreateParameter();
        param_email.ParameterName = "@email";
        param_email.Value = email;
        param_email.DbType = global::System.Data.DbType.String;
        __cmd__.Parameters.Add(param_email);

        var param_age = __cmd__.CreateParameter();
        param_age.ParameterName = "@age";
        param_age.Value = age;
        param_age.DbType = global::System.Data.DbType.Int32;
        __cmd__.Parameters.Add(param_age);

        try
        {
            OnExecuting("CreateUserAsync", __cmd__);

            var scalarResult = __cmd__.ExecuteScalar();
            __result__ = scalarResult != null ? (int)scalarResult : default(int);

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("CreateUserAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("CreateUserAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Updates an existing entity in the database.
    /// <para>📝 Original Template:</para>
    /// <code>UPDATE {{table}} SET {{set:auto|exclude=Id,HireDate}} WHERE {{where:id}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>UPDATE simple_template_demo SET name = @name, email = @email WHERE id = @id</code>
    /// <para>🔧 Template Parameters:</para>
    /// <para>  • @name</para>
    /// <para>  • @email</para>
    /// <para>  • @id</para>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:id&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="id">The id parameter.</param>
    /// <param name="name">The name parameter.</param>
    /// <param name="email">The email parameter.</param>
    /// <returns>A task containing the number of affected rows.</returns>
    [global::Sqlx.Annotations.Sqlx("UPDATE {{table}} SET {{set:auto|exclude=Id,HireDate}} WHERE {{where:id}}")]
    public System.Threading.Tasks.Task<int> UpdateUserAsync(int id, string name, string email)
    {
        int __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"UPDATE simple_template_demo SET name = @name, email = @email WHERE id = @id";

        var param_id = __cmd__.CreateParameter();
        param_id.ParameterName = "@id";
        param_id.Value = id;
        param_id.DbType = global::System.Data.DbType.Int32;
        __cmd__.Parameters.Add(param_id);

        var param_name = __cmd__.CreateParameter();
        param_name.ParameterName = "@name";
        param_name.Value = name;
        param_name.DbType = global::System.Data.DbType.String;
        __cmd__.Parameters.Add(param_name);

        var param_email = __cmd__.CreateParameter();
        param_email.ParameterName = "@email";
        param_email.Value = email;
        param_email.DbType = global::System.Data.DbType.String;
        __cmd__.Parameters.Add(param_email);

        try
        {
            OnExecuting("UpdateUserAsync", __cmd__);

            var scalarResult = __cmd__.ExecuteScalar();
            __result__ = scalarResult != null ? (int)scalarResult : default(int);

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("UpdateUserAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("UpdateUserAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Deletes an entity from the database.
    /// <para>📝 Original Template:</para>
    /// <code>UPDATE {{table}} SET is_active = 0 WHERE {{where:id}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>UPDATE simple_template_demo SET is_active = 0 WHERE id = @id</code>
    /// <para>🔧 Template Parameters:</para>
    /// <para>  • @id</para>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:id&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="id">The id parameter.</param>
    /// <returns>A task containing the number of affected rows.</returns>
    [global::Sqlx.Annotations.Sqlx("UPDATE {{table}} SET is_active = 0 WHERE {{where:id}}")]
    public System.Threading.Tasks.Task<int> SoftDeleteUserAsync(int id)
    {
        int __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"UPDATE simple_template_demo SET is_active = 0 WHERE id = @id";

        var param_id = __cmd__.CreateParameter();
        param_id.ParameterName = "@id";
        param_id.Value = id;
        param_id.DbType = global::System.Data.DbType.Int32;
        __cmd__.Parameters.Add(param_id);

        try
        {
            OnExecuting("SoftDeleteUserAsync", __cmd__);

            var scalarResult = __cmd__.ExecuteScalar();
            __result__ = scalarResult != null ? (int)scalarResult : default(int);

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("SoftDeleteUserAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("SoftDeleteUserAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto|exclude=Password}} FROM {{table}} WHERE is_active = 1 {{orderby:name}} {{limit:sqlite|default=10}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM simple_template_demo WHERE is_active = 1 ORDER BY name ASC LIMIT 20</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:name&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:sqlite&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto|exclude=Password}} FROM {{table}} WHERE is_active = 1 {{orderby:name}} {{limit:sqlite|default=10}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetTopUsersAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM simple_template_demo WHERE is_active = 1 ORDER BY name ASC LIMIT 20";

        try
        {
            OnExecuting("GetTopUsersAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetTopUsersAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetTopUsersAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Called before executing a repository operation.
    /// </summary>
    /// <param name="operationName">The name of the operation being executed.</param>
    /// <param name="command">The database command to be executed.</param>
    partial void OnExecuting(string operationName, global::System.Data.IDbCommand command);

    /// <summary>
    /// Called after successfully executing a repository operation.
    /// </summary>
    /// <param name="operationName">The name of the operation that was executed.</param>
    /// <param name="command">The database command that was executed.</param>
    /// <param name="result">The result of the operation.</param>
    /// <param name="elapsedTicks">The elapsed time in ticks.</param>
    partial void OnExecuted(string operationName, global::System.Data.IDbCommand command, object? result, long elapsedTicks);

    /// <summary>
    /// Called when a repository operation fails with an exception.
    /// </summary>
    /// <param name="operationName">The name of the operation that failed.</param>
    /// <param name="command">The database command that failed.</param>
    /// <param name="exception">The exception that occurred.</param>
    /// <param name="elapsedTicks">The elapsed time in ticks before failure.</param>
    partial void OnExecuteFail(string operationName, global::System.Data.IDbCommand command, global::System.Exception exception, long elapsedTicks);

}