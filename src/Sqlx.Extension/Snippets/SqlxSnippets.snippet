<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  
  <!-- Sqlx Repository Template -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>sqlx-repo</Title>
      <Shortcut>sqlx-repo</Shortcut>
      <Description>Create a Sqlx repository interface and implementation</Description>
      <Author>Sqlx Team</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>EntityName</ID>
          <ToolTip>Entity name (e.g. User, Product)</ToolTip>
          <Default>Entity</Default>
        </Literal>
        <Literal>
          <ID>DbType</ID>
          <ToolTip>Database type</ToolTip>
          <Default>SQLite</Default>
        </Literal>
        <Literal>
          <ID>KeyType</ID>
          <ToolTip>Primary key type</ToolTip>
          <Default>long</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[using Sqlx;
using Sqlx.Annotations;
using System.Data.Common;

[SqlDefine(SqlDefineTypes.$DbType$)]
[RepositoryFor(typeof($EntityName$))]
public interface I$EntityName$Repository : ICrudRepository<$EntityName$, $KeyType$>
{
    $end$
}

public partial class $EntityName$Repository(DbConnection connection) : I$EntityName$Repository
{
}]]></Code>
    </Snippet>
  </CodeSnippet>

  <!-- Sqlx Select Method -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>sqlx-select</Title>
      <Shortcut>sqlx-select</Shortcut>
      <Description>Create a SELECT query method</Description>
      <Author>Sqlx Team</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>MethodName</ID>
          <ToolTip>Method name</ToolTip>
          <Default>Get</Default>
        </Literal>
        <Literal>
          <ID>EntityName</ID>
          <ToolTip>Entity type</ToolTip>
          <Default>Entity</Default>
        </Literal>
        <Literal>
          <ID>ParamName</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>id</Default>
        </Literal>
        <Literal>
          <ID>ParamType</ID>
          <ToolTip>Parameter type</ToolTip>
          <Default>long</Default>
        </Literal>
        <Literal>
          <ID>ReturnMultiple</ID>
          <ToolTip>Return List? (true/false)</ToolTip>
          <Default>false</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[[SqlTemplate("SELECT {{columns}} FROM {{table}} WHERE $ParamName$ = @$ParamName$")]
Task<$EntityName$?> $MethodName$Async($ParamType$ $ParamName$, CancellationToken ct = default);$end$]]></Code>
    </Snippet>
  </CodeSnippet>

  <!-- Sqlx Select List Method -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>sqlx-select-list</Title>
      <Shortcut>sqlx-select-list</Shortcut>
      <Description>Create a SELECT query method that returns a list</Description>
      <Author>Sqlx Team</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>MethodName</ID>
          <ToolTip>Method name</ToolTip>
          <Default>GetAll</Default>
        </Literal>
        <Literal>
          <ID>EntityName</ID>
          <ToolTip>Entity type</ToolTip>
          <Default>Entity</Default>
        </Literal>
        <Literal>
          <ID>WhereClause</ID>
          <ToolTip>WHERE clause (optional, can be empty)</ToolTip>
          <Default></Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[[SqlTemplate("SELECT {{columns}} FROM {{table}}$WhereClause$ {{orderby id}} {{limit}} {{offset}}")]
Task<List<$EntityName$>> $MethodName$Async(int? limit = null, int? offset = null, CancellationToken ct = default);$end$]]></Code>
    </Snippet>
  </CodeSnippet>

  <!-- Sqlx Insert Method -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>sqlx-insert</Title>
      <Shortcut>sqlx-insert</Shortcut>
      <Description>Create an INSERT method with returned ID</Description>
      <Author>Sqlx Team</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>EntityName</ID>
          <ToolTip>Entity type</ToolTip>
          <Default>Entity</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[[SqlTemplate("INSERT INTO {{table}} {{columns}} VALUES {{values}}")]
[ReturnInsertedId]
Task<long> InsertAsync($EntityName$ entity, CancellationToken ct = default);$end$]]></Code>
    </Snippet>
  </CodeSnippet>

  <!-- Sqlx Update Method -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>sqlx-update</Title>
      <Shortcut>sqlx-update</Shortcut>
      <Description>Create an UPDATE method</Description>
      <Author>Sqlx Team</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>EntityName</ID>
          <ToolTip>Entity type</ToolTip>
          <Default>Entity</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[[SqlTemplate("UPDATE {{table}} {{set}} WHERE id = @id")]
Task<int> UpdateAsync($EntityName$ entity, CancellationToken ct = default);$end$]]></Code>
    </Snippet>
  </CodeSnippet>

  <!-- Sqlx Delete Method -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>sqlx-delete</Title>
      <Shortcut>sqlx-delete</Shortcut>
      <Description>Create a DELETE method</Description>
      <Author>Sqlx Team</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>KeyType</ID>
          <ToolTip>Primary key type</ToolTip>
          <Default>long</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[[SqlTemplate("DELETE FROM {{table}} WHERE id = @id")]
Task<int> DeleteAsync($KeyType$ id, CancellationToken ct = default);$end$]]></Code>
    </Snippet>
  </CodeSnippet>

  <!-- Sqlx Batch Insert Method -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>sqlx-batch</Title>
      <Shortcut>sqlx-batch</Shortcut>
      <Description>Create a batch insert method</Description>
      <Author>Sqlx Team</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>EntityName</ID>
          <ToolTip>Entity type</ToolTip>
          <Default>Entity</Default>
        </Literal>
        <Literal>
          <ID>BatchSize</ID>
          <ToolTip>Max batch size</ToolTip>
          <Default>500</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[[SqlTemplate("INSERT INTO {{table}} {{columns}} VALUES {{batch_values}}")]
[BatchOperation(MaxBatchSize = $BatchSize$)]
Task<int> BatchInsertAsync(IEnumerable<$EntityName$> entities, CancellationToken ct = default);$end$]]></Code>
    </Snippet>
  </CodeSnippet>

  <!-- Sqlx Expression Query Method -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>sqlx-expr</Title>
      <Shortcut>sqlx-expr</Shortcut>
      <Description>Create a query method using expression tree</Description>
      <Author>Sqlx Team</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>MethodName</ID>
          <ToolTip>Method name</ToolTip>
          <Default>Query</Default>
        </Literal>
        <Literal>
          <ID>EntityName</ID>
          <ToolTip>Entity type</ToolTip>
          <Default>Entity</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[[SqlTemplate("SELECT {{columns}} FROM {{table}} {{where}}")]
Task<List<$EntityName$>> $MethodName$Async(
    [ExpressionToSql] Expression<Func<$EntityName$, bool>> predicate,
    CancellationToken ct = default);$end$]]></Code>
    </Snippet>
  </CodeSnippet>

  <!-- Sqlx Entity Class -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>sqlx-entity</Title>
      <Shortcut>sqlx-entity</Shortcut>
      <Description>Create a Sqlx entity class</Description>
      <Author>Sqlx Team</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>EntityName</ID>
          <ToolTip>Entity name</ToolTip>
          <Default>Entity</Default>
        </Literal>
        <Literal>
          <ID>TableName</ID>
          <ToolTip>Table name (lowercase, plural)</ToolTip>
          <Default>entities</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[using Sqlx.Annotations;

[TableName("$TableName$")]
public class $EntityName$
{
    public long Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; }
    public DateTime? UpdatedAt { get; set; }
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>

  <!-- Sqlx Count Method -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>sqlx-count</Title>
      <Shortcut>sqlx-count</Shortcut>
      <Description>Create a COUNT query method</Description>
      <Author>Sqlx Team</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>WhereClause</ID>
          <ToolTip>WHERE clause (optional)</ToolTip>
          <Default></Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[[SqlTemplate("SELECT COUNT(*) FROM {{table}}$WhereClause$")]
Task<long> CountAsync(CancellationToken ct = default);$end$]]></Code>
    </Snippet>
  </CodeSnippet>

  <!-- Sqlx Exists Method -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>sqlx-exists</Title>
      <Shortcut>sqlx-exists</Shortcut>
      <Description>Create an EXISTS check method</Description>
      <Author>Sqlx Team</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>KeyType</ID>
          <ToolTip>Primary key type</ToolTip>
          <Default>long</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[[SqlTemplate("SELECT COUNT(1) FROM {{table}} WHERE id = @id")]
Task<bool> ExistsAsync($KeyType$ id, CancellationToken ct = default);$end$]]></Code>
    </Snippet>
  </CodeSnippet>

</CodeSnippets>

