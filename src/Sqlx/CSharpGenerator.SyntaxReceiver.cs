// -----------------------------------------------------------------------
// <auto-generated/>
// -----------------------------------------------------------------------

namespace Sqlx;

using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

public partial class CSharpGenerator
{
    /// <summary>
    /// C# specific syntax receiver for collecting method symbols and repository classes.
    /// </summary>
    private class CSharpSyntaxReceiver : ISqlxSyntaxReceiver
    {
        public List<IMethodSymbol> Methods { get; } = new List<IMethodSymbol>();
        public List<INamedTypeSymbol> RepositoryClasses { get; } = new List<INamedTypeSymbol>();

        public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
        {
            if (context.Node is MethodDeclarationSyntax methodDeclaration)
            {
                var methodSymbol = context.SemanticModel.GetDeclaredSymbol(methodDeclaration) as IMethodSymbol;
                if (methodSymbol != null && HasSqlxAttribute(methodSymbol))
                {
                    Methods.Add(methodSymbol);
                }
            }
            else if (context.Node is ClassDeclarationSyntax classDeclaration)
            {
                var classSymbol = context.SemanticModel.GetDeclaredSymbol(classDeclaration) as INamedTypeSymbol;
                if (classSymbol != null)
                {
                    #if DEBUG
                    System.Diagnostics.Debug.WriteLine($"Found class: {classSymbol.Name}");
                    #endif
                    if (HasRepositoryForAttribute(classSymbol))
                    {
                        #if DEBUG
                        System.Diagnostics.Debug.WriteLine($"Adding repository class: {classSymbol.Name}");
                        #endif
                        RepositoryClasses.Add(classSymbol);
                    }
                }
            }
        }

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            // Legacy method - not used in modern Roslyn
        }

        private static bool HasSqlxAttribute(IMethodSymbol method)
        {
            return method.GetAttributes().Any(attr =>
                attr.AttributeClass?.Name == "SqlxAttribute" ||
                attr.AttributeClass?.Name == "RawSqlAttribute" ||
                attr.AttributeClass?.Name == "SqlExecuteTypeAttribute");
        }

        private static bool HasRepositoryForAttribute(INamedTypeSymbol type)
        {
            var attributes = type.GetAttributes();
            #if DEBUG
            System.Diagnostics.Debug.WriteLine($"Class {type.Name} has {attributes.Length} attributes:");
            foreach (var attr in attributes)
            {
                System.Diagnostics.Debug.WriteLine($"  - {attr.AttributeClass?.Name} ({attr.AttributeClass?.ToDisplayString()})");
            }
            #endif

            var hasAttr = attributes.Any(attr => attr.AttributeClass?.Name == "RepositoryForAttribute" || attr.AttributeClass?.Name == "RepositoryFor");
            #if DEBUG
            System.Diagnostics.Debug.WriteLine(hasAttr
                ? $"Found RepositoryFor attribute on {type.Name}"
                : $"No RepositoryFor attribute found on {type.Name}");
            #endif
            return hasAttr;
        }
    }
}


