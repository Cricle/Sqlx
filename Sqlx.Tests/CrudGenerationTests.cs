// -----------------------------------------------------------------------
// <copyright file="CrudGenerationTests.cs" company="Cricle">
// Copyright (c) Cricle. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

namespace Sqlx.Tests;

using Microsoft.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;

[TestClass]
public class CrudGenerationTests : CodeGenerationTestBase
{
    [TestMethod]
    public void FindAll_IList_Sync()
    {
        string source = @"
#nullable enable
namespace Foo
{
    class TestEntity
    {
        public int Id { get; set; }

        public string Name { get; set; }
    }
    
    [Repository(typeof(TestEntity))]
    partial class C
    {
        private DbConnection connection;

        public partial IList<TestEntity> FindAll();
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Collections.Generic;
    using System.Data.Common;
    using System.Linq;

    partial class C
    {
        public partial IList<Foo.TestEntity> FindAll()
        {
            var connection = this.connection;
            if(connection.State != global::System.Data.ConnectionState.Open)
            {
                connection.Open();
            }
            using var command = connection.CreateCommand();
            var sqlQuery = @""SELECT id, name FROM test_entity"";
            command.CommandText = sqlQuery;
            using global::System.Data.Common.DbDataReader reader = command.ExecuteReader();
            var __result = new List<TestEntity>();
            while (reader.Read())
            {
                var item = new TestEntity();
                item.Id = reader.GetInt32(0);
                item.Name = reader.GetString(1);
                __result.Add(item);
            }

            reader.Close();
            return __result;
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void FindById_IList_Sync()
    {
        string source = @"
#nullable enable
namespace Foo
{
    class TestEntity
    {
        public int Id { get; set; }

        public string Name { get; set; }
    }
    
    [Repository(typeof(TestEntity))]
    partial class C
    {
        private DbConnection connection;

        public partial TestEntity? FindById(int id);
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Collections.Generic;
    using System.Data.Common;
    using System.Linq;

    partial class C
    {
        public partial Foo.TestEntity? FindById(int id)
        {
            var connection = this.connection;
            if(connection.State != global::System.Data.ConnectionState.Open)
            {
                connection.Open();
            }
            using var command = connection.CreateCommand();
            var sqlQuery = @""SELECT id, name FROM test_entity WHERE id = @id"";
            command.CommandText = sqlQuery;
            using global::System.Data.Common.DbDataReader reader = command.ExecuteReader(global::System.Data.CommandBehavior.SingleResult | global::System.Data.CommandBehavior.SingleRow);
            if (!reader.Read())
            {
                return default;
            }

            var __result = new TestEntity();
            __result.Id = reader.GetInt32(0);
            __result.Name = reader.GetString(1);
            reader.Close();
            return __result;
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void Count_int_Sync()
    {
        string source = @"
#nullable enable
namespace Foo
{
    class TestEntity
    {
        public int Id { get; set; }

        public string Name { get; set; }
    }
    
    [Repository(typeof(TestEntity))]
    partial class C
    {
        private DbConnection connection;

        public partial int Count();
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Collections.Generic;
    using System.Data.Common;
    using System.Linq;

    partial class C
    {
        public partial int Count()
        {
            var connection = this.connection;
            if(connection.State != global::System.Data.ConnectionState.Open)
            {
                connection.Open();
            }
            using var command = connection.CreateCommand();
            var sqlQuery = @""SELECT COUNT(1) FROM test_entity"";
            command.CommandText = sqlQuery;
            var __result = command.ExecuteScalar();
            return (int)__result!;
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void DeleteAll_IList_Sync()
    {
        string source = @"
#nullable enable
namespace Foo
{
    class TestEntity
    {
        public int Id { get; set; }

        public string Name { get; set; }
    }
    
    [Repository(typeof(TestEntity))]
    partial class C
    {
        private DbConnection connection;

        public partial void DeleteAll();
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Collections.Generic;
    using System.Data.Common;
    using System.Linq;

    partial class C
    {
        public partial void DeleteAll()
        {
            var connection = this.connection;
            if(connection.State != global::System.Data.ConnectionState.Open)
            {
                connection.Open();
            }
            using var command = connection.CreateCommand();
            var sqlQuery = @""DELETE FROM test_entity"";
            command.CommandText = sqlQuery;
            command.ExecuteNonQuery();
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void DeleteById_IList_Sync()
    {
        string source = @"
#nullable enable
namespace Foo
{
    class TestEntity
    {
        public int Id { get; set; }

        public string Name { get; set; }
    }
    
    [Repository(typeof(TestEntity))]
    partial class C
    {
        private DbConnection connection;

        public partial void DeleteById(int id);
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Collections.Generic;
    using System.Data.Common;
    using System.Linq;

    partial class C
    {
        public partial void DeleteById(int id)
        {
            var connection = this.connection;
            if(connection.State != global::System.Data.ConnectionState.Open)
            {
                connection.Open();
            }
            using var command = connection.CreateCommand();
            var sqlQuery = @""DELETE FROM test_entity WHERE id = @id"";
            command.CommandText = sqlQuery;
            command.ExecuteNonQuery();
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void Update_void_Sync()
    {
        string source = @"
#nullable enable
namespace Foo
{
    class TestEntity
    {
        public int Id { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }
    }
    
    [Repository(typeof(TestEntity))]
    partial class C
    {
        private DbConnection connection;

        public partial void Update(int id, string name, string description);
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Collections.Generic;
    using System.Data.Common;
    using System.Linq;

    partial class C
    {
        public partial void Update(int id, string name, string description)
        {
            var connection = this.connection;
            if(connection.State != global::System.Data.ConnectionState.Open)
            {
                connection.Open();
            }
            using var command = connection.CreateCommand();
            var sqlQuery = @""UPDATE test_entity SET name = @name, description = @description WHERE id = @id"";
            command.CommandText = sqlQuery;
            command.ExecuteNonQuery();
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void Update_void_Sync_WithOverride()
    {
        string source = @"
#nullable enable
using System.ComponentModel.DataAnnotations.Schema;

namespace Foo
{
    [TableAttribute(""TestEntity"")]
    class TestEntity
    {
        [ColumnAttribute(""Id"")]
        public int Id { get; set; }

        [ColumnAttribute(""Name"")]
        public string Name { get; set; }

        [ColumnAttribute(""Description"")]
        public string Description { get; set; }
    }
    
    [Repository(typeof(TestEntity))]
    partial class C
    {
        private DbConnection connection;

        public partial void Update(int id, string name, string description);
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Collections.Generic;
    using System.Data.Common;
    using System.Linq;

    partial class C
    {
        public partial void Update(int id, string name, string description)
        {
            var connection = this.connection;
            if(connection.State != global::System.Data.ConnectionState.Open)
            {
                connection.Open();
            }
            using var command = connection.CreateCommand();
            var sqlQuery = @""UPDATE TestEntity SET Name = @name, Description = @description WHERE Id = @id"";
            command.CommandText = sqlQuery;
            command.ExecuteNonQuery();
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void Insert_void_Sync()
    {
        string source = @"
#nullable enable
namespace Foo
{
    class TestEntity
    {
        public int Id { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }
    }
    
    [Repository(typeof(TestEntity))]
    partial class C
    {
        private DbConnection connection;

        public partial void Insert(int id, string name, string description);
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Collections.Generic;
    using System.Data.Common;
    using System.Linq;

    partial class C
    {
        public partial void Insert(int id, string name, string description)
        {
            var connection = this.connection;
            if(connection.State != global::System.Data.ConnectionState.Open)
            {
                connection.Open();
            }
            using var command = connection.CreateCommand();
            var sqlQuery = @""INSERT INTO test_entity(id, name, description) VALUES (@id, @name, @description)"";
            command.CommandText = sqlQuery;
            command.ExecuteNonQuery();
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }
}
