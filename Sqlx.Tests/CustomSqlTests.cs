// -----------------------------------------------------------------------
// <copyright file="CustomSqlTests.cs" company="Andrii Kurdiumov">
// Copyright (c) Andrii Kurdiumov. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

namespace Sqlx.Tests;

using Microsoft.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;

[TestClass]
public class CustomSqlTests : CodeGenerationTestBase
{
    [TestMethod]
    public void ScalarResult()
    {
        string source = @"
namespace Foo
{
    class C
    {
        private DbConnection connection;

        [Sqlx]
        public partial int M([RawSql]string sql, int clientId, string? personId);
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Collections.Generic;
    using System.Data.Common;
    using System.Linq;

    partial class C
    {
        public partial int M(string sql, int clientId, string? personId)
        {
            var connection = this.connection;
            if(connection.State != global::System.Data.ConnectionState.Open)
            {
                connection.Open();
            }
            using var command = connection.CreateCommand();
            command.CommandText = sql;
            var __result = command.ExecuteScalar();
            return (int)__result!;
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void MapResultSetToProcedure()
    {
        string source = @"
namespace Foo
{
    public class Item
    {
        public string StringValue { get; set; }
        public int Int32Value { get; set; }
        public int? NullableInt32Value { get; set; }
    }

    class C
    {
        private DbConnection connection;

        [Sqlx]
        public partial IList<Item> M([RawSql]string sql)
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Collections.Generic;
    using System.Data.Common;
    using System.Linq;

    partial class C
    {
        public partial IList<Foo.Item> M(string sql)
        {
            var connection = this.connection;
            if(connection.State != global::System.Data.ConnectionState.Open)
            {
                connection.Open();
            }
            using var command = connection.CreateCommand();
            command.CommandText = sql;
            using global::System.Data.Common.DbDataReader reader = command.ExecuteReader();
            var __result = new List<Item>();
            while (reader.Read())
            {
                var item = new Item();
                item.StringValue = reader.GetString(0);
                item.Int32Value = reader.GetInt32(1);
                item.NullableInt32Value = reader.GetInt32(2);
                __result.Add(item);
            }

            reader.Close();
            return __result;
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }
}
