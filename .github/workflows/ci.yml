name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: [ '6.0.x', '8.0.x' ]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
    
    - name: Run unit tests
      run: dotnet test tests/Sqlx.Tests --no-build --configuration Release --logger trx --results-directory TestResults --filter "TestCategory!=Integration"
    
    - name: Run integration tests
      run: dotnet test tests/Sqlx.IntegrationTests --no-build --configuration Release --logger trx --results-directory TestResults
    
    - name: Run performance tests
      run: dotnet test tests/Sqlx.PerformanceTests --no-build --configuration Release --logger trx --results-directory TestResults
    
    - name: Run sample tests
      run: dotnet test samples/RepositoryExample.Tests --no-build --configuration Release --logger trx --results-directory TestResults
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.dotnet-version }}
        path: TestResults/*.trx

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
    
    - name: Run code analysis
      run: dotnet build --configuration Release --verbosity normal
    
    # Code coverage can be added here if needed
    # - name: Generate coverage report
    #   run: dotnet test --collect:"XPlat Code Coverage" --results-directory TestResults
    
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     directory: TestResults

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Build performance benchmark
      run: dotnet build samples/PerformanceBenchmark --configuration Release
    
    - name: Run performance benchmark
      run: dotnet run --project samples/PerformanceBenchmark --configuration Release > performance-results.txt
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results.txt

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "✅ All tests passed and code quality checks successful!"
          echo "🎉 Build is ready for deployment"
        else
          echo "❌ Some tests failed or code quality issues detected"
          exit 1
        fi
