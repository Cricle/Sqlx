// <auto-generated>
#nullable disable
#pragma warning disable
// </auto-generated>

namespace SqlxDemo.Services;

using System;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;

using System.Linq;
using System.Threading;
using Sqlx.Annotations;

partial class DemoUserRepository
{
    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{where:id}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM demo_user WHERE id = @id</code>
    /// <para>🔧 Template Parameters:</para>
    /// <para>  • @id</para>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:id&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="id">The id parameter.</param>
    /// <returns>A task containing the User result.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{where:id}}")]
    public System.Threading.Tasks.Task<SqlxDemo.Models.User?> GetUserByIdAsync(int id)
    {
        SqlxDemo.Models.User? __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM demo_user WHERE id = @id";

        var param_id = __cmd__.CreateParameter();
        param_id.ParameterName = "@id";
        param_id.Value = id;
        param_id.DbType = global::System.Data.DbType.Int32;
        __cmd__.Parameters.Add(param_id);

        try
        {
            OnExecuting("GetUserByIdAsync", __cmd__);

            using var reader = __cmd__.ExecuteReader();
            if (reader.Read())
            {
            }
            else
            {
                __result__ = default;
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUserByIdAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUserByIdAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE [is_active] = 1</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM demo_user WHERE [is_active] = 1</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE [is_active] = 1")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetActiveUsersAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM demo_user WHERE [is_active] = 1";

        try
        {
            OnExecuting("GetActiveUsersAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetActiveUsersAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetActiveUsersAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE [age] BETWEEN @minAge AND @maxAge {{orderby:age_desc}} {{limit:medium}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM demo_user WHERE [age] BETWEEN @minAge AND @maxAge ORDER BY [age] DESC TOP 50</code>
    /// <para>🔧 Template Parameters:</para>
    /// <para>  • @minAge</para>
    /// <para>  • @maxAge</para>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:age_desc&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:medium&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="minAge">The minAge parameter.</param>
    /// <param name="maxAge">The maxAge parameter.</param>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE [age] BETWEEN @minAge AND @maxAge {{orderby:age_desc}} {{limit:medium}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersByAgeRangeAsync(int minAge, int maxAge)
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM demo_user WHERE [age] BETWEEN @minAge AND @maxAge ORDER BY [age] DESC TOP 50";

        var param_minAge = __cmd__.CreateParameter();
        param_minAge.ParameterName = "@minAge";
        param_minAge.Value = minAge;
        param_minAge.DbType = global::System.Data.DbType.Int32;
        __cmd__.Parameters.Add(param_minAge);

        var param_maxAge = __cmd__.CreateParameter();
        param_maxAge.ParameterName = "@maxAge";
        param_maxAge.Value = maxAge;
        param_maxAge.DbType = global::System.Data.DbType.Int32;
        __cmd__.Parameters.Add(param_maxAge);

        try
        {
            OnExecuting("GetUsersByAgeRangeAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersByAgeRangeAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersByAgeRangeAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE [is_active] = {{true}} {{orderby:created_desc}} {{limit:page|offset=10}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM demo_user WHERE [is_active] = {{true}} ORDER BY [created] DESC TOP 20</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:created_desc&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:page&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>  • Unknown placeholder &apos;true&apos;. Available: table, columns, values, where, set, orderby, limit, join, groupby, having, select, insert, update, delete, count, sum, avg, max, min, distinct, union, top, offset</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE [is_active] = {{true}} {{orderby:created_desc}} {{limit:page|offset=10}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetActiveUsersPagedAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM demo_user WHERE [is_active] = {{true}} ORDER BY [created] DESC TOP 20";

        try
        {
            OnExecuting("GetActiveUsersPagedAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetActiveUsersPagedAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetActiveUsersPagedAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{count:all}} as UserCount FROM {{table}} WHERE [is_active] = {{true}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT COUNT(*) as UserCount FROM demo_user WHERE [is_active] = {{true}}</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:all&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Unknown placeholder &apos;true&apos;. Available: table, columns, values, where, set, orderby, limit, join, groupby, having, select, insert, update, delete, count, sum, avg, max, min, distinct, union, top, offset</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the number of affected rows.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{count:all}} as UserCount FROM {{table}} WHERE [is_active] = {{true}}")]
    public System.Threading.Tasks.Task<int> GetActiveUserCountAsync()
    {
        int __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT COUNT(*) as UserCount FROM demo_user WHERE [is_active] = {{true}}";

        try
        {
            OnExecuting("GetActiveUserCountAsync", __cmd__);

            var scalarResult = __cmd__.ExecuteScalar();
            __result__ = scalarResult != null ? (int)scalarResult : default(int);

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetActiveUserCountAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetActiveUserCountAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE [is_active] = {{true}} {{orderby:random}} {{limit:small}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM demo_user WHERE [is_active] = {{true}} ORDER BY NEWID() TOP 10</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:random&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:small&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>  • Unknown placeholder &apos;true&apos;. Available: table, columns, values, where, set, orderby, limit, join, groupby, having, select, insert, update, delete, count, sum, avg, max, min, distinct, union, top, offset</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE [is_active] = {{true}} {{orderby:random}} {{limit:small}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetRandomActiveUsersAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM demo_user WHERE [is_active] = {{true}} ORDER BY NEWID() TOP 10";

        try
        {
            OnExecuting("GetRandomActiveUsersAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetRandomActiveUsersAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetRandomActiveUsersAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} {{join:inner|table=department&amp;on=department_id}} WHERE {{today}} &gt;= [hire_date]</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM demo_user INNER JOIN department&amp;on=department_id ON id WHERE CAST(GETDATE() AS DATE) &gt;= [hire_date]</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:inner&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} {{join:inner|table=department&on=department_id}} WHERE {{today}} >= [hire_date]")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetRecentlyHiredUsersWithDepartmentAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM demo_user INNER JOIN department&on=department_id ON id WHERE CAST(GETDATE() AS DATE) >= [hire_date]";

        try
        {
            OnExecuting("GetRecentlyHiredUsersWithDepartmentAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetRecentlyHiredUsersWithDepartmentAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetRecentlyHiredUsersWithDepartmentAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Executes a database operation.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT * FROM [user] WHERE [name] LIKE @namePattern AND [age] &gt; @minAge</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM [user] WHERE [name] LIKE @namePattern AND [age] &gt; @minAge</code>
    /// <para>🔧 Template Parameters:</para>
    /// <para>  • @namePattern</para>
    /// <para>  • @minAge</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="namePattern">The namePattern parameter.</param>
    /// <param name="minAge">The minAge parameter.</param>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.SqlTemplate("SELECT * FROM [user] WHERE [name] LIKE @namePattern AND [age] > @minAge", Dialect = global::Sqlx.Annotations.SqlDefineTypes.SQLite, SafeMode = true)]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> SearchUsersByNameAndAgeAsync(string namePattern, int minAge)
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM [user] WHERE [name] LIKE @namePattern AND [age] > @minAge";

        var param_namePattern = __cmd__.CreateParameter();
        param_namePattern.ParameterName = "@namePattern";
        param_namePattern.Value = namePattern;
        param_namePattern.DbType = global::System.Data.DbType.String;
        __cmd__.Parameters.Add(param_namePattern);

        var param_minAge = __cmd__.CreateParameter();
        param_minAge.ParameterName = "@minAge";
        param_minAge.Value = minAge;
        param_minAge.DbType = global::System.Data.DbType.Int32;
        __cmd__.Parameters.Add(param_minAge);

        try
        {
            OnExecuting("SearchUsersByNameAndAgeAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("SearchUsersByNameAndAgeAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("SearchUsersByNameAndAgeAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT [id], [name], [email], [age], [salary], [department_id], [is_active], [hire_date], [bonus], [performance_rating] FROM [user] WHERE [department_id] = @deptId AND [salary] &gt;= @minSalary ORDER BY [salary] DESC</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT [id], [name], [email], [age], [salary], [department_id], [is_active], [hire_date], [bonus], [performance_rating] FROM [user] WHERE [department_id] = @deptId AND [salary] &gt;= @minSalary ORDER BY [salary] DESC</code>
    /// <para>🔧 Template Parameters:</para>
    /// <para>  • @deptId</para>
    /// <para>  • @minSalary</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="deptId">The deptId parameter.</param>
    /// <param name="minSalary">The minSalary parameter.</param>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.SqlTemplate("SELECT [id], [name], [email], [age], [salary], [department_id], [is_active], [hire_date], [bonus], [performance_rating] FROM [user] WHERE [department_id] = @deptId AND [salary] >= @minSalary ORDER BY [salary] DESC", Dialect = global::Sqlx.Annotations.SqlDefineTypes.SQLite, Operation = global::Sqlx.SqlOperation.Select)]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersByDepartmentAndSalaryAsync(int deptId, decimal minSalary)
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT [id], [name], [email], [age], [salary], [department_id], [is_active], [hire_date], [bonus], [performance_rating] FROM [user] WHERE [department_id] = @deptId AND [salary] >= @minSalary ORDER BY [salary] DESC";

        var param_deptId = __cmd__.CreateParameter();
        param_deptId.ParameterName = "@deptId";
        param_deptId.Value = deptId;
        param_deptId.DbType = global::System.Data.DbType.Int32;
        __cmd__.Parameters.Add(param_deptId);

        var param_minSalary = __cmd__.CreateParameter();
        param_minSalary.ParameterName = "@minSalary";
        param_minSalary.Value = minSalary;
        param_minSalary.DbType = global::System.Data.DbType.Decimal;
        __cmd__.Parameters.Add(param_minSalary);

        try
        {
            OnExecuting("GetUsersByDepartmentAndSalaryAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersByDepartmentAndSalaryAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersByDepartmentAndSalaryAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Updates an existing entity in the database.
    /// <para>📝 Original Template:</para>
    /// <code>UPDATE [user] SET [salary] = @newSalary, [bonus] = @bonusAmount WHERE [id] = @userId</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>UPDATE [user] SET [salary] = @newSalary, [bonus] = @bonusAmount WHERE [id] = @userId</code>
    /// <para>🔧 Template Parameters:</para>
    /// <para>  • @newSalary</para>
    /// <para>  • @bonusAmount</para>
    /// <para>  • @userId</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="userId">The userId parameter.</param>
    /// <param name="newSalary">The newSalary parameter.</param>
    /// <param name="bonusAmount">The bonusAmount parameter.</param>
    /// <returns>A task containing the number of affected rows.</returns>
    [global::Sqlx.Annotations.SqlTemplate("UPDATE [user] SET [salary] = @newSalary, [bonus] = @bonusAmount WHERE [id] = @userId", Dialect = global::Sqlx.Annotations.SqlDefineTypes.SQLite, Operation = global::Sqlx.SqlOperation.Update)]
    public System.Threading.Tasks.Task<int> UpdateUserSalaryAndBonusAsync(int userId, decimal newSalary, decimal bonusAmount)
    {
        int __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"UPDATE [user] SET [salary] = @newSalary, [bonus] = @bonusAmount WHERE [id] = @userId";

        var param_userId = __cmd__.CreateParameter();
        param_userId.ParameterName = "@userId";
        param_userId.Value = userId;
        param_userId.DbType = global::System.Data.DbType.Int32;
        __cmd__.Parameters.Add(param_userId);

        var param_newSalary = __cmd__.CreateParameter();
        param_newSalary.ParameterName = "@newSalary";
        param_newSalary.Value = newSalary;
        param_newSalary.DbType = global::System.Data.DbType.Decimal;
        __cmd__.Parameters.Add(param_newSalary);

        var param_bonusAmount = __cmd__.CreateParameter();
        param_bonusAmount.ParameterName = "@bonusAmount";
        param_bonusAmount.Value = bonusAmount;
        param_bonusAmount.DbType = global::System.Data.DbType.Decimal;
        __cmd__.Parameters.Add(param_bonusAmount);

        try
        {
            OnExecuting("UpdateUserSalaryAndBonusAsync", __cmd__);

            var scalarResult = __cmd__.ExecuteScalar();
            __result__ = scalarResult != null ? (int)scalarResult : default(int);

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("UpdateUserSalaryAndBonusAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("UpdateUserSalaryAndBonusAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Called before executing a repository operation.
    /// </summary>
    /// <param name="operationName">The name of the operation being executed.</param>
    /// <param name="command">The database command to be executed.</param>
    partial void OnExecuting(string operationName, global::System.Data.IDbCommand command);

    /// <summary>
    /// Called after successfully executing a repository operation.
    /// </summary>
    /// <param name="operationName">The name of the operation that was executed.</param>
    /// <param name="command">The database command that was executed.</param>
    /// <param name="result">The result of the operation.</param>
    /// <param name="elapsedTicks">The elapsed time in ticks.</param>
    partial void OnExecuted(string operationName, global::System.Data.IDbCommand command, object? result, long elapsedTicks);

    /// <summary>
    /// Called when a repository operation fails with an exception.
    /// </summary>
    /// <param name="operationName">The name of the operation that failed.</param>
    /// <param name="command">The database command that failed.</param>
    /// <param name="exception">The exception that occurred.</param>
    /// <param name="elapsedTicks">The elapsed time in ticks before failure.</param>
    partial void OnExecuteFail(string operationName, global::System.Data.IDbCommand command, global::System.Exception exception, long elapsedTicks);

}