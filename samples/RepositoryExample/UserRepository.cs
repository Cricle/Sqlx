// -----------------------------------------------------------------------
// <copyright file="UserRepository.cs" company="Cricle">
// Copyright (c) Cricle. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

namespace Sqlx.RepositoryExample;

using System;
using System.Data.Common;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Sqlx.Annotations;

/// <summary>
/// User repository implementation using Sqlx RepositoryFor source generator.
/// This class demonstrates automatic implementation generation for IUserService.
/// All methods are automatically generated by the source generator based on method names and patterns.
/// </summary>
[RepositoryFor(typeof(IUserService))]
public partial class UserRepository
{
    private readonly DbConnection connection;

    /// <summary>
    /// Initializes a new instance of the <see cref="UserRepository"/> class.
    /// </summary>
    /// <param name="connection">The database connection to use.</param>
    public UserRepository(DbConnection connection)
    {
        this.connection = connection;
    }

    // ========================================
    // RepositoryFor 源生成器演示
    // RepositoryFor Source Generator Demo
    // 
    // 所有 IUserService 接口的方法将由源生成器自动实现
    // All IUserService interface methods will be automatically implemented by the source generator
    // 
    // 生成的方法包括适当的 [Sqlx] 或 [SqlExecuteType] 属性：
    // Generated methods include appropriate [Sqlx] or [SqlExecuteType] attributes:
    // - GetAllUsers/GetAllUsersAsync -> [Sqlx("SELECT * FROM users")]
    // - GetUserById/GetUserByIdAsync -> [Sqlx("SELECT * FROM users WHERE Id = @id")]  
    // - CreateUser/CreateUserAsync -> [SqlExecuteType(SqlExecuteTypes.Insert, "users")]
    // - UpdateUser -> [SqlExecuteType(SqlExecuteTypes.Update, "users")]
    // - DeleteUser -> [SqlExecuteType(SqlExecuteTypes.Delete, "users")]
    // ========================================
}
