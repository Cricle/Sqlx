// -----------------------------------------------------------------------
// <copyright file="AttributeSourceGenerator.cs" company="Cricle">
// Copyright (c) Cricle. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

using System.Text;

namespace Sqlx.Core;

/// <summary>
/// Generates the C# attribute source code in a more readable and maintainable way.
/// </summary>
internal static class AttributeSourceGenerator
{
    /// <summary>
    /// Generates the complete C# attribute source.
    /// </summary>
    public static string GenerateAttributeSource()
    {
        var sb = new StringBuilder();
        
        GenerateHeader(sb);
        GenerateNamespaceStart(sb);
        GenerateAttributes(sb);
        GenerateEnums(sb);
        GenerateSqlDefineClass(sb);
        GenerateExpressionToSqlClass(sb);
        GenerateNamespaceEnd(sb);
        
        return sb.ToString();
    }

    private static void GenerateHeader(StringBuilder sb)
    {
        sb.AppendLine("// <auto-generated>");
        sb.AppendLine("// This code was generated by Sqlx Source Generator.");
        sb.AppendLine("// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
        sb.AppendLine("// </auto-generated>");
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
    }

    private static void GenerateNamespaceStart(StringBuilder sb)
    {
        sb.AppendLine("namespace Sqlx.Annotations");
        sb.AppendLine("{");
    }

    private static void GenerateAttributes(StringBuilder sb)
    {
        GenerateSqlxAttribute(sb);
        GenerateRawSqlAttribute(sb);
        GenerateExpressionToSqlAttribute(sb);
        GenerateSqlExecuteTypeAttribute(sb);
        GenerateRepositoryForAttribute(sb);
        GenerateTableNameAttribute(sb);
        GenerateDbSetTypeAttribute(sb);
    }

    private static void GenerateSqlxAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Specifies SQL command text or stored procedure name for a method.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Method | global::System.AttributeTargets.Parameter,");
        sb.AppendLine("        AllowMultiple = true, Inherited = false)]");
        sb.AppendLine("    public sealed class SqlxAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"SqlxAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public SqlxAttribute()");
        sb.AppendLine("        {");
        sb.AppendLine("            StoredProcedureName = string.Empty;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"SqlxAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        /// <param name=\"storedProcedureName\">The stored procedure name.</param>");
        sb.AppendLine("        public SqlxAttribute(string storedProcedureName)");
        sb.AppendLine("        {");
        sb.AppendLine("            StoredProcedureName = storedProcedureName ?? string.Empty;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets or sets the stored procedure name.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string StoredProcedureName { get; set; }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateRawSqlAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Specifies raw SQL command text for methods or parameters.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Method | global::System.AttributeTargets.Parameter,");
        sb.AppendLine("        AllowMultiple = false, Inherited = false)]");
        sb.AppendLine("    public sealed class RawSqlAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"RawSqlAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public RawSqlAttribute()");
        sb.AppendLine("        {");
        sb.AppendLine("            Sql = string.Empty;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"RawSqlAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        /// <param name=\"sql\">The raw SQL command text.</param>");
        sb.AppendLine("        public RawSqlAttribute(string sql)");
        sb.AppendLine("        {");
        sb.AppendLine("            Sql = sql ?? string.Empty;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets or sets the raw SQL command text.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string Sql { get; set; }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateExpressionToSqlAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Indicates that a parameter should be converted from a LINQ expression to SQL.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Parameter,");
        sb.AppendLine("        AllowMultiple = false, Inherited = false)]");
        sb.AppendLine("    public sealed class ExpressionToSqlAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateSqlExecuteTypeAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Specifies CRUD operation types and target table names.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Method,");
        sb.AppendLine("        AllowMultiple = false, Inherited = false)]");
        sb.AppendLine("    public sealed class SqlExecuteTypeAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"SqlExecuteTypeAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        /// <param name=\"executeType\">The SQL operation type.</param>");
        sb.AppendLine("        /// <param name=\"tableName\">The target table name.</param>");
        sb.AppendLine("        public SqlExecuteTypeAttribute(SqlExecuteTypes executeType, string tableName)");
        sb.AppendLine("        {");
        sb.AppendLine("            ExecuteType = executeType;");
        sb.AppendLine("            TableName = tableName ?? throw new global::System.ArgumentNullException(nameof(tableName));");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the SQL operation type.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public SqlExecuteTypes ExecuteType { get; }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the target table name.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string TableName { get; }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateRepositoryForAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Marks a class as a repository for a specified service interface.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Class,");
        sb.AppendLine("        AllowMultiple = false, Inherited = false)]");
        sb.AppendLine("    public sealed class RepositoryForAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"RepositoryForAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        /// <param name=\"serviceType\">The service interface type.</param>");
        sb.AppendLine("        public RepositoryForAttribute(global::System.Type serviceType)");
        sb.AppendLine("        {");
        sb.AppendLine("            ServiceType = serviceType ?? throw new global::System.ArgumentNullException(nameof(serviceType));");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the service interface type.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public global::System.Type ServiceType { get; }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateTableNameAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Specifies the database table name for an entity.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Class |");
        sb.AppendLine("        global::System.AttributeTargets.Interface | global::System.AttributeTargets.Method |");
        sb.AppendLine("        global::System.AttributeTargets.Parameter, AllowMultiple = false, Inherited = false)]");
        sb.AppendLine("    public sealed class TableNameAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"TableNameAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        /// <param name=\"tableName\">The database table name.</param>");
        sb.AppendLine("        public TableNameAttribute(string tableName)");
        sb.AppendLine("        {");
        sb.AppendLine("            TableName = tableName ?? throw new global::System.ArgumentNullException(nameof(tableName));");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the database table name.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string TableName { get; }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateEnums(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Defines SQL operation types for CRUD operations.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public enum SqlExecuteTypes");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>SELECT operation.</summary>");
        sb.AppendLine("        Select = 0,");
        sb.AppendLine("        /// <summary>UPDATE operation.</summary>");
        sb.AppendLine("        Update = 1,");
        sb.AppendLine("        /// <summary>INSERT operation.</summary>");
        sb.AppendLine("        Insert = 2,");
        sb.AppendLine("        /// <summary>DELETE operation.</summary>");
        sb.AppendLine("        Delete = 3");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateSqlDefineClass(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Provides database dialect-specific SQL formatting definitions.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static class SqlDefine");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// MySQL dialect configuration with backtick column wrapping and @ parameter prefix.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static readonly (string ColumnLeft, string ColumnRight, string StringLeft,");
        sb.AppendLine("            string StringRight, string ParameterPrefix) MySql = (\"`\", \"`\", \"'\", \"'\", \"@\");");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// SQL Server dialect configuration with square bracket column wrapping and @ parameter prefix.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static readonly (string ColumnLeft, string ColumnRight, string StringLeft,");
        sb.AppendLine("            string StringRight, string ParameterPrefix) SqlServer = (\"[\", \"]\", \"'\", \"'\", \"@\");");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// PostgreSQL dialect configuration with double quote column wrapping and $ parameter prefix.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static readonly (string ColumnLeft, string ColumnRight, string StringLeft,");
        sb.AppendLine("            string StringRight, string ParameterPrefix) PgSql = (\"\\\"\", \"\\\"\", \"'\", \"'\", \"$\");");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// SQLite dialect configuration with square bracket column wrapping and @ parameter prefix.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static readonly (string ColumnLeft, string ColumnRight, string StringLeft,");
        sb.AppendLine("            string StringRight, string ParameterPrefix) Sqlite = (\"[\", \"]\", \"'\", \"'\", \"@\");");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateExpressionToSqlClass(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Provides LINQ expression to SQL conversion functionality.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <typeparam name=\"T\">The entity type for expressions.</typeparam>");
        sb.AppendLine("    public class ExpressionToSql<T> : global::System.IDisposable");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Creates an ExpressionToSql builder for SQL Server dialect.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static ExpressionToSql<T> ForSqlServer() => new ExpressionToSql<T>();");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Creates an ExpressionToSql builder for MySQL dialect.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static ExpressionToSql<T> ForMySql() => new ExpressionToSql<T>();");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Creates an ExpressionToSql builder for PostgreSQL dialect.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static ExpressionToSql<T> ForPostgreSQL() => new ExpressionToSql<T>();");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Creates an ExpressionToSql builder for SQLite dialect.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static ExpressionToSql<T> ForSqlite() => new ExpressionToSql<T>();");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Creates an ExpressionToSql builder with default (SQL Server) dialect.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static ExpressionToSql<T> Create() => new ExpressionToSql<T>();");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Adds a WHERE condition to the query.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> Where(global::System.Linq.Expressions.Expression<global::System.Func<T, bool>> predicate) => this;");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Adds an AND condition to the query.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> And(global::System.Linq.Expressions.Expression<global::System.Func<T, bool>> predicate) => this;");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Sets a value for an UPDATE operation.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> Set<TValue>(global::System.Linq.Expressions.Expression<global::System.Func<T, TValue>> selector, TValue value) => this;");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Specifies columns for an INSERT operation.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> Insert(global::System.Linq.Expressions.Expression<global::System.Func<T, object>> selector) => this;");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Specifies values for an INSERT operation.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> Values(params object[] values) => this;");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Adds an ORDER BY clause to the query.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> OrderBy<TKey>(global::System.Linq.Expressions.Expression<global::System.Func<T, TKey>> keySelector) => this;");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Adds an ORDER BY DESC clause to the query.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> OrderByDescending<TKey>(global::System.Linq.Expressions.Expression<global::System.Func<T, TKey>> keySelector) => this;");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Limits the number of returned rows.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> Take(int count) => this;");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Skips the specified number of rows.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> Skip(int count) => this;");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Converts the built query to a parameterized SQL template.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public SqlTemplate ToTemplate() => new SqlTemplate(string.Empty, new global::System.Data.Common.DbParameter[0]);");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Converts the built query to a SQL string.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string ToSql() => string.Empty;");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Generates the WHERE clause portion of the query.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string ToWhereClause() => string.Empty;");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Generates additional clauses for the query.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string ToAdditionalClause() => string.Empty;");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Releases resources used by this instance.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public void Dispose() { }");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Represents a parameterized SQL template.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public class SqlTemplate");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the SqlTemplate class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public SqlTemplate(string sql, global::System.Data.Common.DbParameter[] parameters)");
        sb.AppendLine("        {");
        sb.AppendLine("            Sql = sql ?? string.Empty;");
        sb.AppendLine("            Parameters = parameters ?? new global::System.Data.Common.DbParameter[0];");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the SQL command text.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string Sql { get; }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the parameters for the SQL command.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public global::System.Data.Common.DbParameter[] Parameters { get; }");
        sb.AppendLine("    }");
    }

    private static void GenerateDbSetTypeAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Specifies the entity type for DbContext methods returning tuples or generic collections.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Parameter |");
        sb.AppendLine("        global::System.AttributeTargets.Method, AllowMultiple = false, Inherited = false)]");
        sb.AppendLine("    public sealed class DbSetTypeAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"DbSetTypeAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        /// <param name=\"type\">The entity type.</param>");
        sb.AppendLine("        public DbSetTypeAttribute(global::System.Type type)");
        sb.AppendLine("        {");
        sb.AppendLine("            Type = type ?? throw new global::System.ArgumentNullException(nameof(type));");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the entity type.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public global::System.Type Type { get; }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateNamespaceEnd(StringBuilder sb)
    {
        sb.AppendLine("}");
    }
}
