// -----------------------------------------------------------------------
// <copyright file="TestRepository.cs" company="Cricle">
// Copyright (c) Cricle. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

namespace Sqlx.BasicExample;

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using Sqlx.Annotations;

/// <summary>
/// Test entity for demonstration
/// </summary>
[TableName("test_users")]
public class TestUser
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
}

/// <summary>
/// Test service interface
/// </summary>
public interface ITestUserService
{
    [Sqlx("SELECT * FROM test_users")]
    IList<TestUser> GetAllUsers();
    
    [Sqlx("SELECT * FROM test_users")]
    Task<IList<TestUser>> GetAllUsersAsync(CancellationToken cancellationToken = default);
    
    [Sqlx("SELECT * FROM test_users WHERE Id = @id")]
    TestUser? GetUserById(int id);
    
    [Sqlx("SELECT * FROM test_users WHERE Id = @id")]
    Task<TestUser?> GetUserByIdAsync(int id, CancellationToken cancellationToken = default);
    
    [SqlExecuteType(SqlExecuteTypes.Insert, "test_users")]
    int CreateUser(TestUser user);
    
    [SqlExecuteType(SqlExecuteTypes.Insert, "test_users")]
    Task<int> CreateUserAsync(TestUser user, CancellationToken cancellationToken = default);
    
    [SqlExecuteType(SqlExecuteTypes.Update, "test_users")]
    int UpdateUser(TestUser user);
    
    [SqlExecuteType(SqlExecuteTypes.Delete, "test_users")]
    int DeleteUser(int id);
}

/// <summary>
/// Repository implementation that will be automatically generated by Sqlx
/// This class should only have the RepositoryFor attribute - no manual implementation
/// </summary>
[RepositoryFor(typeof(ITestUserService))]
public partial class TestUserRepository
{
    private readonly System.Data.Common.DbConnection connection;

    public TestUserRepository(System.Data.Common.DbConnection connection)
    {
        this.connection = connection ?? throw new ArgumentNullException(nameof(connection));
    }
    
    // 不需要手动实现 - Sqlx 会自动生成所有方法
    // No implementation needed - Sqlx will generate all methods automatically
}
