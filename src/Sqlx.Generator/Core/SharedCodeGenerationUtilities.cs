// -----------------------------------------------------------------------
// <copyright file="SharedCodeGenerationUtilities.cs" company="Cricle">
// Copyright (c) Cricle. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

using Microsoft.CodeAnalysis;
using System;
using System.Linq;

namespace Sqlx.Generator.Core;

/// <summary>
/// 共享的代码生成工具类，减少重复代码
/// </summary>
public static class SharedCodeGenerationUtilities
{
    /// <summary>
    /// 生成标准文件头
    /// </summary>
    public static void GenerateFileHeader(IndentedStringBuilder sb, string namespaceName)
    {
        sb.AppendLine("// <auto-generated>");
        sb.AppendLine("#nullable disable");
        sb.AppendLine("#pragma warning disable");
        sb.AppendLine("#pragma warning disable CS8628"); // Disable nullable reference type warnings
        sb.AppendLine("// </auto-generated>");
        sb.AppendLine();
        sb.AppendLine($"namespace {namespaceName};");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Data;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine();
    }


    /// <summary>
    /// 生成简化的错误处理块
    /// </summary>
    public static void GenerateErrorHandling(IndentedStringBuilder sb, Action generateContent)
    {
        sb.AppendLine("global::System.Data.IDbCommand? __cmd__ = null;");
        sb.AppendLine("try");
        sb.AppendLine("{");
        sb.PushIndent();
        
        generateContent();
        
        sb.PopIndent();
        sb.AppendLine("}");
        sb.AppendLine("finally");
        sb.AppendLine("{");
        sb.PushIndent();
        sb.AppendLine("__cmd__?.Dispose();");
        sb.PopIndent();
        sb.AppendLine("}");
    }




    /// <summary>
    /// 生成命令创建和参数绑定
    /// </summary>
    public static void GenerateCommandSetup(IndentedStringBuilder sb, string sql, IMethodSymbol method)
    {
        sb.AppendLine("__cmd__ = _connection.CreateCommand();");
        sb.AppendLine($"__cmd__.CommandText = @\"{sql}\";");
        sb.AppendLine();

        // 生成参数绑定
        foreach (var param in method.Parameters)
        {
            if (param.Type.Name != "CancellationToken")
            {
                var paramName = $"@{param.Name}";
                sb.AppendLine($"var param_{param.Name} = __cmd__.CreateParameter();");
                sb.AppendLine($"param_{param.Name}.ParameterName = \"{paramName}\";");
                sb.AppendLine($"param_{param.Name}.Value = {param.Name};");
                sb.AppendLine($"param_{param.Name}.DbType = {GetDbType(param.Type)};");
                sb.AppendLine($"__cmd__.Parameters.Add(param_{param.Name});");
                sb.AppendLine();
            }
        }
    }

    /// <summary>
    /// 获取DbType
    /// </summary>
    public static string GetDbType(ITypeSymbol type)
    {
        return type.SpecialType switch
        {
            SpecialType.System_String => "global::System.Data.DbType.String",
            SpecialType.System_Int32 => "global::System.Data.DbType.Int32",
            SpecialType.System_Int64 => "global::System.Data.DbType.Int64",
            SpecialType.System_Boolean => "global::System.Data.DbType.Boolean",
            SpecialType.System_DateTime => "global::System.Data.DbType.DateTime",
            SpecialType.System_Decimal => "global::System.Data.DbType.Decimal",
            SpecialType.System_Double => "global::System.Data.DbType.Double",
            _ => "global::System.Data.DbType.Object"
        };
    }

    /// <summary>
    /// 生成实体属性映射
    /// </summary>
    public static void GenerateEntityMapping(IndentedStringBuilder sb, INamedTypeSymbol entityType, string variableName)
    {
        // 移除可空标记
        var entityTypeName = entityType.ToDisplayString();
        if (entityTypeName.EndsWith("?"))
        {
            entityTypeName = entityTypeName.TrimEnd('?');
        }

        if (variableName == "__result__")
        {
            sb.AppendLine($"__result__ = new {entityTypeName}();");
        }
        else
        {
            sb.AppendLine($"var {variableName} = new {entityTypeName}();");
        }

        var properties = entityType.GetMembers().OfType<IPropertySymbol>()
            .Where(p => p.CanBeReferencedByName && p.SetMethod != null)
            .ToList();

        foreach (var prop in properties)
        {
            var columnName = ConvertToSnakeCase(prop.Name);
            sb.AppendLine($"if (reader[\"{columnName}\"] != global::System.DBNull.Value)");
            sb.AppendLine("{");
            sb.PushIndent();
            sb.AppendLine($"{variableName}.{prop.Name} = ({prop.Type.ToDisplayString()})reader[\"{columnName}\"];");
            sb.PopIndent();
            sb.AppendLine("}");
        }
    }

    /// <summary>
    /// 检查是否为可空类型
    /// </summary>
    public static bool IsNullableType(ITypeSymbol type)
    {
        return type.CanBeReferencedByName && 
               (type.IsReferenceType || 
                (type.IsValueType && type.Name == "Nullable"));
    }

    /// <summary>
    /// 将C#属性名转换为蛇形命名的数据库列名
    /// </summary>
    public static string ConvertToSnakeCase(string name)
    {
        if (string.IsNullOrEmpty(name))
            return name;

        // If already contains underscores and is all lowercase, return as-is
        if (name.Contains("_") && name.All(c => char.IsLower(c) || c == '_' || char.IsDigit(c)))
        {
            return name;
        }

        // If already contains underscores and is all caps, convert to lowercase
        if (name.Contains("_") && name.All(c => char.IsUpper(c) || c == '_' || char.IsDigit(c)))
        {
            return name.ToLower();
        }

        // Convert PascalCase/camelCase to snake_case
        var result = new System.Text.StringBuilder();
        for (int i = 0; i < name.Length; i++)
        {
            char current = name[i];
            
            if (char.IsUpper(current))
            {
                // Add underscore before uppercase letters (except at the beginning)
                if (i > 0 && !char.IsUpper(name[i - 1]))
                {
                    result.Append('_');
                }
                result.Append(char.ToLower(current));
            }
            else
            {
                result.Append(current);
            }
        }

        return result.ToString();
    }
}
