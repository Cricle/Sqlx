using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Data.Sqlite;
using Sqlx;
using Sqlx.Annotations;
using TodoWebApi.Models;

namespace TodoWebApi.Services;

/// <summary>
/// Demonstrates dynamic JOIN and GROUPBY placeholders with string interpolation optimization.
/// TDD Test Case: Verify zero Replace() calls in generated code.
/// </summary>
public interface IDynamicJoinGroupByRepository
{
    // ========================================
    // Dynamic JOIN Tests
    // ========================================
    
    /// <summary>Dynamic JOIN - runtime join clause.</summary>
    /// <remarks>
    /// Validates JOIN clause at runtime (no DDL/dangerous operations).
    /// 
    /// Examples:
    /// <code>
    /// // LEFT JOIN
    /// await repo.GetWithJoinAsync("LEFT JOIN users ON todos.user_id = users.id");
    /// 
    /// // INNER JOIN multiple
    /// await repo.GetWithJoinAsync("INNER JOIN categories c ON todos.category_id = c.id");
    /// </code>
    /// </remarks>
    [SqlxAttribute("SELECT {{columns}} FROM {{table}} {{join @joinClause}} LIMIT 10")]
    Task<List<Todo>> GetWithJoinAsync([DynamicSql(Type = DynamicSqlType.Fragment)] string joinClause);
    
    // ========================================
    // Dynamic GROUPBY Tests
    // ========================================
    
    /// <summary>Dynamic GROUP BY - runtime grouping columns.</summary>
    [SqlxAttribute("SELECT {{groupby @groupBy}}, COUNT(*) as Count FROM {{table}} GROUP BY {{groupby @groupBy}}")]
    Task<List<Dictionary<string, object>>> GetGroupedAsync([DynamicSql(Type = DynamicSqlType.Fragment)] string groupBy);
    
    // ========================================
    // Combined: JOIN + WHERE + GROUPBY + ORDERBY
    // ========================================
    
    /// <summary>Complex query with multiple dynamic parts.</summary>
    [SqlxAttribute("SELECT {{groupby @groupColumns}}, SUM(CASE WHEN completed = 1 THEN 1 ELSE 0 END) as CompletedCount FROM {{table}} {{join @joinClause}} WHERE {{where}} GROUP BY {{groupby @groupColumns}} ORDER BY {{orderby @orderBy}}")]
    Task<List<Dictionary<string, object>>> GetComplexStatisticsAsync(
        [DynamicSql(Type = DynamicSqlType.Fragment)] string joinClause,
        [ExpressionToSql] ExpressionToSqlBase whereExpression,
        [DynamicSql(Type = DynamicSqlType.Fragment)] string groupColumns,
        [DynamicSql(Type = DynamicSqlType.Fragment)] string orderBy);
}

[TableName("todos")]
[SqlDefine(SqlDefineTypes.SQLite)]
[RepositoryFor(typeof(IDynamicJoinGroupByRepository))]
public partial class DynamicJoinGroupByRepository(SqliteConnection connection) : IDynamicJoinGroupByRepository
{
    // Implementation auto-generated by Sqlx
    
    // Optional: monitor generated SQL
    partial void OnExecuting(string operationName, global::System.Data.IDbCommand command)
    {
        System.Diagnostics.Debug.WriteLine($"[{operationName}] SQL: {command.CommandText}");
    }
}

