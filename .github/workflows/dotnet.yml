name: .NET Build and Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore --verbosity minimal
      
    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity minimal --collect:"XPlat Code Coverage"
      
    - name: Test CompilationTests project
      run: dotnet run --project Sqlx.CompilationTests/Sqlx.CompilationTests.csproj --configuration Release --no-build
      continue-on-error: true  # Allow this to fail during development
      
    - name: Check StyleCop compliance
      run: dotnet build --configuration Release --verbosity normal 2>&1 | grep -E "(SA[0-9]{4}|warning|error)" || echo "StyleCop check completed"
      continue-on-error: true
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: '**/coverage.cobertura.xml'
        fail_ci_if_error: false
        
  build-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        dotnet-version: ['8.0.x']
        exclude:
          # Exclude some combinations to reduce build time
          - os: macos-latest
            dotnet-version: '6.0.x'
          - os: macos-latest  
            dotnet-version: '7.0.x'
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Test core projects only
      run: dotnet test Sqlx.Tests/Sqlx.Tests.csproj --configuration Release --no-build --verbosity minimal
      if: hashFiles('Sqlx.Tests/Sqlx.Tests.csproj') != ''



