// -----------------------------------------------------------------------
// <copyright file="SqlxCodeGenerator.cs" company="Cricle">
// Copyright (c) Cricle. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Sqlx.VisualStudio.CodeGeneration
{
    /// <summary>
    /// Provides code generation utilities for Sqlx repositories and interfaces.
    /// </summary>
    public static class SqlxCodeGenerator
    {
        /// <summary>
        /// Generates a repository interface for the specified entity type.
        /// </summary>
        /// <param name="entityName">The name of the entity.</param>
        /// <param name="properties">The properties of the entity.</param>
        /// <param name="tableName">The database table name.</param>
        /// <param name="dialectType">The SQL dialect type.</param>
        /// <returns>The generated interface code.</returns>
        public static string GenerateRepositoryInterface(string entityName, EntityProperty[] properties,
            string tableName, string dialectType = "SqlServer")
        {
            var sb = new StringBuilder();
            var interfaceName = $"I{entityName}Repository";

            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using System.Threading;");
            sb.AppendLine("using System.Threading.Tasks;");
            sb.AppendLine("using Sqlx.Annotations;");
            sb.AppendLine();
            sb.AppendLine($"namespace YourNamespace.Repositories");
            sb.AppendLine("{");
            sb.AppendLine($"    /// <summary>");
            sb.AppendLine($"    /// Repository interface for {entityName} entity operations.");
            sb.AppendLine($"    /// Generated by Sqlx Visual Studio Extension.");
            sb.AppendLine($"    /// </summary>");
            sb.AppendLine($"    public interface {interfaceName}");
            sb.AppendLine("    {");

            // Get all method
            sb.AppendLine($"        /// <summary>");
            sb.AppendLine($"        /// Gets all {entityName} records.");
            sb.AppendLine($"        /// </summary>");
            sb.AppendLine($"        [SqlExecuteType(SqlExecuteTypes.Select, \"{tableName}\")]");
            sb.AppendLine($"        IList<{entityName}> GetAll{entityName}s();");
            sb.AppendLine();

            // Get by ID method
            var idProperty = properties.FirstOrDefault(p => p.Name.Equals("Id", StringComparison.OrdinalIgnoreCase));
            if (idProperty != null)
            {
                sb.AppendLine($"        /// <summary>");
                sb.AppendLine($"        /// Gets a {entityName} by ID.");
                sb.AppendLine($"        /// </summary>");
                sb.AppendLine($"        [Sqlx(\"SELECT * FROM {tableName} WHERE Id = @id\")]");
                sb.AppendLine($"        {entityName} GetById({idProperty.Type} id);");
                sb.AppendLine();

                // Get by ID async method
                sb.AppendLine($"        /// <summary>");
                sb.AppendLine($"        /// Gets a {entityName} by ID asynchronously.");
                sb.AppendLine($"        /// </summary>");
                sb.AppendLine($"        [Sqlx(\"SELECT * FROM {tableName} WHERE Id = @id\")]");
                sb.AppendLine($"        Task<{entityName}> GetByIdAsync({idProperty.Type} id, CancellationToken cancellationToken = default);");
                sb.AppendLine();
            }

            // Create method
            sb.AppendLine($"        /// <summary>");
            sb.AppendLine($"        /// Creates a new {entityName}.");
            sb.AppendLine($"        /// </summary>");
            sb.AppendLine($"        [SqlExecuteType(SqlExecuteTypes.Insert, \"{tableName}\")]");
            sb.AppendLine($"        int Create({entityName} entity);");
            sb.AppendLine();

            // Create async method
            sb.AppendLine($"        /// <summary>");
            sb.AppendLine($"        /// Creates a new {entityName} asynchronously.");
            sb.AppendLine($"        /// </summary>");
            sb.AppendLine($"        [SqlExecuteType(SqlExecuteTypes.Insert, \"{tableName}\")]");
            sb.AppendLine($"        Task<int> CreateAsync({entityName} entity, CancellationToken cancellationToken = default);");
            sb.AppendLine();

            // Update method
            if (idProperty != null)
            {
                sb.AppendLine($"        /// <summary>");
                sb.AppendLine($"        /// Updates an existing {entityName}.");
                sb.AppendLine($"        /// </summary>");
                sb.AppendLine($"        [SqlExecuteType(SqlExecuteTypes.Update, \"{tableName}\")]");
                sb.AppendLine($"        int Update({entityName} entity);");
                sb.AppendLine();

                // Update async method
                sb.AppendLine($"        /// <summary>");
                sb.AppendLine($"        /// Updates an existing {entityName} asynchronously.");
                sb.AppendLine($"        /// </summary>");
                sb.AppendLine($"        [SqlExecuteType(SqlExecuteTypes.Update, \"{tableName}\")]");
                sb.AppendLine($"        Task<int> UpdateAsync({entityName} entity, CancellationToken cancellationToken = default);");
                sb.AppendLine();

                // Delete method
                sb.AppendLine($"        /// <summary>");
                sb.AppendLine($"        /// Deletes a {entityName} by ID.");
                sb.AppendLine($"        /// </summary>");
                sb.AppendLine($"        [SqlExecuteType(SqlExecuteTypes.Delete, \"{tableName}\")]");
                sb.AppendLine($"        int Delete({idProperty.Type} id);");
                sb.AppendLine();

                // Delete async method
                sb.AppendLine($"        /// <summary>");
                sb.AppendLine($"        /// Deletes a {entityName} by ID asynchronously.");
                sb.AppendLine($"        /// </summary>");
                sb.AppendLine($"        [SqlExecuteType(SqlExecuteTypes.Delete, \"{tableName}\")]");
                sb.AppendLine($"        Task<int> DeleteAsync({idProperty.Type} id, CancellationToken cancellationToken = default);");
                sb.AppendLine();
            }

            // Batch operations
            sb.AppendLine($"        /// <summary>");
            sb.AppendLine($"        /// Creates multiple {entityName}s in a batch.");
            sb.AppendLine($"        /// </summary>");
            sb.AppendLine($"        [SqlExecuteType(SqlExecuteTypes.BatchInsert, \"{tableName}\")]");
            sb.AppendLine($"        int BatchCreate(IEnumerable<{entityName}> entities);");
            sb.AppendLine();

            // Custom query methods based on properties
            foreach (var prop in properties.Where(p => !p.Name.Equals("Id", StringComparison.OrdinalIgnoreCase)))
            {
                if (prop.Type == "string" || prop.Type == "String")
                {
                    sb.AppendLine($"        /// <summary>");
                    sb.AppendLine($"        /// Gets {entityName}s by {prop.Name}.");
                    sb.AppendLine($"        /// </summary>");
                    sb.AppendLine($"        [Sqlx(\"SELECT * FROM {tableName} WHERE {prop.Name} = @{prop.Name.ToLower()}\")]");
                    sb.AppendLine($"        IList<{entityName}> GetBy{prop.Name}({prop.Type} {prop.Name.ToLower()});");
                    sb.AppendLine();
                }
                else if (prop.Type == "bool" || prop.Type == "Boolean")
                {
                    sb.AppendLine($"        /// <summary>");
                    sb.AppendLine($"        /// Gets {entityName}s where {prop.Name} is true/false.");
                    sb.AppendLine($"        /// </summary>");
                    sb.AppendLine($"        [Sqlx(\"SELECT * FROM {tableName} WHERE {prop.Name} = @{prop.Name.ToLower()}\")]");
                    sb.AppendLine($"        IList<{entityName}> GetBy{prop.Name}({prop.Type} {prop.Name.ToLower()});");
                    sb.AppendLine();
                }
            }

            sb.AppendLine("    }");
            sb.AppendLine("}");

            return sb.ToString();
        }

        /// <summary>
        /// Generates a repository implementation for the specified interface.
        /// </summary>
        /// <param name="entityName">The name of the entity.</param>
        /// <param name="interfaceName">The name of the interface.</param>
        /// <param name="dialectType">The SQL dialect type.</param>
        /// <returns>The generated implementation code.</returns>
        public static string GenerateRepositoryImplementation(string entityName, string interfaceName, string dialectType = "SqlServer")
        {
            var sb = new StringBuilder();
            var className = interfaceName.Substring(1); // Remove 'I' prefix

            sb.AppendLine("using System;");
            sb.AppendLine("using System.Data.Common;");
            sb.AppendLine("using Sqlx.Annotations;");
            sb.AppendLine();
            sb.AppendLine($"namespace YourNamespace.Repositories");
            sb.AppendLine("{");
            sb.AppendLine($"    /// <summary>");
            sb.AppendLine($"    /// Repository implementation for {entityName} entity operations.");
            sb.AppendLine($"    /// Generated by Sqlx Visual Studio Extension.");
            sb.AppendLine($"    /// </summary>");
            sb.AppendLine($"    [RepositoryFor(typeof({interfaceName}))]");
            sb.AppendLine($"    [SqlDefine(SqlDefineTypes.{dialectType})]");
            sb.AppendLine($"    public partial class {className}");
            sb.AppendLine("    {");
            sb.AppendLine("        private readonly DbConnection connection;");
            sb.AppendLine();
            sb.AppendLine($"        /// <summary>");
            sb.AppendLine($"        /// Initializes a new instance of the {className} class.");
            sb.AppendLine($"        /// </summary>");
            sb.AppendLine($"        /// <param name=\"connection\">The database connection.</param>");
            sb.AppendLine($"        public {className}(DbConnection connection)");
            sb.AppendLine("        {");
            sb.AppendLine("            this.connection = connection ?? throw new ArgumentNullException(nameof(connection));");
            sb.AppendLine("        }");
            sb.AppendLine();
            sb.AppendLine("        // Methods are auto-implemented by Sqlx source generator");
            sb.AppendLine("    }");
            sb.AppendLine("}");

            return sb.ToString();
        }

        /// <summary>
        /// Generates an entity class based on table schema.
        /// </summary>
        /// <param name="entityName">The name of the entity.</param>
        /// <param name="tableName">The database table name.</param>
        /// <param name="properties">The properties of the entity.</param>
        /// <returns>The generated entity code.</returns>
        public static string GenerateEntityClass(string entityName, string tableName, EntityProperty[] properties)
        {
            var sb = new StringBuilder();

            sb.AppendLine("using System;");
            sb.AppendLine("using Sqlx.Annotations;");
            sb.AppendLine();
            sb.AppendLine($"namespace YourNamespace.Entities");
            sb.AppendLine("{");
            sb.AppendLine($"    /// <summary>");
            sb.AppendLine($"    /// Represents a {entityName} entity.");
            sb.AppendLine($"    /// Generated by Sqlx Visual Studio Extension.");
            sb.AppendLine($"    /// </summary>");
            sb.AppendLine($"    [TableName(\"{tableName}\")]");
            sb.AppendLine($"    public class {entityName}");
            sb.AppendLine("    {");

            foreach (var property in properties)
            {
                sb.AppendLine($"        /// <summary>");
                sb.AppendLine($"        /// Gets or sets the {property.Name}.");
                sb.AppendLine($"        /// </summary>");
                sb.AppendLine($"        public {property.Type} {property.Name} {{ get; set; }}");
                if (property != properties.Last())
                {
                    sb.AppendLine();
                }
            }

            sb.AppendLine("    }");
            sb.AppendLine("}");

            return sb.ToString();
        }

        /// <summary>
        /// Generates database-specific SQL snippets.
        /// </summary>
        /// <param name="operation">The SQL operation type.</param>
        /// <param name="tableName">The table name.</param>
        /// <param name="dialect">The database dialect.</param>
        /// <returns>The generated SQL snippet.</returns>
        public static string GenerateSqlSnippet(string operation, string tableName, string dialect)
        {
            return operation.ToUpperInvariant() switch
            {
                "SELECT" => $"SELECT * FROM {WrapTableName(tableName, dialect)}",
                "INSERT" => $"INSERT INTO {WrapTableName(tableName, dialect)} (...) VALUES (...)",
                "UPDATE" => $"UPDATE {WrapTableName(tableName, dialect)} SET ... WHERE ...",
                "DELETE" => $"DELETE FROM {WrapTableName(tableName, dialect)} WHERE ...",
                _ => $"-- {operation} statement for {tableName}"
            };
        }

        /// <summary>
        /// Wraps a table name with the appropriate dialect-specific delimiters.
        /// </summary>
        /// <param name="tableName">The table name.</param>
        /// <param name="dialect">The database dialect.</param>
        /// <returns>The wrapped table name.</returns>
        private static string WrapTableName(string tableName, string dialect)
        {
            return dialect switch
            {
                "MySql" => $"`{tableName}`",
                "SqlServer" => $"[{tableName}]",
                "PostgreSQL" => $"\"{tableName}\"",
                "Oracle" => $"\"{tableName}\"",
                "DB2" => $"\"{tableName}\"",
                "SQLite" => $"[{tableName}]",
                _ => tableName
            };
        }
    }

    /// <summary>
    /// Represents an entity property for code generation.
    /// </summary>
    public class EntityProperty
    {
        public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public bool IsNullable { get; set; }
        public bool IsPrimaryKey { get; set; }
        public string? DefaultValue { get; set; }

        public EntityProperty() { }

        public EntityProperty(string name, string type, bool isNullable = false, bool isPrimaryKey = false)
        {
            Name = name;
            Type = type;
            IsNullable = isNullable;
            IsPrimaryKey = isPrimaryKey;
        }
    }

    /// <summary>
    /// Provides common entity templates for quick scaffolding.
    /// </summary>
    public static class EntityTemplates
    {
        public static EntityProperty[] UserTemplate => new[]
        {
            new EntityProperty("Id", "int", false, true),
            new EntityProperty("FirstName", "string"),
            new EntityProperty("LastName", "string"),
            new EntityProperty("Email", "string"),
            new EntityProperty("Age", "int", true),
            new EntityProperty("IsActive", "bool"),
            new EntityProperty("CreatedDate", "DateTime")
        };

        public static EntityProperty[] ProductTemplate => new[]
        {
            new EntityProperty("Id", "int", false, true),
            new EntityProperty("Name", "string"),
            new EntityProperty("Price", "decimal"),
            new EntityProperty("CategoryId", "int"),
            new EntityProperty("Description", "string", true),
            new EntityProperty("InStock", "bool")
        };

        public static EntityProperty[] OrderTemplate => new[]
        {
            new EntityProperty("Id", "int", false, true),
            new EntityProperty("UserId", "int"),
            new EntityProperty("OrderDate", "DateTime"),
            new EntityProperty("TotalAmount", "decimal"),
            new EntityProperty("Status", "string"),
            new EntityProperty("ShippingAddress", "string", true)
        };

        public static EntityProperty[] EmployeeTemplate => new[]
        {
            new EntityProperty("Id", "int", false, true),
            new EntityProperty("FirstName", "string"),
            new EntityProperty("LastName", "string"),
            new EntityProperty("Email", "string"),
            new EntityProperty("Salary", "decimal"),
            new EntityProperty("Department", "string"),
            new EntityProperty("HireDate", "DateTime")
        };
    }
}

