<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sqlx</name>
    </assembly>
    <members>
        <member name="T:Sqlx.Annotations.DbSetTypeAttribute">
            <summary>
            Specifies the DbSet type for a property or field.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.DbSetTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.DbSetTypeAttribute"/> class.
            </summary>
            <param name="entityType">The entity type.</param>
        </member>
        <member name="P:Sqlx.Annotations.DbSetTypeAttribute.EntityType">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.ExpressionToSqlAttribute">
            <summary>
            Indicates that a parameter should be converted from a LINQ expression to SQL.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.RepositoryForAttribute">
            <summary>
            Marks a class as a repository for a specified service interface.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.RepositoryForAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.RepositoryForAttribute"/> class
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.RepositoryForAttribute.ServiceType">
            <summary>
            Gets the service interface type.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlDefineTypes">
            <summary>
            SQL dialect types enumeration.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.MySql">
            <summary>
            MySQL database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.SqlServer">
            <summary>
            SQL Server database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.PostgreSql">
            <summary>
            PostgreSQL database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.Oracle">
            <summary>
            Oracle database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.DB2">
            <summary>
            DB2 database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.SQLite">
            <summary>
            SQLite database dialect type.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlDefineAttribute">
            <summary>
            Specifies the SQL dialect type for a class or method.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlDefineAttribute.#ctor(Sqlx.Annotations.SqlDefineTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.SqlDefineAttribute"/> class.
            </summary>
            <param name="dialectType">The SQL dialect type.</param>
        </member>
        <member name="P:Sqlx.Annotations.SqlDefineAttribute.DialectType">
            <summary>
            Gets the SQL dialect type.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlExecuteTypeAttribute">
            <summary>
            Specifies the SQL execution type for a method.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlExecuteTypeAttribute.#ctor(Sqlx.SqlOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.SqlExecuteTypeAttribute"/> class.
            </summary>
            <param name="operation">The SQL operation type.</param>
        </member>
        <member name="P:Sqlx.Annotations.SqlExecuteTypeAttribute.Operation">
            <summary>
            Gets the SQL operation type.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlTemplateAttribute">
            <summary>
            标记方法使用编译时 SQL 模板，提供安全的 SQL 拼接功能
            与 SqlxAttribute 结合使用，在编译时生成高性能的 SQL 代码
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlTemplateAttribute.#ctor(System.String)">
            <summary>
            初始化 SqlTemplateAttribute
            </summary>
            <param name="template">SQL 模板字符串，支持 @{参数名} 占位符</param>
        </member>
        <member name="P:Sqlx.Annotations.SqlTemplateAttribute.Template">
            <summary>
            SQL 模板字符串，使用 @{参数名} 作为占位符
            例如: "SELECT * FROM Users WHERE Id = @{userId} AND Name = @{userName}"
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlTemplateAttribute.Dialect">
            <summary>
            数据库方言类型，默认为 SqlServer
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlTemplateAttribute.SafeMode">
            <summary>
            是否启用安全模式，默认为 true
            安全模式下会进行 SQL 注入检查和参数验证
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlTemplateAttribute.ValidateParameters">
            <summary>
            是否验证参数，默认为 true
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlTemplateAttribute.EnableCaching">
            <summary>
            是否缓存生成的 SQL，默认为 true
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlTemplateAttribute.Operation">
            <summary>
            执行类型，用于优化生成的代码
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlxAttribute">
            <summary>
            指定方法的 SQL 命令文本、原始 SQL 或存储过程名称
            与 SqlTemplateAttribute 配合使用时，提供编译时 SQL 生成功能
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlxAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.SqlxAttribute"/> class.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlxAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.SqlxAttribute"/> class with stored procedure name
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlxAttribute.StoredProcedureName">
            <summary>
            Gets or sets the stored procedure name.
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlxAttribute.Sql">
            <summary>
            Gets or sets the raw SQL command text.
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlxAttribute.AcceptsSqlTemplate">
            <summary>
            Gets or sets whether this method accepts SqlTemplate as parameter.
            When true, the method can accept SqlTemplate parameter for dynamic SQL generation.
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlxAttribute.SqlTemplateParameterName">
            <summary>
            Gets or sets the parameter name for SqlTemplate when AcceptsSqlTemplate is true.
            Defaults to "template" if not specified.
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlxAttribute.UseCompileTimeTemplate">
            <summary>
            指示此方法是否使用编译时 SQL 模板生成
            当为 true 时，将与 SqlTemplateAttribute 协作生成高性能代码
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlxAttribute.TemplateCacheKey">
            <summary>
            编译时模板的缓存键，用于优化重复查询
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.TableNameAttribute">
            <summary>
            Specifies the table name for a class.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.TableNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.TableNameAttribute"/> class.
            </summary>
            <param name="tableName">The table name.</param>
        </member>
        <member name="P:Sqlx.Annotations.TableNameAttribute.TableName">
            <summary>
            Gets the table name.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.ValueStringBuilder">
            <summary>
            高性能的值类型字符串构建器，使用ArrayPool避免堆分配，无锁设计。
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ValueStringBuilder.#ctor(System.Int32)">
            <summary>
            初始化ValueStringBuilder的新实例。
            </summary>
            <param name="initialCapacity">初始容量，默认为256字符。</param>
        </member>
        <member name="P:Sqlx.Annotations.ValueStringBuilder.Length">
            <summary>
            获取或设置当前字符串的长度。
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.ValueStringBuilder.Capacity">
            <summary>
            获取当前缓冲区的容量。
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ValueStringBuilder.Append(System.Char)">
            <summary>
            向字符串构建器追加单个字符。
            </summary>
            <param name="c">要追加的字符。</param>
        </member>
        <member name="M:Sqlx.Annotations.ValueStringBuilder.Append(System.String)">
            <summary>
            向字符串构建器追加字符串。
            </summary>
            <param name="s">要追加的字符串。</param>
        </member>
        <member name="M:Sqlx.Annotations.ValueStringBuilder.Clear">
            <summary>
            清空字符串构建器的内容。
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ValueStringBuilder.ToString">
            <summary>
            将当前的字符串构建器转换为字符串。
            </summary>
            <returns>构建的字符串。</returns>
        </member>
        <member name="M:Sqlx.Annotations.ValueStringBuilder.Dispose">
            <summary>
            释放资源，将缓冲区返回到ArrayPool。
            </summary>
        </member>
        <member name="T:Sqlx.CompileTimeSqlTemplate">
            <summary>
            编译时 SQL 模板处理器，提供安全的 SQL 生成功能
            只在编译时使用，运行时不执行动态 SQL 拼接
            </summary>
        </member>
        <member name="F:Sqlx.CompileTimeSqlTemplate.ParameterPattern">
            <summary>
            参数占位符的正则表达式模式
            匹配 @{参数名} 格式的占位符
            </summary>
        </member>
        <member name="F:Sqlx.CompileTimeSqlTemplate.SqlKeywords">
            <summary>
            SQL 关键字列表，用于安全检查
            </summary>
        </member>
        <member name="F:Sqlx.CompileTimeSqlTemplate.DangerousStrings">
            <summary>
            危险字符串列表，用于 SQL 注入检查
            </summary>
        </member>
        <member name="M:Sqlx.CompileTimeSqlTemplate.ParseTemplate(System.String)">
            <summary>
            解析 SQL 模板，提取参数信息
            </summary>
            <param name="template">SQL 模板字符串</param>
            <returns>解析结果</returns>
        </member>
        <member name="M:Sqlx.CompileTimeSqlTemplate.ValidateTemplate(System.String)">
            <summary>
            验证 SQL 模板的安全性
            </summary>
            <param name="template">SQL 模板</param>
            <returns>是否安全</returns>
        </member>
        <member name="M:Sqlx.CompileTimeSqlTemplate.GenerateCompileTimeCode(Sqlx.SqlTemplateParseResult,Sqlx.SqlDialectType)">
            <summary>
            生成编译时安全的 SQL 代码
            </summary>
            <param name="parseResult">解析结果</param>
            <param name="dialect">数据库方言</param>
            <returns>生成的 SQL 代码</returns>
        </member>
        <member name="M:Sqlx.CompileTimeSqlTemplate.GetSqlDialect(Sqlx.SqlDialectType)">
            <summary>
            获取 SQL 方言配置
            </summary>
        </member>
        <member name="M:Sqlx.CompileTimeSqlTemplate.EscapeStringForCode(System.String)">
            <summary>
            转义字符串用于代码生成
            </summary>
        </member>
        <member name="T:Sqlx.SqlTemplateParseResult">
            <summary>
            SQL 模板解析结果
            </summary>
        </member>
        <member name="P:Sqlx.SqlTemplateParseResult.Template">
            <summary>
            原始模板
            </summary>
        </member>
        <member name="P:Sqlx.SqlTemplateParseResult.Parameters">
            <summary>
            提取的参数列表
            </summary>
        </member>
        <member name="P:Sqlx.SqlTemplateParseResult.IsValid">
            <summary>
            模板是否有效和安全
            </summary>
        </member>
        <member name="P:Sqlx.SqlTemplateParseResult.ParameterCount">
            <summary>
            参数数量
            </summary>
        </member>
        <member name="P:Sqlx.SqlTemplateParseResult.ErrorMessage">
            <summary>
            错误信息（如果有）
            </summary>
        </member>
        <member name="T:Sqlx.ExpressionToSql`1">
            <summary>
            Simple and efficient LINQ Expression to SQL converter (AOT-friendly, lock-free design)
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ForSqlServer">
            <summary>SQL Server方言</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ForMySql">
            <summary>MySQL方言</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ForPostgreSQL">
            <summary>PostgreSQL方言</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ForSqlite">
            <summary>SQLite方言</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ForOracle">
            <summary>Oracle方言</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ForDB2">
            <summary>DB2方言</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Create">
            <summary>默认方言(SQL Server)</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.#ctor(Sqlx.SqlDialect)">
            <summary>
            使用指定的 SQL 方言初始化新实例。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Select(System.String[])">
            <summary>
            设置自定义的SELECT列。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            使用表达式设置SELECT列。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            使用多个表达式设置SELECT列。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ExtractColumnsFromSelector``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            统一的列提取逻辑，避免重复代码
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ExtractColumnsFromSelectors(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            统一的多选择器列提取逻辑
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加 WHERE 条件到查询。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加 AND 条件到查询（等同于 Where）。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            添加 ORDER BY 子句。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            添加 ORDER BY DESC 子句。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.AddOrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            添加排序表达式的通用方法。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Take(System.Int32)">
            <summary>
            限制返回行数。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Skip(System.Int32)">
            <summary>
            跳过指定行数。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            设置 UPDATE 操作的值。支持模式如 a=1。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            使用表达式设置 UPDATE 操作的值。支持模式如 a=a+1。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.SetOperationType(Sqlx.SqlOperation)">
            <summary>
            统一的操作类型设置，避免重复代码
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Insert">
            <summary>
            创建 INSERT 操作。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Insert(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            指定 INSERT 操作的列。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.SetInsertColumns(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            统一的INSERT列设置逻辑
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Values(System.Object[])">
            <summary>
            指定 INSERT 操作的值。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.AddValues(System.Object[])">
            <summary>
            添加多行INSERT值。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.AddFormattedValues(System.Object[])">
            <summary>
            统一的值格式化和添加逻辑
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.InsertInto(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            指定INSERT INTO操作，需要显式指定列（AOT 友好）。
            </summary>
            <param name="selector">列选择表达式</param>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.InsertIntoAll">
            <summary>
            指定INSERT INTO操作，自动推断所有列（使用反射，不推荐在 AOT 中使用）。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.InsertSelect(System.String)">
            <summary>
            使用SELECT子查询进行INSERT操作。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.InsertSelect``1(Sqlx.ExpressionToSql{``0})">
            <summary>
            使用另一个ExpressionToSql的查询进行INSERT操作。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            添加 GROUP BY 子句，返回分组查询对象。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.AddGroupBy(System.String)">
            <summary>
            添加 GROUP BY 子句，返回正确的类型以支持链式调用。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Having(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加 HAVING 条件。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Delete">
            <summary>
            创建DELETE语句。必须配合WHERE使用以确保安全。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            创建DELETE语句并添加WHERE条件。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Update">
            <summary>
            创建UPDATE语句。
            </summary>
        </member>
        <member name="F:Sqlx.ExpressionToSql`1._custom">
            <summary>
            设置自定义 SELECT 子句（内部使用）。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.BuildSql">
            <summary>
            构建 SQL 语句，简单直接无缓存。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.BuildDeleteSql">
            <summary>
            构建DELETE SQL语句。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.UseParameterizedQueries">
            <summary>
            启用参数化查询模式，用于生成SqlTemplate
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ToTemplate">
            <summary>
            转换为 SQL 模板。如果未启用参数化模式，将自动启用并重新构建查询。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ToSql">
            <summary>
            转换为 SQL 字符串。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ToWhereClause">
            <summary>
            生成 WHERE 子句部分。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ToAdditionalClause">
            <summary>
            生成额外的子句（GROUP BY, HAVING, ORDER BY, LIMIT, OFFSET）。
            </summary>
        </member>
        <member name="T:Sqlx.SqlOperation">
            <summary>
            SQL operation type enumeration
            </summary>
        </member>
        <member name="F:Sqlx.SqlOperation.Select">
            <summary>SELECT query</summary>
        </member>
        <member name="F:Sqlx.SqlOperation.Insert">
            <summary>INSERT operation</summary>
        </member>
        <member name="F:Sqlx.SqlOperation.Update">
            <summary>UPDATE operation</summary>
        </member>
        <member name="F:Sqlx.SqlOperation.Delete">
            <summary>DELETE operation</summary>
        </member>
        <member name="T:Sqlx.Any">
            <summary>
            Any placeholder class for SqlTemplate
            </summary>
        </member>
        <member name="M:Sqlx.Any.Value``1">
            <summary>
            Placeholder for any value type with auto-generated parameter name
            </summary>
            <typeparam name="TValue">Placeholder type</typeparam>
            <returns>Placeholder value</returns>
        </member>
        <member name="M:Sqlx.Any.Value``1(System.String)">
            <summary>
            Placeholder for any value type with custom parameter name
            </summary>
            <typeparam name="TValue">Placeholder type</typeparam>
        </member>
        <member name="M:Sqlx.Any.String">
            <summary>
            String placeholder with auto-generated parameter name
            </summary>
            <returns>String placeholder</returns>
        </member>
        <member name="M:Sqlx.Any.String(System.String)">
            <summary>
            String placeholder with custom parameter name
            </summary>
            <param name="parameterName">Custom parameter name</param>
            <returns>String placeholder</returns>
        </member>
        <member name="M:Sqlx.Any.Int">
            <summary>
            整数占位符（自动生成参数名）
            </summary>
            <returns>整数占位符</returns>
        </member>
        <member name="M:Sqlx.Any.Int(System.String)">
            <summary>
            整数占位符（指定参数名）
            </summary>
            <returns>整数占位符</returns>
        </member>
        <member name="M:Sqlx.Any.Bool">
            <summary>
            布尔占位符（自动生成参数名）
            </summary>
            <returns>布尔占位符</returns>
        </member>
        <member name="M:Sqlx.Any.Bool(System.String)">
            <summary>
            布尔占位符（指定参数名）
            </summary>
            <returns>布尔占位符</returns>
        </member>
        <member name="M:Sqlx.Any.DateTime">
            <summary>
            日期时间占位符（自动生成参数名）
            </summary>
            <returns>日期时间占位符</returns>
        </member>
        <member name="M:Sqlx.Any.DateTime(System.String)">
            <summary>
            日期时间占位符（指定参数名）
            </summary>
            <returns>日期时间占位符</returns>
        </member>
        <member name="M:Sqlx.Any.Guid">
            <summary>
            Guid占位符（自动生成参数名）
            </summary>
            <returns>Guid占位符</returns>
        </member>
        <member name="M:Sqlx.Any.Guid(System.String)">
            <summary>
            Guid占位符（指定参数名）
            </summary>
            <returns>Guid占位符</returns>
        </member>
        <member name="T:Sqlx.GroupedExpressionToSql`2">
            <summary>
            表示分组后的查询对象，支持聚合操作。
            </summary>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.Select``1(System.Linq.Expressions.Expression{System.Func{Sqlx.IGrouping{`1,`0},``0}})">
            <summary>
            选择分组结果的投影。
            </summary>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.Having(System.Linq.Expressions.Expression{System.Func{Sqlx.IGrouping{`1,`0},System.Boolean}})">
            <summary>
            添加 HAVING 条件。
            </summary>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.ParseLambdaExpressionEnhanced(System.Linq.Expressions.Expression)">
            <summary>
            增强的Lambda表达式解析，支持复杂的嵌套函数和表达式
            </summary>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.ParseLambdaBody(System.Linq.Expressions.Expression)">
            <summary>
            解析Lambda表达式的Body部分，支持嵌套函数
            </summary>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.ParseMethodCallInAggregate(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            在聚合函数上下文中解析方法调用
            </summary>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.ToSql">
            <summary>
            转换为SQL查询字符串。
            </summary>
            <returns>SQL查询字符串。</returns>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.ToTemplate">
            <summary>
            转换为SQL模板。
            </summary>
            <returns>SQL模板实例。</returns>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.Dispose">
            <summary>
            释放资源，清理内部查询对象。
            </summary>
        </member>
        <member name="T:Sqlx.IGrouping`2">
            <summary>
            表示分组的接口，类似于 LINQ 的 IGrouping。
            </summary>
        </member>
        <member name="P:Sqlx.IGrouping`2.Key">
            <summary>
            获取分组的键值。
            </summary>
        </member>
        <member name="T:Sqlx.GroupingExtensions">
            <summary>
            为 IGrouping 提供聚合扩展方法。
            </summary>
        </member>
        <member name="M:Sqlx.GroupingExtensions.Count``2(Sqlx.IGrouping{``0,``1})">
            <summary>
            计算分组中元素的数量。
            </summary>
            <typeparam name="TKey">分组键的类型。</typeparam>
            <typeparam name="TElement">元素的类型。</typeparam>
            <param name="grouping">分组对象。</param>
            <returns>元素数量。</returns>
        </member>
        <member name="M:Sqlx.GroupingExtensions.Sum``3(Sqlx.IGrouping{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            计算分组中元素的总和。
            </summary>
            <typeparam name="TKey">分组键的类型。</typeparam>
            <typeparam name="TElement">元素的类型。</typeparam>
            <typeparam name="TResult">结果的类型。</typeparam>
            <param name="grouping">分组对象。</param>
            <param name="selector">选择器表达式。</param>
            <returns>总和值。</returns>
        </member>
        <member name="M:Sqlx.GroupingExtensions.Average``2(Sqlx.IGrouping{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Double}})">
            <summary>
            计算分组中元素的平均值（double类型）。
            </summary>
            <typeparam name="TKey">分组键的类型。</typeparam>
            <typeparam name="TElement">元素的类型。</typeparam>
            <param name="grouping">分组对象。</param>
            <param name="selector">选择器表达式。</param>
            <returns>平均值。</returns>
        </member>
        <member name="M:Sqlx.GroupingExtensions.Average``2(Sqlx.IGrouping{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Decimal}})">
            <summary>
            计算分组中元素的平均值（decimal类型）。
            </summary>
            <typeparam name="TKey">分组键的类型。</typeparam>
            <typeparam name="TElement">元素的类型。</typeparam>
            <param name="grouping">分组对象。</param>
            <param name="selector">选择器表达式。</param>
            <returns>平均值。</returns>
        </member>
        <member name="M:Sqlx.GroupingExtensions.Max``3(Sqlx.IGrouping{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            获取分组中元素的最大值。
            </summary>
            <typeparam name="TKey">分组键的类型。</typeparam>
            <typeparam name="TElement">元素的类型。</typeparam>
            <typeparam name="TResult">结果的类型。</typeparam>
            <param name="grouping">分组对象。</param>
            <param name="selector">选择器表达式。</param>
            <returns>最大值。</returns>
        </member>
        <member name="M:Sqlx.GroupingExtensions.Min``3(Sqlx.IGrouping{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            获取分组中元素的最小值。
            </summary>
            <typeparam name="TKey">分组键的类型。</typeparam>
            <typeparam name="TElement">元素的类型。</typeparam>
            <typeparam name="TResult">结果的类型。</typeparam>
            <param name="grouping">分组对象。</param>
            <param name="selector">选择器表达式。</param>
            <returns>最小值。</returns>
        </member>
        <member name="T:Sqlx.ExpressionToSqlBase">
            <summary>
            Abstract base class for ExpressionToSql with common expression parsing and database dialect adaptation
            </summary>
        </member>
        <member name="F:Sqlx.ExpressionToSqlBase._parameterized">
            <summary>
            Whether to use parameterized query mode (default: false - inline constant values)
            </summary>
        </member>
        <member name="F:Sqlx.ExpressionToSqlBase._counter">
            <summary>
            Parameter counter for generating unique parameter names
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.#ctor(Sqlx.SqlDialect,System.Type)">
            <summary>
            Initializes new instance with specified SQL dialect
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.AddGroupBy(System.String)">
            <summary>
            Adds GROUP BY clause (internal use)
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.AddGroupByColumn(System.String)">
            <summary>
            Adds GROUP BY column name (internal use)
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetWhereConditions">
            <summary>
            Gets WHERE conditions (internal use)
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.CopyWhereConditions(System.Collections.Generic.List{System.String})">
            <summary>
            Copies WHERE conditions (internal use)
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetHavingConditions">
            <summary>
            Gets HAVING conditions (internal use)
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.CopyHavingConditions(System.Collections.Generic.List{System.String})">
            <summary>
            Copies HAVING conditions (internal use)
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.AddHavingCondition(System.String)">
            <summary>
            Adds HAVING condition (internal use)
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.SetTableName(System.String)">
            <summary>
            Sets table name
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseExpression(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Enhanced expression parsing with support for math functions, string functions, and nested expressions (performance optimized)
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseExpressionRaw(System.Linq.Expressions.Expression)">
            <summary>
            Parses expression without special boolean member handling (for use within binary expressions)
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseConditionalExpression(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Parses conditional expression (ternary operator)
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Enhanced method call expression parsing with support for more nested scenarios
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.IsAggregateContext(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Checks if in aggregate function context
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.IsAnyPlaceholder(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Checks if method call is an Any placeholder
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.CreateParameterForAnyPlaceholder(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Creates parameter for Any placeholder
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetDefaultValue(System.Type)">
            <summary>
            获取类型的默认值（AOT友好）
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetDefaultValueForValueType(System.Type)">
            <summary>
            为值类型获取默认值（AOT友好）
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.CreateDefaultValueSafely(System.Type)">
            <summary>
            安全地创建类型的默认值（AOT友好）
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseAggregateMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            解析聚合函数中的方法调用，支持嵌套函数
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseLambdaExpression(System.Linq.Expressions.Expression)">
            <summary>
            增强的Lambda表达式解析，支持复杂的嵌套函数
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.TryParseBooleanComparison(System.Linq.Expressions.BinaryExpression)">
            <summary>
            尝试解析布尔比较，返回 null 如果不是布尔比较
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            解析二元表达式为SQL字符串
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetColumnName(System.Linq.Expressions.Expression)">
            <summary>
            获取表达式对应的列名
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetConstantValue(System.Linq.Expressions.ConstantExpression)">
            <summary>
            获取常量表达式的值
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.IsEntityProperty(System.Linq.Expressions.MemberExpression)">
            <summary>
            检查成员表达式是否是实体属性（而不是闭包变量）
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetMemberValueOptimized(System.Linq.Expressions.MemberExpression)">
            <summary>
            AOT 友好的成员值获取，避免反射
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetSimpleDefaultValue(System.Type)">
            <summary>
            获取简单的默认值（不使用复杂反射）
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetDefaultValueForMemberType(System.Type)">
            <summary>
            获取成员类型的默认值（AOT友好）
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.FormatConstantValue``1(``0)">
            <summary>
            格式化常量值为SQL字符串（泛型版本）。
            </summary>
            <typeparam name="T">值的类型。</typeparam>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.FormatConstantValue(System.Object)">
            <summary>
            格式化常量值为SQL字符串。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.CreateParameter``1(``0)">
            <summary>
            创建数据库参数并返回参数占位符（泛型版本）
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.CreateParameter(System.Object)">
            <summary>
            创建数据库参数并返回参数占位符（兼容版本）
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.NeedsParentheses(System.Linq.Expressions.Expression)">
            <summary>判断表达式是否需要括号包围</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.RemoveOuterParentheses(System.String)">
            <summary>移除字符串外层的括号</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.IsBooleanMember(System.Linq.Expressions.Expression)">
            <summary>检查表达式是否是布尔成员</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.IsConstantTrue(System.Linq.Expressions.Expression)">
            <summary>检查表达式是否是常量 true</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.IsConstantFalse(System.Linq.Expressions.Expression)">
            <summary>检查表达式是否是常量 false</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.IsStringPropertyAccess(System.Linq.Expressions.MemberExpression)">
            <summary>检查是否是字符串属性访问</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.IsStringConcatenation(System.Linq.Expressions.BinaryExpression)">
            <summary>检查是否是字符串连接操作</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseStringProperty(System.Linq.Expressions.MemberExpression)">
            <summary>解析字符串属性访问</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseNotExpression(System.Linq.Expressions.Expression)">
            <summary>
            解析 NOT 表达式，正确处理布尔类型
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.FormatLogicalExpression(System.String,System.String,System.String,System.Linq.Expressions.BinaryExpression)">
            <summary>
            格式化逻辑表达式（AND/OR），确保布尔成员正确处理
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ExtractColumns(System.Linq.Expressions.Expression)">
            <summary>
            从表达式中提取列名列表
            </summary>
        </member>
        <member name="P:Sqlx.ExpressionToSqlBase.DbType">
            <summary>
            Gets database type (type-safe enum version)
            </summary>
        </member>
        <member name="P:Sqlx.ExpressionToSqlBase.DatabaseType">
            <summary>
            Gets database type (string version for backward compatibility)
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetConcatSyntax(System.String[])">
            <summary>
            获取字符串连接语法
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseMathFunction(System.Linq.Expressions.MethodCallExpression,System.String)">
            <summary>
            解析数学函数调用表达式。
            </summary>
            <returns>SQL函数字符串。</returns>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseStringFunction(System.Linq.Expressions.MethodCallExpression,System.String)">
            <summary>
            解析字符串函数调用表达式。
            </summary>
            <returns>SQL函数字符串。</returns>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseDateTimeFunction(System.Linq.Expressions.MethodCallExpression,System.String)">
            <summary>
            解析日期时间函数调用表达式（简化版本）
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetOperatorFunction(System.String,System.String,System.String)">
            <summary>
            简化的操作符处理
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetBinaryOperatorSql(System.Linq.Expressions.ExpressionType,System.String,System.String,System.Linq.Expressions.BinaryExpression)">
            <summary>
            获取二元操作的SQL
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetBinaryOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            获取二元操作的SQL操作符
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ToSql">
            <summary>
            转换为 SQL 字符串。子类必须实现此方法。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ToTemplate">
            <summary>
            转换为 SQL 模板。子类必须实现此方法。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.Dispose">
            <summary>释放资源。</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ClearGlobalCache">
            <summary>
            清理全局缓存。
            </summary>
        </member>
        <member name="T:Sqlx.ColumnSelectionMode">
            <summary>
            Column selection modes for smart queries
            </summary>
        </member>
        <member name="F:Sqlx.ColumnSelectionMode.All">
            <summary>Select all columns</summary>
        </member>
        <member name="F:Sqlx.ColumnSelectionMode.BasicFieldsOnly">
            <summary>Select only basic fields</summary>
        </member>
        <member name="F:Sqlx.ColumnSelectionMode.OptimizedForQuery">
            <summary>Optimized for query performance</summary>
        </member>
        <member name="F:Sqlx.ColumnSelectionMode.IncludeComputed">
            <summary>Include computed columns</summary>
        </member>
        <member name="T:Sqlx.SqlTemplateExpressionBridge`1">
            <summary>
            Bridge between SQL templates and expression trees for seamless integration
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge`1.Create">
            <summary>
            Creates a new bridge instance
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge`1.Create(Sqlx.SqlDialect)">
            <summary>
            Creates a new bridge instance with dialect
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge`1.SmartSelect(Sqlx.ColumnSelectionMode)">
            <summary>
            Smart selection with column mode
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge`1.SmartSelect">
            <summary>
            Smart selection with default mode
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge`1.DynamicWhere(System.Object)">
            <summary>
            Dynamic where clause
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge`1.DynamicWhere(System.String,System.Object,System.Object)">
            <summary>
            Dynamic where clause with template and parameters
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge`1.Template(System.String)">
            <summary>
            Adds a template string
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge`1.Template(System.String,System.Object)">
            <summary>
            Adds a template string with parameters
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge`1.Parameter(System.String,System.Object)">
            <summary>
            Adds a parameter
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds WHERE condition
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge`1.ToTemplate">
            <summary>
            Converts to SQL template
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge`1.Build">
            <summary>
            Builds the final SQL query
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge`1.ToSql">
            <summary>
            Converts to SQL string
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge`1.Dispose">
            <summary>
            Disposes the bridge resources
            </summary>
        </member>
        <member name="T:Sqlx.SqlTemplateExpressionBridge">
            <summary>
            Non-generic version for static access
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge.Create``1">
            <summary>
            Creates a new bridge instance for the specified type
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge.Create``1(Sqlx.SqlDialect)">
            <summary>
            Creates a new bridge instance for the specified type with dialect
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge.Template(System.String)">
            <summary>
            Creates a template with SQL string
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge.Template(System.String,System.Object)">
            <summary>
            Creates a template with SQL string and parameters
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExpressionBridge.Template(System.String,System.Object,Sqlx.SqlTemplateOptions)">
            <summary>
            Creates a template with SQL string, parameters, and options
            </summary>
        </member>
        <member name="T:Sqlx.FluentSqlBuilder`1">
            <summary>
            Fluent SQL builder for complex queries
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.SmartSelect(Sqlx.ColumnSelectionMode)">
            <summary>
            Smart selection with column mode
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds WHERE condition
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.ToTemplate">
            <summary>
            Converts to SQL template
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.AddIf(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds a condition if the predicate is true
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.AddIf(System.Boolean,System.String)">
            <summary>
            Adds a condition if the predicate is true (string version)
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds order by clause
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.TemplateIf(System.Boolean,System.String)">
            <summary>
            Adds a template if condition is true
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.DynamicWhere(System.Object)">
            <summary>
            Dynamic where clause
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.SelectByPattern(System.String)">
            <summary>
            Select by pattern
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.Parameter(System.String,System.Object)">
            <summary>
            Adds a parameter
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.Take(System.Int32)">
            <summary>
            Limits the number of results
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.WhereIf(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds WHERE condition if predicate is true
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.Build">
            <summary>
            Builds the final SQL query
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.ToSql">
            <summary>
            Converts to SQL string
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder`1.Dispose">
            <summary>
            Disposes the builder resources
            </summary>
        </member>
        <member name="T:Sqlx.FluentSqlBuilder">
            <summary>
            Non-generic fluent SQL builder
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder.Query``1">
            <summary>
            Creates a query builder for the specified type
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder.Query``1(System.String)">
            <summary>
            Creates a query builder for the specified type with SQL
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder.SmartQuery``1">
            <summary>
            Creates a smart query builder for the specified type
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder.SmartQuery``1(System.String)">
            <summary>
            Creates a smart query builder for the specified type with SQL
            </summary>
        </member>
        <member name="M:Sqlx.FluentSqlBuilder.HybridQuery``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Creates a hybrid query combining templates and expressions
            </summary>
        </member>
        <member name="T:Sqlx.PerformanceMetric">
            <summary>
            Represents a performance metric with various properties
            </summary>
        </member>
        <member name="P:Sqlx.PerformanceMetric.ExecutionCount">
            <summary>Number of executions</summary>
        </member>
        <member name="P:Sqlx.PerformanceMetric.AverageExecutionTime">
            <summary>Average execution time</summary>
        </member>
        <member name="P:Sqlx.PerformanceMetric.AverageSqlLength">
            <summary>Average SQL length</summary>
        </member>
        <member name="P:Sqlx.PerformanceMetric.AverageParameterCount">
            <summary>Average parameter count</summary>
        </member>
        <member name="T:Sqlx.SqlTemplateMetrics">
            <summary>
            SQL template performance metrics
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateMetrics.Reset">
            <summary>
            Resets all performance metrics
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateMetrics.ClearMetrics">
            <summary>
            Clears all metrics
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateMetrics.RecordMetric(System.String,System.Double)">
            <summary>
            Records a metric
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateMetrics.RecordMetric(System.String,System.Double,System.String,System.String)">
            <summary>
            Records a performance metric with additional context
            </summary>
            <param name="metricName">Name of the metric</param>
            <param name="value">Metric value</param>
            <param name="category">Metric category</param>
            <param name="tags">Additional tags</param>
        </member>
        <member name="M:Sqlx.SqlTemplateMetrics.RecordMetric(System.String,System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Records a performance metric with TimeSpan value
            </summary>
            <param name="metricName">Name of the metric</param>
            <param name="value">TimeSpan value</param>
            <param name="category">Metric category</param>
            <param name="tags">Additional tags</param>
        </member>
        <member name="M:Sqlx.SqlTemplateMetrics.GetMetrics">
            <summary>
            Gets metrics
            </summary>
        </member>
        <member name="P:Sqlx.SqlTemplateMetrics.CacheHitRatio">
            <summary>
            Gets the cache hit ratio
            </summary>
        </member>
        <member name="P:Sqlx.SqlTemplateMetrics.CachedTemplates">
            <summary>
            Gets the number of templates cached
            </summary>
        </member>
        <member name="T:Sqlx.SqlTemplateExtensions">
            <summary>
            Extension methods for SqlTemplate
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.Precompile(Sqlx.SqlTemplate)">
            <summary>
            Precompiles a SQL template for better performance
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.WithParameters(Sqlx.SqlTemplate,System.Object)">
            <summary>
            Adds parameters to a SQL template
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.Execute(System.Func{System.Object,Sqlx.ParameterizedSql},System.Object)">
            <summary>
            Executes a compiled template function
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.Build``1(Sqlx.SqlTemplateExpressionBridge{``0})">
            <summary>
            Adds Build method to SqlTemplateExpressionBridge
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.ExcludeColumns``1(Sqlx.SqlTemplateExpressionBridge{``0},System.String[])">
            <summary>
            Adds ExcludeColumns method to SqlTemplateExpressionBridge
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.ExcludeColumns``1(Sqlx.FluentSqlBuilder{``0},System.String[])">
            <summary>
            Adds ExcludeColumns method to FluentSqlBuilder
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.Template``1(Sqlx.SqlTemplateExpressionBridge{``0})">
            <summary>
            Adds Template property access to SqlTemplateExpressionBridge
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.HybridQuery``1(Sqlx.SqlTemplateExpressionBridge{``0})">
            <summary>
            Adds HybridQuery method to SqlTemplateExpressionBridge
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.TemplateIf``1(Sqlx.SqlTemplateExpressionBridge{``0},System.Boolean,System.String)">
            <summary>
            Adds TemplateIf method to SqlTemplateExpressionBridge
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.OrderBy``2(Sqlx.SqlTemplateExpressionBridge{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds OrderBy method to SqlTemplateExpressionBridge
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.Take``1(Sqlx.SqlTemplateExpressionBridge{``0},System.Int32)">
            <summary>
            Adds Take method to SqlTemplateExpressionBridge
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.AppendIf(Sqlx.SqlTemplate,System.Boolean,System.String)">
            <summary>
            Adds AppendIf method to SqlTemplate
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.AppendIf(Sqlx.SqlTemplate,System.Boolean,System.String,System.Object)">
            <summary>
            Adds AppendIf method to SqlTemplate with parameters
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.SelectByPattern``1(Sqlx.FluentSqlBuilder{``0},System.String,System.Object)">
            <summary>
            Adds SelectByPattern method for queries
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.DynamicWhere``1(Sqlx.FluentSqlBuilder{``0},System.String,System.Object,System.Object)">
            <summary>
            Adds DynamicWhere method with additional parameters
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.AddIf``1(Sqlx.FluentSqlBuilder{``0},System.Boolean,System.String,System.Object)">
            <summary>
            Adds AddIf method with three parameters
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.Query``1(Sqlx.FluentSqlBuilder{``0},System.String)">
            <summary>
            Adds Query method with single parameter
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.SmartQuery``1(System.String)">
            <summary>
            Adds SmartQuery method with single parameter
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.ToTemplate(Sqlx.ParameterizedSql)">
            <summary>
            Converts ParameterizedSql to SqlTemplate (for compatibility)
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateExtensions.WithParameters(Sqlx.ParameterizedSql,System.Object)">
            <summary>
            Adds WithParameters method to ParameterizedSql
            </summary>
        </member>
        <member name="T:Sqlx.ParameterizedSql">
            <summary>
            Represents a parameterized SQL statement with SQL text and parameter values
            This is an execution-time instance, not a reusable template definition
            </summary>
        </member>
        <member name="M:Sqlx.ParameterizedSql.#ctor(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Represents a parameterized SQL statement with SQL text and parameter values
            This is an execution-time instance, not a reusable template definition
            </summary>
        </member>
        <member name="F:Sqlx.ParameterizedSql.Empty">
            <summary>
            Empty ParameterizedSql instance
            </summary>
        </member>
        <member name="M:Sqlx.ParameterizedSql.CreateWithDictionary(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates parameterized SQL using dictionary
            </summary>
            <param name="sql">SQL statement</param>
            <param name="parameters">Parameter dictionary</param>
            <returns>ParameterizedSql instance</returns>
        </member>
        <member name="M:Sqlx.ParameterizedSql.Create(System.String,System.Object)">
            <summary>
            Creates parameterized SQL using anonymous object
            </summary>
            <param name="sql">SQL statement</param>
            <param name="parameters">Parameter object</param>
            <returns>ParameterizedSql instance</returns>
        </member>
        <member name="M:Sqlx.ParameterizedSql.Render">
            <summary>
            Renders to final SQL string with inlined parameters
            </summary>
            <returns>Rendered SQL string</returns>
        </member>
        <member name="M:Sqlx.ParameterizedSql.Contains(System.String)">
            <summary>
            Checks if the SQL contains a specific substring
            </summary>
            <param name="value">The substring to search for</param>
            <returns>True if the SQL contains the substring</returns>
        </member>
        <member name="M:Sqlx.ParameterizedSql.ToString">
            <summary>
            Returns a string representation of the ParameterizedSql.
            </summary>
        </member>
        <member name="T:Sqlx.SqlParameterRenderer">
            <summary>
            SQL parameter renderer for inlining parameters into SQL
            </summary>
        </member>
        <member name="T:Sqlx.SimpleOperationInferrer">
            <summary>
            Simple operation inferrer for SQL template analysis
            </summary>
        </member>
        <member name="M:Sqlx.SimpleOperationInferrer.InferFromSql(System.String)">
            <summary>
            Infers SQL operation type from SQL text
            </summary>
            <param name="sql">SQL text to analyze</param>
            <returns>Inferred SQL operation type</returns>
        </member>
        <member name="M:Sqlx.SimpleOperationInferrer.InferFromMethodName(System.String)">
            <summary>
            Infers SQL operation type from method name
            </summary>
            <param name="methodName">Method name to analyze</param>
            <returns>Inferred SQL operation type</returns>
        </member>
        <member name="M:Sqlx.SimpleOperationInferrer.IsComplexSql(System.String)">
            <summary>
            Analyzes SQL for complexity
            </summary>
            <param name="sql">SQL to analyze</param>
            <returns>True if SQL is complex</returns>
        </member>
        <member name="T:Sqlx.ExpressionToSqlCrudExtensions">
            <summary>
            CRUD extensions for ExpressionToSql
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.ToInsertSql``1(Sqlx.ExpressionToSql{``0})">
            <summary>
            Generates INSERT SQL for the entity
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.ToUpdateSql``1(Sqlx.ExpressionToSql{``0})">
            <summary>
            Generates UPDATE SQL for the entity
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.ToDeleteSql``1(Sqlx.ExpressionToSql{``0})">
            <summary>
            Generates DELETE SQL for the entity
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.ToSelectSql``1(Sqlx.ExpressionToSql{``0})">
            <summary>
            Generates SELECT SQL for the entity
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.CreateInsertBuilder``1">
            <summary>
            Creates an insert builder
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.CreateUpdateBuilder``1">
            <summary>
            Creates an update builder
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.CreateDeleteBuilder``1">
            <summary>
            Creates a delete builder
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.CreateSelectBuilder``1">
            <summary>
            Creates a select builder
            </summary>
        </member>
        <member name="T:Sqlx.DatabaseType">
            <summary>
            Database types enumeration for type-safe database selection
            </summary>
        </member>
        <member name="F:Sqlx.DatabaseType.SqlServer">
            <summary>Microsoft SQL Server</summary>
        </member>
        <member name="F:Sqlx.DatabaseType.MySql">
            <summary>MySQL database</summary>
        </member>
        <member name="F:Sqlx.DatabaseType.PostgreSql">
            <summary>PostgreSQL database</summary>
        </member>
        <member name="F:Sqlx.DatabaseType.SQLite">
            <summary>SQLite database</summary>
        </member>
        <member name="F:Sqlx.DatabaseType.Oracle">
            <summary>Oracle database</summary>
        </member>
        <member name="F:Sqlx.DatabaseType.DB2">
            <summary>DB2 database</summary>
        </member>
        <member name="T:Sqlx.SqlDefine">
            <summary>
            Database dialect definitions for mainstream databases (AOT-friendly)
            </summary>
        </member>
        <member name="F:Sqlx.SqlDefine.SqlServer">
            <summary>SQL Server: [column] with @ parameters</summary>
        </member>
        <member name="F:Sqlx.SqlDefine.MySql">
            <summary>MySQL: `column` with @ parameters</summary>
        </member>
        <member name="F:Sqlx.SqlDefine.PostgreSql">
            <summary>PostgreSQL: "column" with $ parameters</summary>
        </member>
        <member name="F:Sqlx.SqlDefine.PgSql">
            <summary>PostgreSQL: "column" with $ parameters (alias)</summary>
        </member>
        <member name="F:Sqlx.SqlDefine.SQLite">
            <summary>SQLite: [column] with $ parameters</summary>
        </member>
        <member name="F:Sqlx.SqlDefine.Sqlite">
            <summary>SQLite: [column] with $ parameters (alias)</summary>
        </member>
        <member name="F:Sqlx.SqlDefine.Oracle">
            <summary>Oracle: "column" with : parameters</summary>
        </member>
        <member name="F:Sqlx.SqlDefine.DB2">
            <summary>DB2: "column" with ? parameters</summary>
        </member>
        <member name="M:Sqlx.SqlDefine.GetDialect(Sqlx.DatabaseType)">
            <summary>
            Gets database dialect for mainstream databases (type-safe enum version)
            </summary>
        </member>
        <member name="M:Sqlx.SqlDefine.GetDialect(System.String)">
            <summary>
            Gets database dialect for mainstream databases (string version for backward compatibility)
            </summary>
        </member>
        <member name="T:Sqlx.SqlDialect">
            <summary>
            Represents a SQL dialect configuration with enhanced functionality.
            </summary>
        </member>
        <member name="M:Sqlx.SqlDialect.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Represents a SQL dialect configuration with enhanced functionality.
            </summary>
        </member>
        <member name="M:Sqlx.SqlDialect.WrapColumn(System.String)">
            <summary>Wraps a column name with dialect-specific delimiters.</summary>
        </member>
        <member name="M:Sqlx.SqlDialect.WrapString(System.String)">
            <summary>Wraps a string value with dialect-specific delimiters.</summary>
        </member>
        <member name="M:Sqlx.SqlDialect.CreateParameter(System.String)">
            <summary>Creates a parameter with dialect-specific prefix.</summary>
        </member>
        <member name="M:Sqlx.SqlDialect.EscapeString(System.String)">
            <summary>Escapes special characters in string values.</summary>
        </member>
        <member name="P:Sqlx.SqlDialect.DatabaseType">
            <summary>Gets database type (simplified version)</summary>
        </member>
        <member name="P:Sqlx.SqlDialect.DbType">
            <summary>Gets database type enum (type-safe version)</summary>
        </member>
        <member name="M:Sqlx.SqlDialect.GetConcatFunction(System.String[])">
            <summary>Gets string concatenation syntax</summary>
        </member>
        <member name="M:Sqlx.SqlDialect.GetLimitClause(System.Int32,System.Int32)">
            <summary>Gets pagination syntax</summary>
        </member>
        <member name="T:Sqlx.SqlDialectType">
            <summary>
            SQL dialect type enumeration
            </summary>
        </member>
        <member name="F:Sqlx.SqlDialectType.SqlServer">
            <summary>SQL Server dialect</summary>
        </member>
        <member name="F:Sqlx.SqlDialectType.MySql">
            <summary>MySQL dialect</summary>
        </member>
        <member name="F:Sqlx.SqlDialectType.PostgreSql">
            <summary>PostgreSQL dialect</summary>
        </member>
        <member name="F:Sqlx.SqlDialectType.SQLite">
            <summary>SQLite dialect</summary>
        </member>
        <member name="F:Sqlx.SqlDialectType.Oracle">
            <summary>Oracle dialect</summary>
        </member>
        <member name="F:Sqlx.SqlDialectType.DB2">
            <summary>DB2 dialect</summary>
        </member>
        <member name="T:Sqlx.SqlTemplateOptions">
            <summary>
            SQL template options for configuration
            </summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.Dialect">
            <summary>SQL dialect type</summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.UseCache">
            <summary>Whether to use cache</summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.ValidateParameters">
            <summary>Whether to validate parameters</summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.UseParameterizedQueries">
            <summary>Whether to use parameterized queries</summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.SafeMode">
            <summary>Whether to enable safe mode</summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.EnableCaching">
            <summary>Whether to enable caching</summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.CustomFunctions">
            <summary>Custom functions dictionary</summary>
        </member>
        <member name="M:Sqlx.SqlTemplateOptions.ForSqlServer">
            <summary>Creates options for SQL Server</summary>
        </member>
        <member name="M:Sqlx.SqlTemplateOptions.ForMySql">
            <summary>Creates options for MySQL</summary>
        </member>
        <member name="M:Sqlx.SqlTemplateOptions.ForPostgreSQL">
            <summary>Creates options for PostgreSQL</summary>
        </member>
        <member name="M:Sqlx.SqlTemplateOptions.ForSQLite">
            <summary>Creates options for SQLite</summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.Default">
            <summary>Default options</summary>
        </member>
        <member name="T:Sqlx.SqlTemplate">
            <summary>
            编译时 SQL 模板 - 提供安全的参数化查询功能
            动态 SQL 功能已迁移到 ExpressionToSql，此类专注于编译时安全性
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplate.#ctor(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            编译时 SQL 模板 - 提供安全的参数化查询功能
            动态 SQL 功能已迁移到 ExpressionToSql，此类专注于编译时安全性
            </summary>
        </member>
        <member name="F:Sqlx.SqlTemplate.Empty">
            <summary>Empty SQL template</summary>
        </member>
        <member name="M:Sqlx.SqlTemplate.Parse(System.String)">
            <summary>
            创建编译时安全的 SQL 模板（推荐使用 SqlTemplateAttribute）
            </summary>
            <param name="sql">SQL 字符串</param>
            <returns>模板定义</returns>
        </member>
        <member name="M:Sqlx.SqlTemplate.Execute(System.Object)">
            <summary>
            Executes template with bound parameters
            </summary>
            <param name="parameters">Parameter object</param>
            <returns>Parameterized SQL</returns>
        </member>
        <member name="M:Sqlx.SqlTemplate.Execute(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes template with dictionary parameters
            </summary>
            <param name="parameters">Parameter dictionary</param>
            <returns>Parameterized SQL</returns>
        </member>
        <member name="M:Sqlx.SqlTemplate.Bind">
            <summary>
            Creates fluent parameter binder
            </summary>
            <returns>Parameter binder</returns>
        </member>
        <member name="P:Sqlx.SqlTemplate.IsPureTemplate">
            <summary>
            Checks if this is a pure template
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplate.Render(System.Object)">
            <summary>
            Renders template with parameters (instance method)
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplate.Render(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Renders template with parameter dictionary (instance method)
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplate.ToString">
            <summary>
            String representation
            </summary>
        </member>
        <member name="T:Sqlx.SqlTemplateBuilder">
            <summary>
            Fluent parameter binder
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateBuilder.Param``1(System.String,``0)">
            <summary>
            Binds parameter
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateBuilder.Params(System.Object)">
            <summary>
            Batch binds parameters (AOT-friendly)
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateBuilder.Build">
            <summary>
            Builds final SQL
            </summary>
        </member>
        <member name="T:Sqlx.SqlTemplateSafetyValidator">
            <summary>
            SQL 模板安全性验证器，用于编译时检查 SQL 注入风险
            </summary>
        </member>
        <member name="F:Sqlx.SqlTemplateSafetyValidator.DangerousPatterns">
            <summary>
            危险的 SQL 关键字模式
            </summary>
        </member>
        <member name="F:Sqlx.SqlTemplateSafetyValidator.CompiledPatterns">
            <summary>
            编译的正则表达式缓存
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateSafetyValidator.ValidateSqlTemplate(System.String)">
            <summary>
            验证 SQL 模板的安全性
            </summary>
            <param name="sqlTemplate">SQL 模板字符串</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Sqlx.SqlTemplateSafetyValidator.ValidateParameterPlaceholders(System.String)">
            <summary>
            验证参数占位符格式
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateSafetyValidator.ValidateSqlStructure(System.String)">
            <summary>
            验证 SQL 语句结构
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateSafetyValidator.ExtractParameterNames(System.String)">
            <summary>
            提取 SQL 模板中的参数名
            </summary>
            <param name="sqlTemplate">SQL 模板</param>
            <returns>参数名列表</returns>
        </member>
        <member name="T:Sqlx.SqlSafetyValidationResult">
            <summary>
            SQL 安全性验证结果
            </summary>
        </member>
        <member name="P:Sqlx.SqlSafetyValidationResult.IsValid">
            <summary>
            是否通过验证
            </summary>
        </member>
        <member name="P:Sqlx.SqlSafetyValidationResult.ErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Sqlx.SqlSafetyValidationResult.Violations">
            <summary>
            违规详情列表
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
    </members>
</doc>
