<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sqlx.Tests</name>
    </assembly>
    <members>
        <member name="T:Sqlx.Tests.CodeGenerationTestBase">
            <summary>
            Base class for code generation tests using C# source generator.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.CodeGenerationTestBase.GetCSharpGeneratedOutput(System.String)">
            <summary>
            Compiles C# source code and runs the Sqlx source generator on it.
            </summary>
            <param name="source">The C# source code to compile.</param>
            <returns>The generated code output.</returns>
        </member>
        <member name="M:Sqlx.Tests.CodeGenerationTestBase.GetCSharpGeneratedOutput(System.String,Microsoft.CodeAnalysis.NullableContextOptions)">
            <summary>
            Compiles C# source code and runs the Sqlx source generator on it.
            </summary>
            <param name="source">The C# source code to compile.</param>
            <param name="nullableOptions">The nullable reference types options.</param>
            <returns>The generated code output.</returns>
        </member>
        <member name="M:Sqlx.Tests.CodeGenerationTestBase.VerifyCSharp(System.String)">
            <summary>
            Verifies C# code compiles and generates code successfully.
            </summary>
            <param name="source">The C# source code to verify.</param>
        </member>
        <member name="M:Sqlx.Tests.CodeGenerationTestBase.VerifyCSharp(System.String,Microsoft.CodeAnalysis.NullableContextOptions)">
            <summary>
            Verifies C# code compiles and generates code successfully.
            </summary>
            <param name="source">The C# source code to verify.</param>
            <param name="nullableOptions">The nullable reference types options.</param>
        </member>
        <member name="M:Sqlx.Tests.CodeGenerationTestBase.Compile(System.String,Microsoft.CodeAnalysis.NullableContextOptions)">
            <summary>
            Compiles C# source code and runs the Sqlx source generator on it.
            </summary>
            <param name="source">The C# source code to compile.</param>
            <param name="nullableOptions">The nullable reference types options.</param>
            <returns>The generated code output.</returns>
        </member>
        <member name="M:Sqlx.Tests.CodeGenerationTestBase.SafeAddAssemblyReference(System.Collections.Generic.List{Microsoft.CodeAnalysis.MetadataReference},System.String)">
            <summary>
            Safely adds an assembly reference to the list, ignoring if the assembly is not found.
            </summary>
            <param name="references">The reference list to add to.</param>
            <param name="assemblyName">The name of the assembly to load.</param>
        </member>
        <member name="M:Sqlx.Tests.CodeGenerationTestBase.AddRequiredUsingStatements(System.String)">
            <summary>
            Adds required using statements to the source code if not already present.
            </summary>
            <param name="source">The C# source code.</param>
            <returns>The source code with required using statements.</returns>
        </member>
        <member name="M:Sqlx.Tests.CodeGenerationTestBase.CodeGeneration_BaseFunctionality_WorksCorrectly">
            <summary>
            Tests that the code generation base functionality works correctly.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.CodeGenerationTestBase.CodeGeneration_MissingAttributes_HandlesGracefully">
            <summary>
            Tests that the code generation handles missing attributes gracefully.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.CodeGenerationTestBase.CodeGeneration_NullSymbols_HandlesGracefully">
            <summary>
            Tests that the code generation handles null symbols gracefully.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.CodeGenerationTestBase.CodeGeneration_EmptyMethodList_HandlesGracefully">
            <summary>
            Tests that the code generation handles empty method lists gracefully.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.CodeGenerationTestBase.CodeGeneration_MultipleClasses_HandlesCorrectly">
            <summary>
            Tests that the code generation handles multiple classes correctly.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.CodeGenerationTestBase.CreateCompilation(System.String)">
            <summary>
            Creates a compilation from source code for testing.
            </summary>
            <param name="source">The source code to compile.</param>
            <returns>A compilation object.</returns>
        </member>
        <member name="T:Sqlx.Tests.Core.AbstractGeneratorAdvancedTests">
            <summary>
            Advanced tests for AbstractGenerator class covering architecture and design patterns.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.CodeGenerationHelperTests">
            <summary>
            测试代码生成相关的辅助方法，提高覆盖率
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.TestableCodeGenerator">
            <summary>
            测试用的代码生成器，实现未覆盖方法的简化版本
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.CodeGenerationValidationTests">
            <summary>
            代码生成验证测试 - 验证生成的代码符合优化要求
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.CodeGenerationValidationTests.DisplayStringRegex">
            <remarks>
            Pattern:<br/>
            <code>var \\w+.*=.*\\.ToDisplayString\\(\\)</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [Vv].<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match a character in the set [Rr].<br/>
            ○ Match ' '.<br/>
            ○ Match a word character greedily at least once.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match '='.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match '.'.<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match a character in the set [Oo].<br/>
            ○ Match a character in the set [Dd].<br/>
            ○ Match a character in the set [Ii\u0130].<br/>
            ○ Match a character in the set [Ss].<br/>
            ○ Match a character in the set [Pp].<br/>
            ○ Match a character in the set [Ll].<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match a character in the set [Yy].<br/>
            ○ Match a character in the set [Ss].<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match a character in the set [Rr].<br/>
            ○ Match a character in the set [Ii\u0130].<br/>
            ○ Match a character in the set [Nn].<br/>
            ○ Match a character in the set [Gg].<br/>
            ○ Match the string "()".<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Sqlx.Tests.Core.CodeGenerationValidationTests.CodeGenValidationRegex">
            <remarks>
            Pattern:<br/>
            <code>(System\\.)?Convert\\.To\\w+</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Optional (greedy).<br/>
                ○ 1st capture group.<br/>
                    ○ Match a character in the set [Ss].<br/>
                    ○ Match a character in the set [Yy].<br/>
                    ○ Match a character in the set [Ss].<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Match a character in the set [Ee].<br/>
                    ○ Match a character in the set [Mm].<br/>
                    ○ Match '.'.<br/>
            ○ Match a character in the set [Cc].<br/>
            ○ Match a character in the set [Oo].<br/>
            ○ Match a character in the set [Nn].<br/>
            ○ Match a character in the set [Vv].<br/>
            ○ Match a character in the set [Ee].<br/>
            ○ Match a character in the set [Rr].<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match '.'.<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match a character in the set [Oo].<br/>
            ○ Match a word character atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Sqlx.Tests.Core.CodeQualityValidationTests">
            <summary>
            代码质量验证测试
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.CodeQualityValidationTests.VariableNameRegex">
            <remarks>
            Pattern:<br/>
            <code>^[a-z][a-zA-Z0-9]*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [a-z].<br/>
            ○ Match a character in the set [0-9A-Za-z] atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Sqlx.Tests.Core.ComponentIntegrationTests">
            <summary>
            Simple integration tests that test multiple components working together.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.CSharpGeneratorTests">
            <summary>
            Tests for CSharpGenerator implementation.
            Tests the C#-specific source generator functionality and syntax receiver.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.CSharpGeneratorTests.CSharpGenerator_Initialize_DoesNotThrow">
            <summary>
            Tests that CSharpGenerator initializes correctly.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.CSharpGeneratorTests.CSharpGenerator_WithRepositoryClass_GeneratesImplementation">
            <summary>
            Tests that CSharpGenerator generates code correctly.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.CSharpGeneratorTests.CSharpSyntaxReceiver_CollectsMethods_WithSqlxAttributes">
            <summary>
            Tests that CSharpSyntaxReceiver collects methods with Sqlx attributes.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.CSharpGeneratorTests.CSharpSyntaxReceiver_CollectsRepositoryClasses_WithRepositoryForAttribute">
            <summary>
            Tests that CSharpSyntaxReceiver collects repository classes correctly.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.CSharpGeneratorTests.CSharpGenerator_WithAsyncMethods_GeneratesAsyncImplementations">
            <summary>
            Tests CSharpGenerator with async methods.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.CSharpGeneratorTests.CSharpGenerator_WithGenericMethods_HandlesGenericsCorrectly">
            <summary>
            Tests CSharpGenerator with generic methods and complex types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.CSharpGeneratorTests.CSharpGenerator_WithInvalidCode_HandlesErrorsGracefully">
            <summary>
            Tests CSharpGenerator error handling and diagnostics.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.CSharpGeneratorTests.CompileWithSourceGenerator(System.String)">
            <summary>
            Helper method to compile source code with the Sqlx generator.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.CSharpGeneratorTests.GetBasicReferences">
            <summary>
            Gets basic references needed for compilation.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.DefaultValueGenerationTests">
            <summary>
            专门测试 GetDefaultValueForReturnType 方法，这个方法覆盖率只有37%
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.TestableGeneratorForDefaultValues">
            <summary>
            专门用于测试 GetDefaultValueForReturnType 的 AbstractGenerator 子类
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.DiagnosticGuidanceServiceTests">
            <summary>
            诊断指导服务相关组件的测试
            注意：由于GeneratorExecutionContext是结构体且难以模拟，这里主要测试诊断逻辑组件
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.DiagnosticHelperTests">
            <summary>
            诊断辅助类的全面测试
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.DiagnosticIntegrationTests">
            <summary>
            诊断功能在源生成器中的集成测试
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.DiagnosticIntegrationTests.TestGenerator">
            <summary>
            模拟的源生成器用于测试
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.DiagnosticIntegrationTests.CreateTestCompilation(System.String)">
            <summary>
            创建测试用的编译环境
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.DiagnosticPerformanceAnalysisTests">
            <summary>
            诊断性能分析的全面测试
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.DiagnosticPerformanceAnalysisTests.CreateMethodSymbol(System.String,System.String)">
            <summary>
            创建测试用的方法符号
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.DiagnosticPerformanceAnalysisTests.CreateEntitySymbol(System.String)">
            <summary>
            创建测试用的实体类型符号
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.DiagnosticUsagePatternTests">
            <summary>
            诊断使用模式分析的全面测试
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.DiagnosticUsagePatternTests.CreateMethodSymbol(System.String)">
            <summary>
            创建测试用的方法符号
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.EdgeCaseTests">
            <summary>
            Tests for edge cases and error handling scenarios.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.EnhancedEntityMappingGeneratorTests">
            <summary>
            Tests for EnhancedEntityMappingGenerator.
            Tests enhanced entity mapping with support for primary constructors and records.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.EnhancedEntityMappingGeneratorTests.EnhancedEntityMappingGenerator_WithTraditionalClass_GeneratesCorrectMapping">
            <summary>
            Tests entity mapping generation for traditional classes.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.EnhancedEntityMappingGeneratorTests.EnhancedEntityMappingGenerator_WithRecordType_GeneratesRecordMapping">
            <summary>
            Tests entity mapping generation for Record types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.EnhancedEntityMappingGeneratorTests.EnhancedEntityMappingGenerator_WithPrimaryConstructor_GeneratesPrimaryConstructorMapping">
            <summary>
            Tests entity mapping generation for Primary Constructor classes.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.EnhancedEntityMappingGeneratorTests.EnhancedEntityMappingGenerator_WithEmptyClass_HandlesEmptyClassGracefully">
            <summary>
            Tests entity mapping with empty class (no accessible members).
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.EnhancedEntityMappingGeneratorTests.EnhancedEntityMappingGenerator_WithComplexTypes_HandlesComplexProperties">
            <summary>
            Tests entity mapping with complex types and nullable properties.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.EnhancedEntityMappingGeneratorTests.EnhancedEntityMappingGenerator_WithLargeEntity_PerformsWell">
            <summary>
            Tests performance with large entities (many properties).
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.EnhancedEntityMappingGeneratorTests.EnhancedEntityMappingGenerator_WithVariousNamingConventions_GeneratesCorrectColumnNames">
            <summary>
            Tests column name generation for different property naming conventions.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.EnhancedEntityMappingGeneratorTests.EnhancedEntityMappingGenerator_WithInheritance_HandlesInheritedProperties">
            <summary>
            Tests entity mapping with inheritance scenarios.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.EnhancedEntityMappingGeneratorTests.GetEntityType(System.String,System.String)">
            <summary>
            Helper method to get entity type from source code.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.EnhancedEntityMappingGeneratorTests.GetBasicReferences">
            <summary>
            Gets basic references needed for compilation.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests">
            <summary>
            Advanced tests for ExpressionToSql functionality.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.TestUser">
            <summary>
            Test entity class for ExpressionToSql tests.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_ForSqlServer_CreatesCorrectInstance">
            <summary>
            Tests ExpressionToSql ForSqlServer factory method.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_MySql_CreatesCorrectInstance">
            <summary>
            Tests ExpressionToSql MySql factory method.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_PostgreSql_CreatesCorrectInstance">
            <summary>
            Tests ExpressionToSql PostgreSql factory method.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_SQLite_CreatesCorrectInstance">
            <summary>
            Tests ExpressionToSql SQLite factory method.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_Oracle_CreatesCorrectInstance">
            <summary>
            Tests ExpressionToSql Oracle factory method.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_Where_WithSimpleCondition_ReturnsInstance">
            <summary>
            Tests ExpressionToSql Where method with simple condition.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_Where_WithMultipleConditions_ReturnsInstance">
            <summary>
            Tests ExpressionToSql Where method with multiple conditions.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_OrderBy_ReturnsInstance">
            <summary>
            Tests ExpressionToSql OrderBy method.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_OrderByDescending_ReturnsInstance">
            <summary>
            Tests ExpressionToSql OrderByDescending method.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_Take_ReturnsInstance">
            <summary>
            Tests ExpressionToSql Take method.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_Skip_ReturnsInstance">
            <summary>
            Tests ExpressionToSql Skip method.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_Set_WithConstantValue_ReturnsInstance">
            <summary>
            Tests ExpressionToSql Set method with constant value.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_Set_WithExpression_ReturnsInstance">
            <summary>
            Tests ExpressionToSql Set method with expression.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_ToSelectTemplate_ReturnsValidTemplate">
            <summary>
            Tests ExpressionToSql ToSelectTemplate method.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_ToUpdateTemplate_ReturnsValidTemplate">
            <summary>
            Tests ExpressionToSql ToUpdateTemplate method.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_ToDeleteTemplate_ReturnsValidTemplate">
            <summary>
            Tests ExpressionToSql ToDeleteTemplate method.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_Dispose_DoesNotThrow">
            <summary>
            Tests ExpressionToSql Dispose method.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_Where_WithNullExpression_HandlesGracefully">
            <summary>
            Tests ExpressionToSql with null expression is handled gracefully.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_OrderBy_WithNullExpression_HandlesGracefully">
            <summary>
            Tests ExpressionToSql OrderBy with null expression is handled gracefully.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_ComplexQuery_BuildsCorrectly">
            <summary>
            Tests ExpressionToSql complex query building.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExpressionToSqlAdvancedTests.ExpressionToSql_ComplexUpdateQuery_BuildsCorrectly">
            <summary>
            Tests ExpressionToSql complex update query building.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.ExtensionsTests">
            <summary>
            Tests for Extensions utility class.
            Tests type checking, caching, and utility methods used throughout the framework.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExtensionsTests.Extensions_CanHaveNullValue_DetectsNullableTypes">
            <summary>
            Tests CanHaveNullValue method for various type scenarios.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExtensionsTests.Extensions_TypeChecking_IdentifiesDbConnectionTypes">
            <summary>
            Tests type checking methods for database connection types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExtensionsTests.Extensions_TypeChecking_IdentifiesCommonDatabaseTypes">
            <summary>
            Tests type checking for common database-related types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExtensionsTests.Extensions_TypeChecking_HandlesGenericTypes">
            <summary>
            Tests extensions work with generic types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExtensionsTests.Extensions_EdgeCases_HandledGracefully">
            <summary>
            Tests extension methods handle edge cases gracefully.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExtensionsTests.Extensions_UnusualTypes_DontCrash">
            <summary>
            Tests that extension methods don't crash with unusual types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExtensionsTests.Extensions_PerformanceTest_HandlesManyCalls">
            <summary>
            Tests performance of extension methods with many type checks.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExtensionsTests.GetPropertyTypes(System.String,System.String)">
            <summary>
            Helper method to get property types from a class.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExtensionsTests.GetBasicReferences">
            <summary>
            Gets basic references needed for compilation.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.ExtensionsTests.Assert_DoesNotThrow(System.Action,System.String)">
            <summary>
            Helper method to assert that an action doesn't throw an exception.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.IndentedStringBuilderTests">
            <summary>
            Tests for IndentedStringBuilder utility class.
            Tests string building with automatic indentation management.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.IndentedStringBuilderTests.IndentedStringBuilder_Append_AppendsStringCorrectly">
            <summary>
            Tests basic string building functionality.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.IndentedStringBuilderTests.IndentedStringBuilder_AppendLine_AddsNewlines">
            <summary>
            Tests AppendLine functionality.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.IndentedStringBuilderTests.IndentedStringBuilder_PushIndent_IncreasesIndentation">
            <summary>
            Tests indentation functionality.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.IndentedStringBuilderTests.IndentedStringBuilder_PopIndent_DecreasesIndentation">
            <summary>
            Tests PopIndent functionality.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.IndentedStringBuilderTests.IndentedStringBuilder_InitializeWithContent_PreservesInitialContent">
            <summary>
            Tests initialization with content.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.IndentedStringBuilderTests.IndentedStringBuilder_HandleNullAndEmpty_WorksCorrectly">
            <summary>
            Tests handling of null and empty strings.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.IndentedStringBuilderTests.IndentedStringBuilder_ComplexIndentation_WorksCorrectly">
            <summary>
            Tests complex indentation scenarios.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.IndentedStringBuilderTests.IndentedStringBuilder_ExcessiveIndentation_HandlesGracefully">
            <summary>
            Tests edge case with excessive indentation levels.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.IndentedStringBuilderTests.IndentedStringBuilder_MixedOperations_WorksCorrectly">
            <summary>
            Tests mixed content and indentation operations.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.IsExternalInitTests">
            <summary>
            Tests for IsExternalInit class that enables init-only properties.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.NameMapperAdvancedTests">
            <summary>
            Advanced tests for NameMapper class covering edge cases and comprehensive scenarios.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.NameMapperTests">
            <summary>
            Tests for NameMapper functionality.
            Tests parameter name mapping and snake_case conversion.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.NameMapperTests.NameMapper_MapName_ConvertsPascalCaseToSnakeCase">
            <summary>
            Tests MapName method with various naming patterns.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.NameMapperTests.NameMapper_MapName_HandlesSpecialCharacters">
            <summary>
            Tests MapName with special characters and edge cases.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.NameMapperTests.NameMapper_MapNameToSnakeCase_ConvertsCorrectly">
            <summary>
            Tests MapNameToSnakeCase method directly.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.NameMapperTests.NameMapper_DatabaseCompatibility_FollowsConventions">
            <summary>
            Tests naming conventions for database compatibility.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.NameMapperTests.NameMapper_ComplexScenarios_HandledCorrectly">
            <summary>
            Tests handling of complex naming scenarios.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.NameMapperTests.NameMapper_NullAndEmpty_ThrowsAppropriateExceptions">
            <summary>
            Tests null and empty string handling.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.NameMapperTests.NameMapper_Performance_HandlesManyCalls">
            <summary>
            Tests performance with many conversions.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.NameMapperTests.NameMapper_Consistency_BetweenMethods">
            <summary>
            Tests consistency between MapName and MapNameToSnakeCase.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.NameMapperTests.NameMapper_CommonPatterns_AreConsistent">
            <summary>
            Tests reversibility of common patterns.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.NameMapperTests.NameMapper_AlreadySnakeCase_PreservedCorrectly">
            <summary>
            Tests handling of already snake_case names.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.NameMapperTests.NameMapper_SqlParameterPrefixes_HandledCorrectly">
            <summary>
            Tests SQL parameter prefix handling.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.SourceGeneratorBoundaryTests">
            <summary>
            源生成器边界测试 - 测试源代码生成的极限情况和边界条件
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.SqlDefineComprehensiveTests">
            <summary>
            Comprehensive tests for SqlDefine static class and database dialect configurations.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_MySql_HasCorrectConfiguration">
            <summary>
            Tests MySQL dialect configuration values.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_SqlServer_HasCorrectConfiguration">
            <summary>
            Tests SQL Server dialect configuration values.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_PgSql_HasCorrectConfiguration">
            <summary>
            Tests PostgreSQL dialect configuration values.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_Oracle_HasCorrectConfiguration">
            <summary>
            Tests Oracle dialect configuration values.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_DB2_HasCorrectConfiguration">
            <summary>
            Tests DB2 dialect configuration values.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_Sqlite_HasCorrectConfiguration">
            <summary>
            Tests SQLite dialect configuration values.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_AllDialects_HaveValidConfigurations">
            <summary>
            Tests that all dialects have non-null and non-empty configuration values.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_DialectsWithSameColumnWrapping_AreGroupedCorrectly">
            <summary>
            Tests that dialects with same column wrapping are grouped correctly.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_DialectsWithSameParameterPrefix_AreGroupedCorrectly">
            <summary>
            Tests that dialects with same parameter prefix are grouped correctly.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_AllDialects_UseSingleQuotesForStrings">
            <summary>
            Tests that all dialects use single quotes for strings.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_WithExpressionToSql_ProducesCorrectColumnFormatting">
            <summary>
            Tests that each dialect produces correctly formatted column names.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_WithExpressionToSql_ProducesCorrectStringFormatting">
            <summary>
            Tests that each dialect produces correctly formatted string literals.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_WithExpressionToSql_ProducesCorrectParameterFormatting">
            <summary>
            Tests that each dialect produces correctly formatted parameter names.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_DialectConfigurations_AreImmutable">
            <summary>
            Tests that SqlDefine dialect configurations are immutable.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_SpecialCharactersInColumnNames_HandleCorrectly">
            <summary>
            Tests handling of special characters in column names with different dialects.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_ReservedKeywordsAsColumnNames_HandleCorrectly">
            <summary>
            Tests handling of reserved keywords as column names with different dialects.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_EmptyAndNullStrings_HandleGracefully">
            <summary>
            Tests handling of empty and null strings (edge case).
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_IsStaticClass">
            <summary>
            Tests that SqlDefine is a static class.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_AllFields_AreStaticAndReadonly">
            <summary>
            Tests that all SqlDefine fields are static and readonly.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlDefineComprehensiveTests.SqlDefine_HasExpectedPublicFields">
            <summary>
            Tests that SqlDefine has expected public fields.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.SqlDialectBoundaryTests">
            <summary>
            SQL方言边界测试 - 测试不同数据库方言在极限情况下的行为
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.SqlGenerationUtilitiesTests">
            <summary>
            Tests for SQL generation utilities and helper methods.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.SqlOutputInspectionTests">
            <summary>
            Tests to inspect actual SQL output and understand the real behavior.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.SqlOutputInspectionTests.TestEntity">
            <summary>
            Test entity for SQL output inspection.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlOutputInspectionTests.InspectSqlServerOutput">
            <summary>
            Inspects SQL Server SQL output to understand actual format.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlOutputInspectionTests.InspectMySqlOutput">
            <summary>
            Inspects MySQL SQL output to understand actual format.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlOutputInspectionTests.InspectUpdateOutput">
            <summary>
            Inspects UPDATE SQL output to understand actual format.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlOutputInspectionTests.InspectNullHandling">
            <summary>
            Inspects null handling to understand actual behavior.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlOutputInspectionTests.InspectBooleanHandling">
            <summary>
            Inspects boolean handling to understand actual behavior.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlOutputInspectionTests.InspectStringHandling">
            <summary>
            Inspects string handling to understand actual behavior.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlOutputInspectionTests.InspectDateHandling">
            <summary>
            Inspects date handling to understand actual behavior.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlOutputInspectionTests.InspectDecimalHandling">
            <summary>
            Inspects decimal handling to understand actual behavior.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlOutputInspectionTests.InspectComplexConditions">
            <summary>
            Inspects complex conditions to understand actual behavior.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlOutputInspectionTests.InspectAllDialects">
            <summary>
            Inspects all database dialects side by side.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.SqlPlaceholderTests">
            <summary>
            SQL 占位符功能测试
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlPlaceholderTests.CreateTestContext">
            <summary>
            创建测试用的占位符上下文
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.TestUser">
            <summary>
            测试用的实体类
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.ITestUserPlaceholderRepository">
            <summary>
            模拟使用 SQL 占位符的仓储接口（仅用于演示，实际实现由源生成器生成）
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.SqlxCoreUtilitiesTests">
            <summary>
            Tests for Sqlx Core utilities including SqlxException, SqlOperationInferrer and other utility classes.
            Tests exception handling, SQL operation inference, and core functionality.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxCoreUtilitiesTests.SqlGenerationException_Constructor_SetsPropertiesCorrectly">
            <summary>
            Tests SqlGenerationException constructor and properties.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxCoreUtilitiesTests.ConcreteExceptions_Inheritance_IsExceptionType">
            <summary>
            Tests other concrete exception types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxCoreUtilitiesTests.SqlOperationInferrer_InferOperation_RecognizesBasicOperations">
            <summary>
            Tests SqlOperationInferrer functionality for inferring SQL operations.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxCoreUtilitiesTests.SqlOperationInferrer_ComplexQueries_HandlesCorrectly">
            <summary>
            Tests SQL operation inference with complex queries.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxCoreUtilitiesTests.SqlOperationInferrer_ParameterDetection_FindsParameters">
            <summary>
            Tests parameter detection in SQL statements.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxCoreUtilitiesTests.SqlOperationInferrer_Validation_DetectsInvalidSql">
            <summary>
            Tests SQL statement validation and error detection.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxCoreUtilitiesTests.SqlOperationInferrer_Classification_CategorizesCorrectly">
            <summary>
            Tests SQL operation classification.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxCoreUtilitiesTests.SqlOperationInferrer_StoredProcedures_DetectsCorrectly">
            <summary>
            Tests stored procedure detection.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxCoreUtilitiesTests.SqlOperationInferrer_Dialects_RecognizesDialectSpecificSyntax">
            <summary>
            Tests SQL dialect detection and handling.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxCoreUtilitiesTests.SqlOperationInferrer_ErrorHandling_HandlesMalformedSql">
            <summary>
            Tests error handling for malformed SQL.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxCoreUtilitiesTests.SqlOperationInferrer_Performance_HandlesLargeSql">
            <summary>
            Tests performance with large SQL statements.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.SqlxExceptionAdvancedTests">
            <summary>
            Advanced tests for SqlxException and derived classes.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxExceptionAdvancedTests.SqlGenerationException_ConstructorWithMessage_SetsPropertiesCorrectly">
            <summary>
            Tests SqlGenerationException constructor with message.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxExceptionAdvancedTests.SqlGenerationException_ConstructorWithMessageAndInnerException_SetsPropertiesCorrectly">
            <summary>
            Tests SqlGenerationException constructor with message and inner exception.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxExceptionAdvancedTests.SqlGenerationException_InheritsFromSqlxException">
            <summary>
            Tests SqlGenerationException is derived from SqlxException.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxExceptionAdvancedTests.SqlGenerationException_CanBeThrownAndCaught">
            <summary>
            Tests SqlGenerationException can be thrown and caught.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxExceptionAdvancedTests.SqlGenerationException_CanBeCaughtAsSqlxException">
            <summary>
            Tests SqlGenerationException can be caught as SqlxException.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxExceptionAdvancedTests.SqlGenerationException_CanBeCaughtAsException">
            <summary>
            Tests SqlGenerationException can be caught as base Exception.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxExceptionAdvancedTests.SqlGenerationException_ToString_IncludesErrorCode">
            <summary>
            Tests SqlGenerationException ToString includes error code.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxExceptionAdvancedTests.SqlGenerationException_EmptyMessage_IsAllowed">
            <summary>
            Tests SqlGenerationException with empty message.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxExceptionAdvancedTests.SqlGenerationException_NullMessage_IsAllowed">
            <summary>
            Tests SqlGenerationException with null message.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxExceptionAdvancedTests.SqlGenerationException_HasCorrectProperties">
            <summary>
            Tests SqlGenerationException serialization properties.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxExceptionAdvancedTests.SqlGenerationException_MultipleInstances_HaveSameErrorCode">
            <summary>
            Tests multiple SqlGenerationException instances have same error code.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxExceptionAdvancedTests.SqlGenerationException_VeryLongMessage_IsHandledCorrectly">
            <summary>
            Tests SqlGenerationException with very long message.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.SqlxExceptionAdvancedTests.SqlGenerationException_SpecialCharactersInMessage_IsHandledCorrectly">
            <summary>
            Tests SqlGenerationException with special characters in message.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.SqlxExceptionTests">
            <summary>
            Tests for Sqlx exception classes to achieve coverage for error handling functionality.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.SqlxSyntaxReceiverTests">
            <summary>
            Tests for ISqlxSyntaxReceiver interface and syntax receiver functionality.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests">
            <summary>
            Advanced tests for TypeAnalyzer functionality with real Roslyn symbols.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests.TypeAnalyzer_IsLikelyEntityType_WithValidEntityClasses_ReturnsTrue">
            <summary>
            Tests IsLikelyEntityType with valid entity classes.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests.TypeAnalyzer_IsLikelyEntityType_WithPrimitiveTypes_ReturnsFalse">
            <summary>
            Tests IsLikelyEntityType with primitive types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests.TypeAnalyzer_IsLikelyEntityType_WithNullType_ReturnsFalse">
            <summary>
            Tests IsLikelyEntityType with null type.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests.TypeAnalyzer_IsLikelyEntityType_WithSystemNamespaceTypes_ReturnsFalse">
            <summary>
            Tests IsLikelyEntityType with system namespace types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests.TypeAnalyzer_IsCollectionType_WithCollectionTypes_ReturnsTrue">
            <summary>
            Tests IsCollectionType with various collection types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests.TypeAnalyzer_IsCollectionType_WithNonCollectionTypes_ReturnsFalse">
            <summary>
            Tests IsCollectionType with non-collection types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests.TypeAnalyzer_GetInnerType_WithTaskTypes_ReturnsCorrectInnerType">
            <summary>
            Tests GetInnerType with Task types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests.TypeAnalyzer_GetInnerType_WithNonTaskTypes_ReturnsOriginalType">
            <summary>
            Tests GetInnerType with non-Task types returns original type.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests.TypeAnalyzer_WithDeeplyNestedGenericTypes_HandlesCorrectly">
            <summary>
            Tests TypeAnalyzer methods with deeply nested generic types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests.TypeAnalyzer_PerformanceTest_HandlesLargeNumberOfTypeChecks">
            <summary>
            Tests TypeAnalyzer performance with many type checks.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests.TypeAnalyzer_WithInterfaceTypes_HandlesCorrectly">
            <summary>
            Tests TypeAnalyzer with interface types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests.TypeAnalyzer_WithAbstractClasses_HandlesCorrectly">
            <summary>
            Tests TypeAnalyzer with abstract classes.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests.TypeAnalyzer_WithStaticClasses_HandlesCorrectly">
            <summary>
            Tests TypeAnalyzer with static classes.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerAdvancedTests.TypeAnalyzer_SystemNamespaceDetection_WorksCorrectly">
            <summary>
            Tests system namespace detection with various namespace patterns.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.TypeAnalyzerTests">
            <summary>
            Tests for TypeAnalyzer utility class.
            Tests type analysis functionality used in source generation.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerTests.TypeAnalyzer_IsLikelyEntityType_DetectsEntityTypes">
            <summary>
            Tests entity type detection for various class types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerTests.TypeAnalyzer_IsCollectionType_DetectsCollectionTypes">
            <summary>
            Tests collection type detection for various collection types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerTests.TypeAnalyzer_ExtractEntityType_ExtractsFromGenericTypes">
            <summary>
            Tests entity type extraction from generic types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerTests.TypeAnalyzer_IsScalarReturnType_DetectsScalarTypes">
            <summary>
            Tests scalar return type detection.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerTests.TypeAnalyzer_GetDefaultValue_GeneratesCorrectDefaults">
            <summary>
            Tests default value generation for different types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerTests.TypeAnalyzer_IsSystemNamespace_DetectsSystemNamespaces">
            <summary>
            Tests system namespace detection.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerTests.GetTypeSymbols(System.String)">
            <summary>
            Helper method to get type symbols from source code.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.Core.TypeAnalyzerTests.GetBasicReferences">
            <summary>
            Gets basic references needed for compilation.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.UtilityMethodsTests">
            <summary>
            Tests for utility methods and helper functions.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Core.ValueStringBuilderCoreTests">
            <summary>
            ValueStringBuilder 核心功能单元测试
            验证高性能字符串构建器的核心功能
            </summary>
        </member>
        <member name="T:Sqlx.Tests.CSharpGeneratorBasicTests">
            <summary>
            Basic tests for CSharpGenerator class to improve coverage.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.ExtensionsWithCacheTests">
            <summary>
            Tests for ExtensionsWithCache class to improve coverage.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.GenerationContextBaseTests">
            <summary>
            Tests for GenerationContextBase class to improve coverage.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Generator.OperationGeneratorSimpleTests">
            <summary>
            Simple tests for OperationGeneratorFactory class.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.Generator.OperationGeneratorSimpleTests.MockOperationGenerator">
            <summary>
            Mock implementation of IOperationGenerator for testing.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.NullabilityTests">
            <summary>
            Tests for nullable reference type support.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.NullabilityTests.GeneratedCode_SupportsNullableReferenceTypes">
            <summary>
            Tests that nullable reference types are properly supported in generated code.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.NullabilityTests.GeneratedCode_HandlesNullableValueTypes">
            <summary>
            Tests nullable value type handling.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.NullabilityTests.GeneratedCode_EnforcesNonNullableTypes">
            <summary>
            Tests non-nullable type safety.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.NullabilityTests.GeneratedCode_HandlesDatabaseNulls">
            <summary>
            Tests database null value handling.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.NullabilityTests.GeneratedCode_HandlesStringNulls">
            <summary>
            Tests string null handling specifically.
            </summary>
        </member>
        <member name="T:Sqlx.Tests.TestBase">
            <summary>
            Base class for all Sqlx tests providing common functionality.
            </summary>
        </member>
        <member name="P:Sqlx.Tests.TestBase.TestContext">
            <summary>
            Test context for accessing test information.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.TestBase.Setup">
            <summary>
            Setup method called before each test.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.TestBase.Cleanup">
            <summary>
            Cleanup method called after each test.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.TestBase.AssertThrows``1(System.Action,System.String)">
            <summary>
            Asserts that an action throws a specific exception type.
            </summary>
            <typeparam name="TException">The expected exception type.</typeparam>
            <param name="action">The action to execute.</param>
            <param name="expectedMessage">Optional expected message content.</param>
            <returns>The thrown exception for further assertions.</returns>
        </member>
        <member name="M:Sqlx.Tests.TestBase.AssertCollectionsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Asserts that two collections have the same elements (order independent).
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="expected">The expected collection.</param>
            <param name="actual">The actual collection.</param>
        </member>
        <member name="M:Sqlx.Tests.TestBase.CreateTempFileName(System.String)">
            <summary>
            Creates a test-specific temporary file name.
            </summary>
            <param name="extension">File extension (without dot).</param>
            <returns>A unique temporary file path.</returns>
        </member>
        <member name="M:Sqlx.Tests.TestBase.MeasureExecutionTime(System.Action)">
            <summary>
            Measures the execution time of an action.
            </summary>
            <param name="action">The action to measure.</param>
            <returns>The elapsed time in milliseconds.</returns>
        </member>
        <member name="M:Sqlx.Tests.TestBase.WriteTestOutput(System.String)">
            <summary>
            Writes a test message to the test output.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Sqlx.Tests.TestBase.SkipTest(System.String)">
            <summary>
            Skips the current test with a reason.
            </summary>
            <param name="reason">The reason for skipping.</param>
        </member>
        <member name="T:Sqlx.Tests.TestHelper">
            <summary>
            Helper class for unit tests with common utilities and test data.
            </summary>
        </member>
        <member name="F:Sqlx.Tests.TestHelper.NameMappingTestCases">
            <summary>
            Common test data for name mapping tests.
            </summary>
        </member>
        <member name="F:Sqlx.Tests.TestHelper.SqlDefineTestCases">
            <summary>
            SQL define test cases for different database types.
            </summary>
        </member>
        <member name="M:Sqlx.Tests.TestHelper.AssertStringEqual(System.String,System.String,System.String)">
            <summary>
            Validates that two strings are equal with detailed error message.
            </summary>
            <param name="expected">The expected string value.</param>
            <param name="actual">The actual string value.</param>
            <param name="message">Optional custom message.</param>
        </member>
        <member name="M:Sqlx.Tests.TestHelper.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Validates that a string is not null or empty.
            </summary>
            <param name="value">The string value to check.</param>
            <param name="parameterName">The parameter name for error messages.</param>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DisplayStringRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DisplayStringRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DisplayStringRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DisplayStringRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DisplayStringRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DisplayStringRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DisplayStringRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DisplayStringRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DisplayStringRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DisplayStringRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CodeGenValidationRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CodeGenValidationRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CodeGenValidationRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CodeGenValidationRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CodeGenValidationRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CodeGenValidationRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CodeGenValidationRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CodeGenValidationRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CodeGenValidationRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CodeGenValidationRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VariableNameRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the VariableNameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.VariableNameRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VariableNameRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VariableNameRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VariableNameRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VariableNameRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VariableNameRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VariableNameRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VariableNameRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsWordChar(System.Char)">
            <summary>Determines whether the character is part of the [\w] set.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiLettersAndDigits">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_800080008000800">
            <summary>Supports searching for characters in or not in "CScs".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_D9CEFF1E285FBBB2068ACE2A08669DABFFC0D9A9CED44F5A0AE097320B45A236">
            <summary>Supports searching for the string "var ".</summary>
        </member>
    </members>
</doc>
