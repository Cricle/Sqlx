// -----------------------------------------------------------------------
// <copyright file="AttributeSourceGenerator.cs" company="Cricle">
// Copyright (c) Cricle. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

using System.Text;

namespace Sqlx.Core;

/// <summary>
/// Generates the C# attribute source code in a more readable and maintainable way.
/// </summary>
internal static class AttributeSourceGenerator
{
    /// <summary>
    /// Generates the complete C# attribute source.
    /// </summary>
    public static string GenerateAttributeSource()
    {
        var sb = new StringBuilder();
        
        GenerateHeader(sb);
        GenerateNamespaceStart(sb);
        GenerateAttributes(sb);
        GenerateEnums(sb);
        GenerateSqlDefineClass(sb);
        GenerateExpressionToSqlClass(sb);
        GenerateNamespaceEnd(sb);
        
        return sb.ToString();
    }

    private static void GenerateHeader(StringBuilder sb)
    {
        sb.AppendLine("// <auto-generated>");
        sb.AppendLine("// This code was generated by Sqlx Source Generator.");
        sb.AppendLine("// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
        sb.AppendLine("// </auto-generated>");
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
    }

    private static void GenerateNamespaceStart(StringBuilder sb)
    {
        sb.AppendLine("namespace Sqlx.Annotations");
        sb.AppendLine("{");
    }

    private static void GenerateAttributes(StringBuilder sb)
    {
        GenerateSqlxAttribute(sb);
        GenerateRawSqlAttribute(sb);
        GenerateExpressionToSqlAttribute(sb);
        GenerateSqlExecuteTypeAttribute(sb);
        GenerateRepositoryForAttribute(sb);
        GenerateTableNameAttribute(sb);
        GenerateDbSetTypeAttribute(sb);
        GenerateSqlDefineAttribute(sb);
    }

    private static void GenerateSqlxAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Specifies SQL command text or stored procedure name for a method.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Method | global::System.AttributeTargets.Parameter,");
        sb.AppendLine("        AllowMultiple = true, Inherited = false)]");
        sb.AppendLine("    public sealed class SqlxAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"SqlxAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public SqlxAttribute()");
        sb.AppendLine("        {");
        sb.AppendLine("            StoredProcedureName = string.Empty;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"SqlxAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        /// <param name=\"storedProcedureName\">The stored procedure name.</param>");
        sb.AppendLine("        public SqlxAttribute(string storedProcedureName)");
        sb.AppendLine("        {");
        sb.AppendLine("            StoredProcedureName = storedProcedureName ?? string.Empty;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets or sets the stored procedure name.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string StoredProcedureName { get; set; }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateRawSqlAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Specifies raw SQL command text for methods or parameters.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Method | global::System.AttributeTargets.Parameter,");
        sb.AppendLine("        AllowMultiple = false, Inherited = false)]");
        sb.AppendLine("    public sealed class RawSqlAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"RawSqlAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public RawSqlAttribute()");
        sb.AppendLine("        {");
        sb.AppendLine("            Sql = string.Empty;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"RawSqlAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        /// <param name=\"sql\">The raw SQL command text.</param>");
        sb.AppendLine("        public RawSqlAttribute(string sql)");
        sb.AppendLine("        {");
        sb.AppendLine("            Sql = sql ?? string.Empty;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets or sets the raw SQL command text.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string Sql { get; set; }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateExpressionToSqlAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Indicates that a parameter should be converted from a LINQ expression to SQL.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Parameter,");
        sb.AppendLine("        AllowMultiple = false, Inherited = false)]");
        sb.AppendLine("    public sealed class ExpressionToSqlAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateSqlExecuteTypeAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Specifies CRUD operation types and target table names.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Method,");
        sb.AppendLine("        AllowMultiple = false, Inherited = false)]");
        sb.AppendLine("    public sealed class SqlExecuteTypeAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"SqlExecuteTypeAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        /// <param name=\"executeType\">The SQL operation type.</param>");
        sb.AppendLine("        /// <param name=\"tableName\">The target table name.</param>");
        sb.AppendLine("        public SqlExecuteTypeAttribute(SqlExecuteTypes executeType, string tableName)");
        sb.AppendLine("        {");
        sb.AppendLine("            ExecuteType = executeType;");
        sb.AppendLine("            TableName = tableName ?? throw new global::System.ArgumentNullException(nameof(tableName));");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the SQL operation type.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public SqlExecuteTypes ExecuteType { get; }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the target table name.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string TableName { get; }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateRepositoryForAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Marks a class as a repository for a specified service interface.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Class,");
        sb.AppendLine("        AllowMultiple = false, Inherited = false)]");
        sb.AppendLine("    public sealed class RepositoryForAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"RepositoryForAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        /// <param name=\"serviceType\">The service interface type.</param>");
        sb.AppendLine("        public RepositoryForAttribute(global::System.Type serviceType)");
        sb.AppendLine("        {");
        sb.AppendLine("            ServiceType = serviceType ?? throw new global::System.ArgumentNullException(nameof(serviceType));");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the service interface type.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public global::System.Type ServiceType { get; }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateTableNameAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Specifies the database table name for an entity.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Class |");
        sb.AppendLine("        global::System.AttributeTargets.Interface | global::System.AttributeTargets.Method |");
        sb.AppendLine("        global::System.AttributeTargets.Parameter, AllowMultiple = false, Inherited = false)]");
        sb.AppendLine("    public sealed class TableNameAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"TableNameAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        /// <param name=\"tableName\">The database table name.</param>");
        sb.AppendLine("        public TableNameAttribute(string tableName)");
        sb.AppendLine("        {");
        sb.AppendLine("            TableName = tableName ?? throw new global::System.ArgumentNullException(nameof(tableName));");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the database table name.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string TableName { get; }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateEnums(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Defines SQL operation types for CRUD operations.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public enum SqlExecuteTypes");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>SELECT operation.</summary>");
        sb.AppendLine("        Select = 0,");
        sb.AppendLine("        /// <summary>UPDATE operation.</summary>");
        sb.AppendLine("        Update = 1,");
        sb.AppendLine("        /// <summary>INSERT operation.</summary>");
        sb.AppendLine("        Insert = 2,");
        sb.AppendLine("        /// <summary>DELETE operation.</summary>");
        sb.AppendLine("        Delete = 3,");
        sb.AppendLine("        /// <summary>Batch INSERT operation.</summary>");
        sb.AppendLine("        BatchInsert = 4,");
        sb.AppendLine("        /// <summary>Batch UPDATE operation.</summary>");
        sb.AppendLine("        BatchUpdate = 5,");
        sb.AppendLine("        /// <summary>Batch DELETE operation.</summary>");
        sb.AppendLine("        BatchDelete = 6");
        sb.AppendLine("    }");
        sb.AppendLine();
        
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Defines database dialect types for SQL generation.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public enum SqlDefineTypes");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>MySQL dialect with backtick column wrapping.</summary>");
        sb.AppendLine("        MySql = 0,");
        sb.AppendLine("        /// <summary>SQL Server dialect with square bracket column wrapping.</summary>");
        sb.AppendLine("        SqlServer = 1,");
        sb.AppendLine("        /// <summary>PostgreSQL dialect with double quote column wrapping.</summary>");
        sb.AppendLine("        Postgresql = 2,");
        sb.AppendLine("        /// <summary>Oracle dialect with double quote column wrapping and colon parameters.</summary>");
        sb.AppendLine("        Oracle = 3,");
        sb.AppendLine("        /// <summary>DB2 dialect with double quote column wrapping and question mark parameters.</summary>");
        sb.AppendLine("        DB2 = 4,");
        sb.AppendLine("        /// <summary>SQLite dialect with square bracket column wrapping.</summary>");
        sb.AppendLine("        SQLite = 5");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateSqlDefineClass(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Provides database dialect-specific SQL formatting definitions.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static class SqlDefine");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// MySQL dialect configuration with backtick column wrapping and @ parameter prefix.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static readonly (string ColumnLeft, string ColumnRight, string StringLeft,");
        sb.AppendLine("            string StringRight, string ParameterPrefix) MySql = (\"`\", \"`\", \"'\", \"'\", \"@\");");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// SQL Server dialect configuration with square bracket column wrapping and @ parameter prefix.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static readonly (string ColumnLeft, string ColumnRight, string StringLeft,");
        sb.AppendLine("            string StringRight, string ParameterPrefix) SqlServer = (\"[\", \"]\", \"'\", \"'\", \"@\");");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// PostgreSQL dialect configuration with double quote column wrapping and $ parameter prefix.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static readonly (string ColumnLeft, string ColumnRight, string StringLeft,");
        sb.AppendLine("            string StringRight, string ParameterPrefix) PgSql = (\"\\\"\", \"\\\"\", \"'\", \"'\", \"$\");");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Oracle dialect configuration with double quote column wrapping and : parameter prefix.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static readonly (string ColumnLeft, string ColumnRight, string StringLeft,");
        sb.AppendLine("            string StringRight, string ParameterPrefix) Oracle = (\"\\\"\", \"\\\"\", \"'\", \"'\", \":\");");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// DB2 dialect configuration with double quote column wrapping and ? parameter prefix.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static readonly (string ColumnLeft, string ColumnRight, string StringLeft,");
        sb.AppendLine("            string StringRight, string ParameterPrefix) DB2 = (\"\\\"\", \"\\\"\", \"'\", \"'\", \"?\");");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// SQLite dialect configuration with square bracket column wrapping and @ parameter prefix.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static readonly (string ColumnLeft, string ColumnRight, string StringLeft,");
        sb.AppendLine("            string StringRight, string ParameterPrefix) Sqlite = (\"[\", \"]\", \"'\", \"'\", \"@\");");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateExpressionToSqlClass(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Provides LINQ expression to SQL conversion functionality.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <typeparam name=\"T\">The entity type for expressions.</typeparam>");
        sb.AppendLine("    public class ExpressionToSql<T> : global::System.IDisposable");
        sb.AppendLine("    {");
        sb.AppendLine("        private readonly global::System.Collections.Generic.List<global::System.Linq.Expressions.Expression<global::System.Func<T, bool>>> _whereConditions = ");
        sb.AppendLine("            new global::System.Collections.Generic.List<global::System.Linq.Expressions.Expression<global::System.Func<T, bool>>>();");
        sb.AppendLine("        private readonly global::System.Collections.Generic.List<(global::System.Linq.Expressions.LambdaExpression Expression, bool Descending)> _orderByExpressions = ");
        sb.AppendLine("            new global::System.Collections.Generic.List<(global::System.Linq.Expressions.LambdaExpression, bool)>();");
        sb.AppendLine("        private readonly global::System.Collections.Generic.List<(string Column, string Value)> _setClausesConstant = ");
        sb.AppendLine("            new global::System.Collections.Generic.List<(string, string)>();");
        sb.AppendLine("        private readonly global::System.Collections.Generic.List<(string Column, string Expression)> _setClausesExpression = ");
        sb.AppendLine("            new global::System.Collections.Generic.List<(string, string)>();");
        sb.AppendLine("        private readonly (string ColumnLeft, string ColumnRight, string StringLeft, ");
        sb.AppendLine("            string StringRight, string ParameterPrefix) _dialect;");
        sb.AppendLine("        private SqlTemplate? _cachedTemplate;");
        sb.AppendLine("        private int? _take;");
        sb.AppendLine("        private int? _skip;");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance with the specified SQL dialect.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        private ExpressionToSql((string ColumnLeft, string ColumnRight, string StringLeft, ");
        sb.AppendLine("            string StringRight, string ParameterPrefix) dialect)");
        sb.AppendLine("        {");
        sb.AppendLine("            _dialect = dialect;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Creates an ExpressionToSql builder for SQL Server dialect.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static ExpressionToSql<T> ForSqlServer()");
        sb.AppendLine("            => new ExpressionToSql<T>(SqlDefine.SqlServer);");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Creates an ExpressionToSql builder for MySQL dialect.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static ExpressionToSql<T> ForMySql()");
        sb.AppendLine("            => new ExpressionToSql<T>(SqlDefine.MySql);");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Creates an ExpressionToSql builder for PostgreSQL dialect.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static ExpressionToSql<T> ForPostgreSQL()");
        sb.AppendLine("            => new ExpressionToSql<T>(SqlDefine.PgSql);");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Creates an ExpressionToSql builder for Oracle dialect.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static ExpressionToSql<T> ForOracle()");
        sb.AppendLine("            => new ExpressionToSql<T>(SqlDefine.Oracle);");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Creates an ExpressionToSql builder for DB2 dialect.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static ExpressionToSql<T> ForDB2()");
        sb.AppendLine("            => new ExpressionToSql<T>(SqlDefine.DB2);");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Creates an ExpressionToSql builder for SQLite dialect.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static ExpressionToSql<T> ForSqlite()");
        sb.AppendLine("            => new ExpressionToSql<T>(SqlDefine.Sqlite);");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Creates an ExpressionToSql builder with default (SQL Server) dialect.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static ExpressionToSql<T> Create()");
        sb.AppendLine("            => new ExpressionToSql<T>(SqlDefine.SqlServer);");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Adds a WHERE condition to the query.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> Where(global::System.Linq.Expressions.Expression<global::System.Func<T, bool>> predicate)");
        sb.AppendLine("        {");
        sb.AppendLine("            if (predicate != null)");
        sb.AppendLine("                _whereConditions.Add(predicate);");
        sb.AppendLine("            return this;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Adds an AND condition to the query.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> And(global::System.Linq.Expressions.Expression<global::System.Func<T, bool>> predicate)");
        sb.AppendLine("        {");
        sb.AppendLine("            return Where(predicate);");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Adds an ORDER BY clause to the query.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> OrderBy<TKey>(global::System.Linq.Expressions.Expression<global::System.Func<T, TKey>> keySelector)");
        sb.AppendLine("        {");
        sb.AppendLine("            if (keySelector != null)");
        sb.AppendLine("                _orderByExpressions.Add((keySelector, false));");
        sb.AppendLine("            return this;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Adds an ORDER BY DESC clause to the query.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> OrderByDescending<TKey>(global::System.Linq.Expressions.Expression<global::System.Func<T, TKey>> keySelector)");
        sb.AppendLine("        {");
        sb.AppendLine("            if (keySelector != null)");
        sb.AppendLine("                _orderByExpressions.Add((keySelector, true));");
        sb.AppendLine("            return this;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Limits the number of returned rows.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> Take(int count)");
        sb.AppendLine("        {");
        sb.AppendLine("            _take = count;");
        sb.AppendLine("            return this;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Skips the specified number of rows.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> Skip(int count)");
        sb.AppendLine("        {");
        sb.AppendLine("            _skip = count;");
        sb.AppendLine("            return this;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Sets a value for an UPDATE operation. Supports patterns like a=1.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> Set<TValue>(global::System.Linq.Expressions.Expression<global::System.Func<T, TValue>> selector, TValue value)");
        sb.AppendLine("        {");
        sb.AppendLine("            var columnName = GetColumnName(selector.Body);");
        sb.AppendLine("            var valueStr = FormatConstantValue(value);");
        sb.AppendLine("            _setClausesConstant.Add((columnName, valueStr));");
        sb.AppendLine("            return this;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Sets a value using an expression for an UPDATE operation. Supports patterns like a=a+1.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> Set<TValue>(global::System.Linq.Expressions.Expression<global::System.Func<T, TValue>> selector, ");
        sb.AppendLine("            global::System.Linq.Expressions.Expression<global::System.Func<T, TValue>> valueExpression)");
        sb.AppendLine("        {");
        sb.AppendLine("            var columnName = GetColumnName(selector.Body);");
        sb.AppendLine("            var expressionSql = ParseExpression(valueExpression.Body);");
        sb.AppendLine("            _setClausesExpression.Add((columnName, expressionSql));");
        sb.AppendLine("            return this;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Specifies columns for an INSERT operation.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> Insert(global::System.Linq.Expressions.Expression<global::System.Func<T, object>> selector)");
        sb.AppendLine("        {");
        sb.AppendLine("            return this;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Specifies values for an INSERT operation.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public ExpressionToSql<T> Values(params object[] values)");
        sb.AppendLine("        {");
        sb.AppendLine("            return this;");
        sb.AppendLine("        }");
        sb.AppendLine();
        
        // Add the core functionality methods
        GenerateExpressionToSqlCoreMethods(sb);
        
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Represents a parameterized SQL template.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public class SqlTemplate");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the SqlTemplate class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public SqlTemplate(string sql, global::System.Data.Common.DbParameter[] parameters)");
        sb.AppendLine("        {");
        sb.AppendLine("            Sql = sql ?? string.Empty;");
        sb.AppendLine("            Parameters = parameters ?? new global::System.Data.Common.DbParameter[0];");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the SQL command text.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string Sql { get; }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the parameters for the SQL command.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public global::System.Data.Common.DbParameter[] Parameters { get; }");
        sb.AppendLine("    }");
    }

    private static void GenerateDbSetTypeAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Specifies the entity type for DbContext methods returning tuples or generic collections.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Parameter |");
        sb.AppendLine("        global::System.AttributeTargets.Method, AllowMultiple = false, Inherited = false)]");
        sb.AppendLine("    public sealed class DbSetTypeAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"DbSetTypeAttribute\"/> class.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        /// <param name=\"type\">The entity type.</param>");
        sb.AppendLine("        public DbSetTypeAttribute(global::System.Type type)");
        sb.AppendLine("        {");
        sb.AppendLine("            Type = type ?? throw new global::System.ArgumentNullException(nameof(type));");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the entity type.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public global::System.Type Type { get; }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateExpressionToSqlCoreMethods(StringBuilder sb)
    {
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Converts the built query to a parameterized SQL template.");
        sb.AppendLine("        /// Results are cached for performance on repeated calls.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public SqlTemplate ToTemplate()");
        sb.AppendLine("        {");
        sb.AppendLine("            if (_cachedTemplate != null)");
        sb.AppendLine("                return _cachedTemplate;");
        sb.AppendLine("            var sql = BuildSql();");
        sb.AppendLine("            _cachedTemplate = new SqlTemplate(sql, global::System.Array.Empty<global::System.Data.Common.DbParameter>());");
        sb.AppendLine("            return _cachedTemplate;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Converts the built query to a SQL string.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string ToSql()");
        sb.AppendLine("        {");
        sb.AppendLine("            return BuildSql();");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Generates the WHERE clause portion of the query.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string ToWhereClause()");
        sb.AppendLine("        {");
        sb.AppendLine("            if (_whereConditions.Count == 0)");
        sb.AppendLine("                return string.Empty;");
        sb.AppendLine("            var conditions = new global::System.Collections.Generic.List<string>();");
        sb.AppendLine("            foreach (var condition in _whereConditions)");
        sb.AppendLine("            {");
        sb.AppendLine("                var conditionSql = ParseExpression(condition.Body);");
        sb.AppendLine("                conditions.Add($\"({conditionSql})\");");
        sb.AppendLine("            }");
        sb.AppendLine("            return string.Join(\" AND \", conditions);");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Generates additional clauses for the query.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string ToAdditionalClause()");
        sb.AppendLine("        {");
        sb.AppendLine("            var clauses = new global::System.Collections.Generic.List<string>();");
        sb.AppendLine("            if (_orderByExpressions.Count > 0)");
        sb.AppendLine("            {");
        sb.AppendLine("                var orderClauses = new global::System.Collections.Generic.List<string>();");
        sb.AppendLine("                foreach (var (expression, descending) in _orderByExpressions)");
        sb.AppendLine("                {");
        sb.AppendLine("                    var columnName = GetColumnName(expression.Body);");
        sb.AppendLine("                    var direction = descending ? \" DESC\" : \" ASC\";");
        sb.AppendLine("                    orderClauses.Add(columnName + direction);");
        sb.AppendLine("                }");
        sb.AppendLine("                clauses.Add(\"ORDER BY \" + string.Join(\", \", orderClauses));");
        sb.AppendLine("            }");
        sb.AppendLine("            if (_skip.HasValue)");
        sb.AppendLine("            {");
        sb.AppendLine("                clauses.Add($\"OFFSET {_skip.Value}\");");
        sb.AppendLine("            }");
        sb.AppendLine("            if (_take.HasValue)");
        sb.AppendLine("            {");
        sb.AppendLine("                clauses.Add($\"LIMIT {_take.Value}\");");
        sb.AppendLine("            }");
        sb.AppendLine("            return string.Join(\" \", clauses);");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Releases resources used by this instance.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public void Dispose()");
        sb.AppendLine("        {");
        sb.AppendLine("            _whereConditions.Clear();");
        sb.AppendLine("            _orderByExpressions.Clear();");
        sb.AppendLine("            _setClausesConstant.Clear();");
        sb.AppendLine("            _setClausesExpression.Clear();");
        sb.AppendLine("            _cachedTemplate = null;");
        sb.AppendLine("        }");
        sb.AppendLine();
        
        // Add helper methods
        GenerateExpressionToSqlHelperMethods(sb);
    }

    private static void GenerateExpressionToSqlHelperMethods(StringBuilder sb)
    {
        sb.AppendLine("        private string BuildSql()");
        sb.AppendLine("        {");
        sb.AppendLine("            var sql = new global::System.Text.StringBuilder();");
        sb.AppendLine("            if (_setClausesConstant.Count > 0 || _setClausesExpression.Count > 0)");
        sb.AppendLine("            {");
        sb.AppendLine("                sql.Append(\"UPDATE \");");
        sb.AppendLine("                sql.Append(_dialect.ColumnLeft + typeof(T).Name + _dialect.ColumnRight);");
        sb.AppendLine("                sql.Append(\" SET \");");
        sb.AppendLine("                var setClauses = new global::System.Collections.Generic.List<string>();");
        sb.AppendLine("                foreach (var (column, value) in _setClausesConstant)");
        sb.AppendLine("                {");
        sb.AppendLine("                    setClauses.Add($\"{column} = {value}\");");
        sb.AppendLine("                }");
        sb.AppendLine("                foreach (var (column, expression) in _setClausesExpression)");
        sb.AppendLine("                {");
        sb.AppendLine("                    setClauses.Add($\"{column} = {expression}\");");
        sb.AppendLine("                }");
        sb.AppendLine("                sql.Append(string.Join(\", \", setClauses));");
        sb.AppendLine("            }");
        sb.AppendLine("            else");
        sb.AppendLine("            {");
        sb.AppendLine("                sql.Append(\"SELECT * FROM \");");
        sb.AppendLine("                sql.Append(_dialect.ColumnLeft + typeof(T).Name + _dialect.ColumnRight);");
        sb.AppendLine("            }");
        sb.AppendLine("            if (_whereConditions.Count > 0)");
        sb.AppendLine("            {");
        sb.AppendLine("                sql.Append(\" WHERE \");");
        sb.AppendLine("                var conditions = new global::System.Collections.Generic.List<string>();");
        sb.AppendLine("                foreach (var condition in _whereConditions)");
        sb.AppendLine("                {");
        sb.AppendLine("                    var conditionSql = ParseExpression(condition.Body);");
        sb.AppendLine("                    conditions.Add($\"({conditionSql})\");");
        sb.AppendLine("                }");
        sb.AppendLine("                sql.Append(string.Join(\" AND \", conditions));");
        sb.AppendLine("            }");
        sb.AppendLine("            if (_setClausesConstant.Count == 0 && _setClausesExpression.Count == 0)");
        sb.AppendLine("            {");
        sb.AppendLine("                if (_orderByExpressions.Count > 0)");
        sb.AppendLine("                {");
        sb.AppendLine("                    sql.Append(\" ORDER BY \");");
        sb.AppendLine("                    var orderClauses = new global::System.Collections.Generic.List<string>();");
        sb.AppendLine("                    foreach (var (expression, descending) in _orderByExpressions)");
        sb.AppendLine("                    {");
        sb.AppendLine("                        var columnName = GetColumnName(expression.Body);");
        sb.AppendLine("                        var direction = descending ? \" DESC\" : \" ASC\";");
        sb.AppendLine("                        orderClauses.Add(columnName + direction);");
        sb.AppendLine("                    }");
        sb.AppendLine("                    sql.Append(string.Join(\", \", orderClauses));");
        sb.AppendLine("                }");
        sb.AppendLine("                if (_skip.HasValue)");
        sb.AppendLine("                {");
        sb.AppendLine("                    sql.Append($\" OFFSET {_skip.Value}\");");
        sb.AppendLine("                }");
        sb.AppendLine("                if (_take.HasValue)");
        sb.AppendLine("                {");
        sb.AppendLine("                    sql.Append($\" LIMIT {_take.Value}\");");
        sb.AppendLine("                }");
        sb.AppendLine("            }");
        sb.AppendLine("            return sql.ToString();");
        sb.AppendLine("        }");
        sb.AppendLine();
        
        // Expression parsing methods
        sb.AppendLine("        private string ParseExpression(global::System.Linq.Expressions.Expression expression)");
        sb.AppendLine("        {");
        sb.AppendLine("            switch (expression)");
        sb.AppendLine("            {");
        sb.AppendLine("                case global::System.Linq.Expressions.BinaryExpression binary:");
        sb.AppendLine("                    return ParseBinaryExpression(binary);");
        sb.AppendLine("                case global::System.Linq.Expressions.MemberExpression member:");
        sb.AppendLine("                    return GetColumnName(member);");
        sb.AppendLine("                case global::System.Linq.Expressions.ConstantExpression constant:");
        sb.AppendLine("                    return GetConstantValue(constant);");
        sb.AppendLine("                case global::System.Linq.Expressions.UnaryExpression unary when unary.NodeType == global::System.Linq.Expressions.ExpressionType.Not:");
        sb.AppendLine("                    return $\"NOT ({ParseExpression(unary.Operand)})\";");
        sb.AppendLine("                default:");
        sb.AppendLine("                    return \"1=1\";");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine();
        
        sb.AppendLine("        private string ParseBinaryExpression(global::System.Linq.Expressions.BinaryExpression binary)");
        sb.AppendLine("        {");
        sb.AppendLine("            var left = ParseExpression(binary.Left);");
        sb.AppendLine("            var right = ParseExpression(binary.Right);");
        sb.AppendLine("            return binary.NodeType switch");
        sb.AppendLine("            {");
        sb.AppendLine("                global::System.Linq.Expressions.ExpressionType.Equal => $\"{left} = {right}\",");
        sb.AppendLine("                global::System.Linq.Expressions.ExpressionType.NotEqual => $\"{left} <> {right}\",");
        sb.AppendLine("                global::System.Linq.Expressions.ExpressionType.GreaterThan => $\"{left} > {right}\",");
        sb.AppendLine("                global::System.Linq.Expressions.ExpressionType.GreaterThanOrEqual => $\"{left} >= {right}\",");
        sb.AppendLine("                global::System.Linq.Expressions.ExpressionType.LessThan => $\"{left} < {right}\",");
        sb.AppendLine("                global::System.Linq.Expressions.ExpressionType.LessThanOrEqual => $\"{left} <= {right}\",");
        sb.AppendLine("                global::System.Linq.Expressions.ExpressionType.AndAlso => $\"({left} AND {right})\",");
        sb.AppendLine("                global::System.Linq.Expressions.ExpressionType.OrElse => $\"({left} OR {right})\",");
        sb.AppendLine("                global::System.Linq.Expressions.ExpressionType.Add => $\"{left} + {right}\",");
        sb.AppendLine("                global::System.Linq.Expressions.ExpressionType.Subtract => $\"{left} - {right}\",");
        sb.AppendLine("                global::System.Linq.Expressions.ExpressionType.Multiply => $\"{left} * {right}\",");
        sb.AppendLine("                global::System.Linq.Expressions.ExpressionType.Divide => $\"{left} / {right}\",");
        sb.AppendLine("                _ => $\"{left} = {right}\"");
        sb.AppendLine("            };");
        sb.AppendLine("        }");
        sb.AppendLine();
        
        sb.AppendLine("        private string GetColumnName(global::System.Linq.Expressions.Expression expression)");
        sb.AppendLine("        {");
        sb.AppendLine("            if (expression is global::System.Linq.Expressions.MemberExpression member)");
        sb.AppendLine("            {");
        sb.AppendLine("                var columnName = member.Member.Name;");
        sb.AppendLine("                return _dialect.ColumnLeft + columnName + _dialect.ColumnRight;");
        sb.AppendLine("            }");
        sb.AppendLine("            return \"Column\";");
        sb.AppendLine("        }");
        sb.AppendLine();
        
        sb.AppendLine("        private string GetConstantValue(global::System.Linq.Expressions.ConstantExpression constant)");
        sb.AppendLine("        {");
        sb.AppendLine("            return FormatConstantValue(constant.Value);");
        sb.AppendLine("        }");
        sb.AppendLine();
        
        sb.AppendLine("        private string FormatConstantValue(object? value)");
        sb.AppendLine("        {");
        sb.AppendLine("            if (value == null)");
        sb.AppendLine("                return \"NULL\";");
        sb.AppendLine("            return value switch");
        sb.AppendLine("            {");
        sb.AppendLine("                string s => _dialect.StringLeft + s.Replace(\"'\", \"''\") + _dialect.StringRight,");
        sb.AppendLine("                bool b => b ? \"1\" : \"0\",");
        sb.AppendLine("                global::System.DateTime dt => _dialect.StringLeft + dt.ToString(\"yyyy-MM-dd HH:mm:ss\") + _dialect.StringRight,");
        sb.AppendLine("                _ => value.ToString() ?? \"NULL\"");
        sb.AppendLine("            };");
        sb.AppendLine("        }");
    }

    private static void GenerateSqlDefineAttribute(StringBuilder sb)
    {
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Specifies the database dialect for SQL generation.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [global::System.AttributeUsage(global::System.AttributeTargets.Method |");
        sb.AppendLine("        global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]");
        sb.AppendLine("    public sealed class SqlDefineAttribute : global::System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"SqlDefineAttribute\"/> class with a predefined dialect.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        /// <param name=\"dialectType\">The database dialect type.</param>");
        sb.AppendLine("        public SqlDefineAttribute(SqlDefineTypes dialectType)");
        sb.AppendLine("        {");
        sb.AppendLine("            DialectType = dialectType;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Initializes a new instance of the <see cref=\"SqlDefineAttribute\"/> class with custom dialect settings.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        /// <param name=\"columnLeft\">Left column delimiter.</param>");
        sb.AppendLine("        /// <param name=\"columnRight\">Right column delimiter.</param>");
        sb.AppendLine("        /// <param name=\"stringLeft\">Left string delimiter.</param>");
        sb.AppendLine("        /// <param name=\"stringRight\">Right string delimiter.</param>");
        sb.AppendLine("        /// <param name=\"parameterPrefix\">Parameter prefix.</param>");
        sb.AppendLine("        public SqlDefineAttribute(string columnLeft, string columnRight, string stringLeft, string stringRight, string parameterPrefix)");
        sb.AppendLine("        {");
        sb.AppendLine("            ColumnLeft = columnLeft ?? throw new global::System.ArgumentNullException(nameof(columnLeft));");
        sb.AppendLine("            ColumnRight = columnRight ?? throw new global::System.ArgumentNullException(nameof(columnRight));");
        sb.AppendLine("            StringLeft = stringLeft ?? throw new global::System.ArgumentNullException(nameof(stringLeft));");
        sb.AppendLine("            StringRight = stringRight ?? throw new global::System.ArgumentNullException(nameof(stringRight));");
        sb.AppendLine("            ParameterPrefix = parameterPrefix ?? throw new global::System.ArgumentNullException(nameof(parameterPrefix));");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the database dialect type.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public SqlDefineTypes? DialectType { get; }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the left column delimiter.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string? ColumnLeft { get; }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the right column delimiter.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string? ColumnRight { get; }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the left string delimiter.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string? StringLeft { get; }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the right string delimiter.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string? StringRight { get; }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets the parameter prefix.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string? ParameterPrefix { get; }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateNamespaceEnd(StringBuilder sb)
    {
        sb.AppendLine("}");
    }
}
