// -----------------------------------------------------------------------
// <copyright file="AttributeSourceGeneratorTests.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Sqlx.Core;

namespace Sqlx.Tests.Core
{
    [TestClass]
    public class AttributeSourceGeneratorTestsSimple
    {
        [TestMethod]
        public void GenerateAttributeSource_Contains_Key_Attributes_And_Enums()
        {
            var src = AttributeSourceGenerator.GenerateAttributeSource();
            Assert.IsTrue(src.Contains("class SqlxAttribute"));
            Assert.IsTrue(src.Contains("class RawSqlAttribute"));
            Assert.IsTrue(src.Contains("class ExpressionToSqlAttribute"));
            Assert.IsTrue(src.Contains("class SqlExecuteTypeAttribute"));
            Assert.IsTrue(src.Contains("class RepositoryForAttribute"));
            Assert.IsTrue(src.Contains("class TableNameAttribute"));
            Assert.IsTrue(src.Contains("enum SqlExecuteTypes"));
            Assert.IsTrue(src.Contains("enum SqlDefineTypes"));
            Assert.IsTrue(src.Contains("class SqlDefineAttribute"));
            Assert.IsTrue(src.Contains("public static class SqlDefine"));
            Assert.IsTrue(src.Contains("public readonly record struct SqlTemplate"));
            Assert.IsTrue(src.Contains("class ExpressionToSql<"));
        }
    }
}

// -----------------------------------------------------------------------
// <copyright file="AttributeSourceGeneratorTests.cs" company="Cricle">
// Copyright (c) Cricle. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

namespace Sqlx.Tests.Core
{
    /// <summary>
    /// Tests for AttributeSourceGenerator to improve test coverage.
    /// </summary>
    [TestClass]
    public class AttributeSourceGeneratorTests
    {
        [TestMethod]
        public void GenerateAttributeSource_ReturnsValidCSharpCode()
        {
            // Act
            var result = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            Assert.IsNotNull(result);
            Assert.IsTrue(result.Length > 0);
            Assert.IsTrue(result.Contains("namespace Sqlx.Annotations"));
            Assert.IsTrue(result.Contains("public sealed class SqlxAttribute"));
            Assert.IsTrue(result.Contains("#nullable enable"));
            Assert.IsTrue(result.Contains("// <auto-generated>"));
        }

        [TestMethod]
        public void GenerateAttributeSource_ContainsAllRequiredAttributes()
        {
            // Act
            var result = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            Assert.IsTrue(result.Contains("SqlxAttribute"));
            Assert.IsTrue(result.Contains("RawSqlAttribute"));
            Assert.IsTrue(result.Contains("ExpressionToSqlAttribute"));
            Assert.IsTrue(result.Contains("SqlExecuteTypeAttribute"));
            Assert.IsTrue(result.Contains("RepositoryForAttribute"));
            Assert.IsTrue(result.Contains("TableNameAttribute"));
            Assert.IsTrue(result.Contains("DbSetTypeAttribute"));
            Assert.IsTrue(result.Contains("SqlDefineAttribute"));
        }

        [TestMethod]
        public void GenerateAttributeSource_ContainsAllEnums()
        {
            // Act
            var result = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            Assert.IsTrue(result.Contains("public enum SqlExecuteTypes"));
            Assert.IsTrue(result.Contains("public enum SqlDefineTypes"));
            Assert.IsTrue(result.Contains("Select = 0"));
            Assert.IsTrue(result.Contains("Update = 1"));
            Assert.IsTrue(result.Contains("Insert = 2"));
            Assert.IsTrue(result.Contains("Delete = 3"));
            Assert.IsTrue(result.Contains("BatchInsert = 4"));
            Assert.IsTrue(result.Contains("BatchUpdate = 5"));
            Assert.IsTrue(result.Contains("BatchDelete = 6"));
            Assert.IsTrue(result.Contains("BatchCommand = 7"));
        }

        [TestMethod]
        public void GenerateAttributeSource_ContainsSqlDefineClass()
        {
            // Act
            var result = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            Assert.IsTrue(result.Contains("public static class SqlDefine"));
            Assert.IsTrue(result.Contains("MySql = ("));
            Assert.IsTrue(result.Contains("SqlServer = ("));
            Assert.IsTrue(result.Contains("PgSql = ("));
            Assert.IsTrue(result.Contains("Oracle = ("));
            Assert.IsTrue(result.Contains("DB2 = ("));
            Assert.IsTrue(result.Contains("Sqlite = ("));
        }

        [TestMethod]
        public void GenerateAttributeSource_ContainsExpressionToSqlClass()
        {
            // Act
            var result = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            Assert.IsTrue(result.Contains("public class ExpressionToSql<T>"));
            Assert.IsTrue(result.Contains("public static ExpressionToSql<T> ForSqlServer()"));
            Assert.IsTrue(result.Contains("public static ExpressionToSql<T> ForMySql()"));
            Assert.IsTrue(result.Contains("public static ExpressionToSql<T> ForPostgreSQL()"));
            Assert.IsTrue(result.Contains("public static ExpressionToSql<T> ForOracle()"));
            Assert.IsTrue(result.Contains("public static ExpressionToSql<T> ForDB2()"));
            Assert.IsTrue(result.Contains("public static ExpressionToSql<T> ForSqlite()"));
            Assert.IsTrue(result.Contains("public static ExpressionToSql<T> Create()"));
        }

        [TestMethod]
        public void GenerateAttributeSource_ContainsExpressionToSqlMethods()
        {
            // Act
            var result = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            Assert.IsTrue(result.Contains("public ExpressionToSql<T> Where("));
            Assert.IsTrue(result.Contains("public ExpressionToSql<T> And("));
            Assert.IsTrue(result.Contains("public ExpressionToSql<T> OrderBy<TKey>("));
            Assert.IsTrue(result.Contains("public ExpressionToSql<T> OrderByDescending<TKey>("));
            Assert.IsTrue(result.Contains("public ExpressionToSql<T> Take("));
            Assert.IsTrue(result.Contains("public ExpressionToSql<T> Skip("));
            Assert.IsTrue(result.Contains("public ExpressionToSql<T> Set<TValue>("));
            Assert.IsTrue(result.Contains("public SqlTemplate ToTemplate()"));
            Assert.IsTrue(result.Contains("public string ToSql()"));
            Assert.IsTrue(result.Contains("public string ToWhereClause()"));
            Assert.IsTrue(result.Contains("public string ToAdditionalClause()"));
        }

        [TestMethod]
        public void GenerateAttributeSource_ContainsSqlTemplateRecord()
        {
            // Act
            var result = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            Assert.IsTrue(result.Contains("public readonly record struct SqlTemplate"));
            Assert.IsTrue(result.Contains("string Sql"));
            Assert.IsTrue(result.Contains("global::System.Data.Common.DbParameter[] Parameters"));
        }

        [TestMethod]
        public void GenerateAttributeSource_UsesGlobalSystemTypes()
        {
            // Act
            var result = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            Assert.IsTrue(result.Contains("global::System.AttributeUsage"));
            Assert.IsTrue(result.Contains("global::System.Attribute"));
            Assert.IsTrue(result.Contains("global::System.Type"));
            Assert.IsTrue(result.Contains("global::System.ArgumentNullException"));
            Assert.IsTrue(result.Contains("global::System.IDisposable"));
        }

        [TestMethod]
        public void GenerateAttributeSource_ContainsProperAttributeUsage()
        {
            // Act
            var result = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            // Check SqlxAttribute usage
            Assert.IsTrue(result.Contains("[global::System.AttributeUsage(global::System.AttributeTargets.Method | global::System.AttributeTargets.Parameter,"));
            
            // Check that attributes have proper inheritance settings
            Assert.IsTrue(result.Contains("AllowMultiple = true, Inherited = false"));
            Assert.IsTrue(result.Contains("AllowMultiple = false, Inherited = false"));
        }

        [TestMethod]
        public void GenerateAttributeSource_HasConsistentFormatting()
        {
            // Act
            var result = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            Assert.IsTrue(result.StartsWith("// <auto-generated>"));
            Assert.IsTrue(result.Contains("#nullable enable"));
            
            // Check that all public classes are properly formatted
            var lines = result.Split('\n');
            bool foundPublicClass = false;
            foreach (var line in lines)
            {
                if (line.Trim().StartsWith("public sealed class") || 
                    line.Trim().StartsWith("public class") ||
                    line.Trim().StartsWith("public static class"))
                {
                    foundPublicClass = true;
                }
            }
            Assert.IsTrue(foundPublicClass, "Should contain properly formatted public classes");
        }

        [TestMethod]
        public void GenerateAttributeSource_ContainsDialectSpecificValues()
        {
            // Act
            var result = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            // MySQL uses backticks
            Assert.IsTrue(result.Contains("\"`\""));
            
            // SQL Server uses square brackets
            Assert.IsTrue(result.Contains("\"[\""));
            Assert.IsTrue(result.Contains("\"]\""));
            
            // PostgreSQL uses double quotes
            Assert.IsTrue(result.Contains("\"\\\"\""));
            
            // Parameter prefixes
            Assert.IsTrue(result.Contains("\"@\""));
            Assert.IsTrue(result.Contains("\"$\""));
            Assert.IsTrue(result.Contains("\":\""));
            Assert.IsTrue(result.Contains("\"?\""));
        }

        [TestMethod]
        public void GenerateAttributeSource_IsDeterministic()
        {
            // Act
            var result1 = AttributeSourceGenerator.GenerateAttributeSource();
            var result2 = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            Assert.AreEqual(result1, result2, "Generated source should be deterministic");
        }

        [TestMethod]
        public void GenerateAttributeSource_ContainsAllDatabaseDialects()
        {
            // Act
            var result = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            Assert.IsTrue(result.Contains("MySql = 0"));
            Assert.IsTrue(result.Contains("SqlServer = 1"));
            Assert.IsTrue(result.Contains("Postgresql = 2"));
            Assert.IsTrue(result.Contains("Oracle = 3"));
            Assert.IsTrue(result.Contains("DB2 = 4"));
            Assert.IsTrue(result.Contains("SQLite = 5"));
        }

        [TestMethod]
        public void GenerateAttributeSource_ContainsExpressionParsing()
        {
            // Act
            var result = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            Assert.IsTrue(result.Contains("private string ParseExpression("));
            Assert.IsTrue(result.Contains("private string ParseBinaryExpression("));
            Assert.IsTrue(result.Contains("private string GetColumnName("));
            Assert.IsTrue(result.Contains("private string GetConstantValue("));
            Assert.IsTrue(result.Contains("private string FormatConstantValue("));
        }

        [TestMethod]
        public void GenerateAttributeSource_ContainsBinaryOperators()
        {
            // Act
            var result = AttributeSourceGenerator.GenerateAttributeSource();

            // Assert
            Assert.IsTrue(result.Contains("ExpressionType.Equal"));
            Assert.IsTrue(result.Contains("ExpressionType.NotEqual"));
            Assert.IsTrue(result.Contains("ExpressionType.GreaterThan"));
            Assert.IsTrue(result.Contains("ExpressionType.GreaterThanOrEqual"));
            Assert.IsTrue(result.Contains("ExpressionType.LessThan"));
            Assert.IsTrue(result.Contains("ExpressionType.LessThanOrEqual"));
            Assert.IsTrue(result.Contains("ExpressionType.AndAlso"));
            Assert.IsTrue(result.Contains("ExpressionType.OrElse"));
            Assert.IsTrue(result.Contains("ExpressionType.Add"));
            Assert.IsTrue(result.Contains("ExpressionType.Subtract"));
            Assert.IsTrue(result.Contains("ExpressionType.Multiply"));
            Assert.IsTrue(result.Contains("ExpressionType.Divide"));
            Assert.IsTrue(result.Contains("ExpressionType.Modulo"));
        }
    }
}
