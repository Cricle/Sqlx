using System;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;
using Microsoft.Data.Sqlite;
using TodoWebApi.Models;
using Sqlx;
using Sqlx.Annotations;

namespace TodoWebApi.Services;

/// <summary>
/// Todo data access repository interface - demonstrates standard CRUD + custom methods.
/// </summary>
public interface ITodoRepository
{
    // Standard CRUD operations
    
    /// <summary>Gets todo by ID.</summary>
    [SqlxAttribute("SELECT {{columns}} FROM {{table}} WHERE id = @id")]
    Task<Todo?> GetByIdAsync(long id);

    /// <summary>Gets all todos with pagination.</summary>
    [SqlxAttribute("SELECT {{columns}} FROM {{table}} {{orderby created_at --desc}} {{limit --param limit}} {{offset --param offset}}")]
    Task<List<Todo>> GetAllAsync(int limit = 100, int offset = 0);

    /// <summary>Inserts new todo.</summary>
    [SqlxAttribute("INSERT INTO {{table}} ({{columns --exclude Id}}) VALUES ({{values --exclude Id}})")]
    Task<int> InsertAsync(Todo todo);

    /// <summary>Updates todo.</summary>
    [SqlxAttribute("UPDATE {{table}} SET {{set --exclude Id CreatedAt}} WHERE id = @id")]
    Task<int> UpdateAsync(Todo todo);

    /// <summary>Deletes todo.</summary>
    [SqlxAttribute("DELETE FROM {{table}} WHERE id = @id")]
    Task<int> DeleteAsync(long id);

    /// <summary>Gets total count of todos.</summary>
    [SqlxAttribute("SELECT COUNT(*) FROM {{table}}")]
    Task<int> CountAsync();

    /// <summary>Checks if todo exists.</summary>
    [SqlxAttribute("SELECT CASE WHEN EXISTS(SELECT 1 FROM {{table}} WHERE id = @id) THEN 1 ELSE 0 END")]
    Task<bool> ExistsAsync(long id);

    // Business-specific queries

    /// <summary>Searches todos by title or description.</summary>
    [SqlxAttribute("SELECT {{columns}} FROM {{table}} WHERE title LIKE @query OR description LIKE @query {{orderby updated_at --desc}}")]
    Task<List<Todo>> SearchAsync(string query);

    /// <summary>Gets todos by completion status.</summary>
    [SqlxAttribute("SELECT {{columns}} FROM {{table}} WHERE is_completed = @isCompleted {{orderby completed_at --desc}}")]
    Task<List<Todo>> GetByCompletionStatusAsync(bool isCompleted = true);

    /// <summary>Gets high priority todos.</summary>
    [SqlxAttribute("SELECT {{columns}} FROM {{table}} WHERE priority >= @minPriority AND is_completed = @isCompleted {{orderby priority --desc}} {{orderby created_at --desc}}")]
    Task<List<Todo>> GetByPriorityAsync(int minPriority = 3, bool isCompleted = false);

    /// <summary>Gets todos due soon.</summary>
    [SqlxAttribute("SELECT {{columns}} FROM {{table}} WHERE due_date IS NOT NULL AND due_date <= @dueDate AND is_completed = @isCompleted {{orderby due_date}}")]
    Task<List<Todo>> GetDueSoonAsync(DateTime dueDate, bool isCompleted = false);

    /// <summary>Marks todo as completed.</summary>
    [SqlxAttribute("UPDATE {{table}} SET is_completed = 1, completed_at = @completedAt, updated_at = @updatedAt WHERE id = @id")]
    Task<int> MarkAsCompletedAsync(long id, DateTime completedAt, DateTime updatedAt);

    /// <summary>Batch updates priority for multiple todos.</summary>
    [SqlxAttribute("UPDATE {{table}} SET priority = @priority, updated_at = @updatedAt WHERE id IN (SELECT value FROM json_each(@idsJson))")]
    Task<int> BatchUpdatePriorityAsync(string idsJson, int priority, DateTime updatedAt);
}

/// <summary>
/// Todo repository implementation.
/// All methods are automatically generated at compile time by Sqlx source generator.
/// </summary>
[TableName("todos")]
[SqlDefine(SqlDefineTypes.SQLite)]
[RepositoryFor(typeof(ITodoRepository))]
public partial class TodoRepository(SqliteConnection connection) : ITodoRepository
{
    // All method implementations are generated by Sqlx at compile time:
    // - GetByIdAsync, GetAllAsync, InsertAsync, UpdateAsync, DeleteAsync, CountAsync, ExistsAsync
    // - SearchAsync, GetByCompletionStatusAsync, GetByPriorityAsync, GetDueSoonAsync
    // - MarkAsCompletedAsync, BatchUpdatePriorityAsync
    
    // Generated code includes parameter binding, entity mapping, and all ADO.NET operations.

    // Optional: execution monitoring
    partial void OnExecuting(string operationName, global::System.Data.IDbCommand command)
    {
        // View generated SQL during debugging
        System.Diagnostics.Debug.WriteLine($"[{operationName}] SQL: {command.CommandText}");
    }
}
