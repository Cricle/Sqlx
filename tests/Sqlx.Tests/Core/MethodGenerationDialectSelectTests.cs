// -----------------------------------------------------------------------
// <copyright file="MethodGenerationDialectSelectTests.cs" company="Cricle">
// Copyright (c) Cricle. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;

namespace Sqlx.Tests.Core
{
    [TestClass]
    public class MethodGenerationDialectSelectTests
    {
        [DataTestMethod]
        [DataRow(1)]
        [DataRow(0)]
        [DataRow(2)]
        [DataRow(5)]
        public void Select_Uses_Dialect_Table_Wrapping(int dialect)
        {
            var source = $@"using Sqlx.Annotations; using System.Data.Common; using System.Threading.Tasks; 
namespace N {{ 
  [SqlDefine({dialect})]
  [RepositoryFor(typeof(IRepo))]
  public partial class Repo : IRepo {{ private readonly DbConnection connection; public Repo(DbConnection c){{connection=c;}} }}
  public interface IRepo {{
    [SqlExecuteType(SqlExecuteTypes.Select, ""users"")] Task<int> GetAsync();
  }}
}}";

            var code = string.Join("\n", Generate(source));
            StringAssert.Contains(code, "SELECT COUNT(*) FROM");
            StringAssert.Contains(code, "users");
        }

        private static List<string> Generate(string source)
        {
            var syntaxTree = CSharpSyntaxTree.ParseText(source);
            var references = new List<MetadataReference>
            {
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(System.Data.Common.DbConnection).Assembly.Location)
            };

            var compilation = CSharpCompilation.Create(
                "DialectSelectAsm",
                new[] { syntaxTree },
                references,
                new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

            var generator = new CSharpGenerator();
            var driver = CSharpGeneratorDriver.Create(generator);
            driver.RunGeneratorsAndUpdateCompilation(compilation, out var newCompilation, out var diags);

            var generated = new List<string>();
            foreach (var tree in newCompilation.SyntaxTrees)
            {
                var text = tree.ToString();
                if (text.Contains("// <auto-generated>") || string.IsNullOrEmpty(tree.FilePath))
                    generated.Add(text);
            }
            return generated;
        }
    }
}


