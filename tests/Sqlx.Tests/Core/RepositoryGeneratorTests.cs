using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System.Linq;
using Sqlx.Core;

namespace Sqlx.Tests.Core
{
    [TestClass]
    public class RepositoryGeneratorTests
    {
        private CSharpCompilation _compilation = null!;
        private INamedTypeSymbol _repositoryClass = null!;
        private INamedTypeSymbol _serviceInterface = null!;
        private INamedTypeSymbol _entityType = null!;

        [TestInitialize]
        public void Setup()
        {
            var sourceCode = @"
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace TestNamespace
{
    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
    }

    public interface IUserService
    {
        Task<User?> GetByIdAsync(int id);
        Task<List<User>> GetAllAsync();
        Task<int> CreateAsync(User user);
        Task<bool> UpdateAsync(User user);
        Task<bool> DeleteAsync(int id);
    }

    [Sqlx.Annotations.RepositoryFor(typeof(IUserService))]
    public partial class UserRepository : IUserService
    {
        public Task<User?> GetByIdAsync(int id) => throw new NotImplementedException();
        public Task<List<User>> GetAllAsync() => throw new NotImplementedException();
        public Task<int> CreateAsync(User user) => throw new NotImplementedException();
        public Task<bool> UpdateAsync(User user) => throw new NotImplementedException();
        public Task<bool> DeleteAsync(int id) => throw new NotImplementedException();
    }
}";

            var syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
            var references = new[]
            {
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(System.Collections.Generic.List<>).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(System.Threading.Tasks.Task).Assembly.Location)
            };

            _compilation = CSharpCompilation.Create("TestAssembly", new[] { syntaxTree }, references);

            _repositoryClass = _compilation.GetTypeByMetadataName("TestNamespace.UserRepository")!;
            _serviceInterface = _compilation.GetTypeByMetadataName("TestNamespace.IUserService")!;
            _entityType = _compilation.GetTypeByMetadataName("TestNamespace.User")!;
        }

        #region GenerateImplementation Tests

        [TestMethod]
        public void RepositoryGenerator_GenerateImplementation_ShouldGenerateCompleteImplementation()
        {
            // Arrange
            var sb = new IndentedStringBuilder(string.Empty);
            var tableName = "users";

            // Act
            RepositoryGenerator.GenerateImplementation(sb, _repositoryClass, _serviceInterface, _entityType, tableName);

            // Assert
            var result = sb.ToString();
            Assert.IsTrue(result.Contains("// <auto-generated>"));
            Assert.IsTrue(result.Contains("This file was generated by Sqlx Repository Generator"));
            Assert.IsTrue(result.Contains("#nullable disable"));
            Assert.IsTrue(result.Contains("namespace TestNamespace"));
            Assert.IsTrue(result.Contains("partial class UserRepository"));
        }

        [TestMethod]
        public void RepositoryGenerator_GenerateImplementation_ShouldIncludeRequiredUsings()
        {
            // Arrange
            var sb = new IndentedStringBuilder(string.Empty);
            var tableName = "users";

            // Act
            RepositoryGenerator.GenerateImplementation(sb, _repositoryClass, _serviceInterface, _entityType, tableName);

            // Assert
            var result = sb.ToString();
            Assert.IsTrue(result.Contains("using System;"));
            Assert.IsTrue(result.Contains("using System.Data;"));
            Assert.IsTrue(result.Contains("using System.Data.Common;"));
            Assert.IsTrue(result.Contains("using System.Threading.Tasks;"));
        }

        [TestMethod]
        public void RepositoryGenerator_GenerateImplementation_ShouldGenerateClassDeclaration()
        {
            // Arrange
            var sb = new IndentedStringBuilder(string.Empty);
            var tableName = "users";

            // Act
            RepositoryGenerator.GenerateImplementation(sb, _repositoryClass, _serviceInterface, _entityType, tableName);

            // Assert
            var result = sb.ToString();
            Assert.IsTrue(result.Contains("partial class UserRepository"));
            Assert.IsTrue(result.Contains(": TestNamespace.IUserService"));
        }

        [TestMethod]
        public void RepositoryGenerator_GenerateImplementation_WithNullEntityType_ShouldHandleGracefully()
        {
            // Arrange
            var sb = new IndentedStringBuilder(string.Empty);
            var tableName = "users";

            // Act
            RepositoryGenerator.GenerateImplementation(sb, _repositoryClass, _serviceInterface, null, tableName);

            // Assert
            var result = sb.ToString();
            Assert.IsTrue(result.Contains("partial class UserRepository"));
            // Should still generate basic structure even without entity type
        }

        [TestMethod]
        public void RepositoryGenerator_GenerateImplementation_WithEmptyTableName_ShouldHandleGracefully()
        {
            // Arrange
            var sb = new IndentedStringBuilder(string.Empty);
            var tableName = "";

            // Act
            RepositoryGenerator.GenerateImplementation(sb, _repositoryClass, _serviceInterface, _entityType, tableName);

            // Assert
            var result = sb.ToString();
            Assert.IsTrue(result.Contains("partial class UserRepository"));
            // Should still generate structure with empty table name
        }

        #endregion

        #region File Header Tests

        [TestMethod]
        public void RepositoryGenerator_GenerateFileHeader_ShouldIncludeAutoGeneratedComment()
        {
            // Arrange
            var sb = new IndentedStringBuilder(string.Empty);
            var tableName = "users";

            // Act
            RepositoryGenerator.GenerateImplementation(sb, _repositoryClass, _serviceInterface, _entityType, tableName);

            // Assert
            var result = sb.ToString();
            Assert.IsTrue(result.Contains("// <auto-generated>"));
            Assert.IsTrue(result.Contains("// This file was generated by Sqlx Repository Generator"));
            Assert.IsTrue(result.Contains("// Changes to this file may cause incorrect behavior"));
            Assert.IsTrue(result.Contains("// </auto-generated>"));
        }

        [TestMethod]
        public void RepositoryGenerator_GenerateFileHeader_ShouldIncludeNullableDirective()
        {
            // Arrange
            var sb = new IndentedStringBuilder(string.Empty);
            var tableName = "users";

            // Act
            RepositoryGenerator.GenerateImplementation(sb, _repositoryClass, _serviceInterface, _entityType, tableName);

            // Assert
            var result = sb.ToString();
            Assert.IsTrue(result.Contains("#nullable disable"));
        }

        [TestMethod]
        public void RepositoryGenerator_GenerateFileHeader_ShouldIncludePragmaWarnings()
        {
            // Arrange
            var sb = new IndentedStringBuilder(string.Empty);
            var tableName = "users";

            // Act
            RepositoryGenerator.GenerateImplementation(sb, _repositoryClass, _serviceInterface, _entityType, tableName);

            // Assert
            var result = sb.ToString();
            Assert.IsTrue(result.Contains("#pragma warning disable"));
            Assert.IsTrue(result.Contains("CS8618"));
            Assert.IsTrue(result.Contains("CS8625"));
            Assert.IsTrue(result.Contains("CS8629"));
        }

        #endregion

        #region Namespace and Class Generation Tests

        [TestMethod]
        public void RepositoryGenerator_GenerateNamespace_ShouldUseCorrectNamespace()
        {
            // Arrange
            var sb = new IndentedStringBuilder(string.Empty);
            var tableName = "users";

            // Act
            RepositoryGenerator.GenerateImplementation(sb, _repositoryClass, _serviceInterface, _entityType, tableName);

            // Assert
            var result = sb.ToString();
            Assert.IsTrue(result.Contains("namespace TestNamespace"));
        }

        [TestMethod]
        public void RepositoryGenerator_GenerateClass_ShouldGeneratePartialClass()
        {
            // Arrange
            var sb = new IndentedStringBuilder(string.Empty);
            var tableName = "users";

            // Act
            RepositoryGenerator.GenerateImplementation(sb, _repositoryClass, _serviceInterface, _entityType, tableName);

            // Assert
            var result = sb.ToString();
            Assert.IsTrue(result.Contains("partial class UserRepository"));
            Assert.IsTrue(result.Contains(": TestNamespace.IUserService"));
        }

        #endregion

        #region Integration Tests

        [TestMethod]
        public void RepositoryGenerator_FullGeneration_ShouldProduceValidCode()
        {
            // Arrange
            var sb = new IndentedStringBuilder(string.Empty);
            var tableName = "users";

            // Act
            RepositoryGenerator.GenerateImplementation(sb, _repositoryClass, _serviceInterface, _entityType, tableName);

            // Assert
            var result = sb.ToString();

            // Should contain all major sections
            Assert.IsTrue(result.Contains("// <auto-generated>"));
            Assert.IsTrue(result.Contains("using System;"));
            Assert.IsTrue(result.Contains("namespace TestNamespace"));
            Assert.IsTrue(result.Contains("partial class UserRepository"));
            Assert.IsTrue(result.Contains(": TestNamespace.IUserService"));

            // Should have proper structure (opening and closing braces)
            var openBraces = result.Count(c => c == '{');
            var closeBraces = result.Count(c => c == '}');
            Assert.AreEqual(openBraces, closeBraces, "Generated code should have balanced braces");
        }

        [TestMethod]
        public void RepositoryGenerator_WithDifferentClassNames_ShouldGenerateCorrectly()
        {
            // Arrange - Create a different repository class
            var differentSourceCode = @"
namespace TestNamespace
{
    public interface IProductService
    {
        Task<object> GetAsync();
    }

    [Sqlx.Annotations.RepositoryFor(typeof(IProductService))]
    public partial class ProductRepository : IProductService
    {
        public Task<object> GetAsync() => throw new NotImplementedException();
    }
}";

            var syntaxTree = CSharpSyntaxTree.ParseText(differentSourceCode);
            var references = new[]
            {
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(System.Threading.Tasks.Task).Assembly.Location)
            };

            var compilation = CSharpCompilation.Create("TestAssembly2", new[] { syntaxTree }, references);
            var repositoryClass = compilation.GetTypeByMetadataName("TestNamespace.ProductRepository")!;
            var serviceInterface = compilation.GetTypeByMetadataName("TestNamespace.IProductService")!;

            var sb = new IndentedStringBuilder(string.Empty);
            var tableName = "products";

            // Act
            RepositoryGenerator.GenerateImplementation(sb, repositoryClass, serviceInterface, null, tableName);

            // Assert
            var result = sb.ToString();
            Assert.IsTrue(result.Contains("partial class ProductRepository"));
            Assert.IsTrue(result.Contains(": TestNamespace.IProductService"));
        }

        #endregion

        #region Error Handling Tests

        [TestMethod]
        public void RepositoryGenerator_WithGlobalNamespace_ShouldHandleCorrectly()
        {
            // Arrange - Create a class in global namespace
            var globalSourceCode = @"
using System.Threading.Tasks;

public interface IGlobalService
{
    Task<object> GetAsync();
}

[Sqlx.Annotations.RepositoryFor(typeof(IGlobalService))]
public partial class GlobalRepository : IGlobalService
{
    public Task<object> GetAsync() => throw new System.NotImplementedException();
}";

            var syntaxTree = CSharpSyntaxTree.ParseText(globalSourceCode);
            var references = new[]
            {
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(System.Threading.Tasks.Task).Assembly.Location)
            };

            var compilation = CSharpCompilation.Create("TestAssembly3", new[] { syntaxTree }, references);
            var repositoryClass = compilation.GetTypeByMetadataName("GlobalRepository")!;
            var serviceInterface = compilation.GetTypeByMetadataName("IGlobalService")!;

            var sb = new IndentedStringBuilder(string.Empty);
            var tableName = "global_table";

            // Act
            RepositoryGenerator.GenerateImplementation(sb, repositoryClass, serviceInterface, null, tableName);

            // Assert
            var result = sb.ToString();
            Assert.IsTrue(result.Contains("partial class GlobalRepository"));
            // Should not contain namespace declaration for global namespace
            Assert.IsFalse(result.Contains("namespace <global namespace>"));
        }

        #endregion
    }
}
