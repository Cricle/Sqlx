<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sqlx</name>
    </assembly>
    <members>
        <member name="T:Sqlx.Annotations.DbSetTypeAttribute">
            <summary>
            Specifies the DbSet type for a property or field.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.DbSetTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.DbSetTypeAttribute"/> class.
            </summary>
            <param name="entityType">The entity type.</param>
        </member>
        <member name="P:Sqlx.Annotations.DbSetTypeAttribute.EntityType">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.ExpressionToSqlAttribute">
            <summary>
            Indicates that a parameter should be converted from a LINQ expression to SQL.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.RepositoryForAttribute">
            <summary>
            Marks a class as a repository for a specified service interface.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.RepositoryForAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.RepositoryForAttribute"/> class
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.RepositoryForAttribute.ServiceType">
            <summary>
            Gets the service interface type.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlDefineTypes">
            <summary>
            SQL dialect types enumeration.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.MySql">
            <summary>
            MySQL database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.SqlServer">
            <summary>
            SQL Server database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.PostgreSql">
            <summary>
            PostgreSQL database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.Oracle">
            <summary>
            Oracle database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.DB2">
            <summary>
            DB2 database dialect type.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.SQLite">
            <summary>
            SQLite database dialect type.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlDefineAttribute">
            <summary>
            Specifies the SQL dialect type for a class or method.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlDefineAttribute.#ctor(Sqlx.Annotations.SqlDefineTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.SqlDefineAttribute"/> class.
            </summary>
            <param name="dialectType">The SQL dialect type.</param>
        </member>
        <member name="P:Sqlx.Annotations.SqlDefineAttribute.DialectType">
            <summary>
            Gets the SQL dialect type.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlExecuteTypeAttribute">
            <summary>
            Specifies the SQL execution type for a method.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlExecuteTypeAttribute.#ctor(Sqlx.SqlOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.SqlExecuteTypeAttribute"/> class.
            </summary>
            <param name="operation">The SQL operation type.</param>
        </member>
        <member name="P:Sqlx.Annotations.SqlExecuteTypeAttribute.Operation">
            <summary>
            Gets the SQL operation type.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlTemplateAttribute">
            <summary>
            标记方法使用编译时 SQL 模板，提供安全的 SQL 拼接功能
            与 SqlxAttribute 结合使用，在编译时生成高性能的 SQL 代码
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlTemplateAttribute.#ctor(System.String)">
            <summary>
            初始化 SqlTemplateAttribute
            </summary>
            <param name="template">SQL 模板字符串，支持 @{参数名} 占位符</param>
        </member>
        <member name="P:Sqlx.Annotations.SqlTemplateAttribute.Template">
            <summary>
            SQL 模板字符串，使用 @{参数名} 作为占位符
            例如: "SELECT * FROM Users WHERE Id = @{userId} AND Name = @{userName}"
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlTemplateAttribute.Dialect">
            <summary>
            数据库方言类型，默认为 SqlServer
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlTemplateAttribute.SafeMode">
            <summary>
            是否启用安全模式，默认为 true
            安全模式下会进行 SQL 注入检查和参数验证
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlTemplateAttribute.ValidateParameters">
            <summary>
            是否验证参数，默认为 true
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlTemplateAttribute.EnableCaching">
            <summary>
            是否缓存生成的 SQL，默认为 true
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlTemplateAttribute.Operation">
            <summary>
            执行类型，用于优化生成的代码
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlxAttribute">
            <summary>
            指定方法的 SQL 命令文本、原始 SQL 或存储过程名称
            与 SqlTemplateAttribute 配合使用时，提供编译时 SQL 生成功能
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlxAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.SqlxAttribute"/> class.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlxAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.SqlxAttribute"/> class with stored procedure name
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlxAttribute.StoredProcedureName">
            <summary>
            Gets or sets the stored procedure name.
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlxAttribute.Sql">
            <summary>
            Gets or sets the raw SQL command text.
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlxAttribute.AcceptsSqlTemplate">
            <summary>
            Gets or sets whether this method accepts SqlTemplate as parameter.
            When true, the method can accept SqlTemplate parameter for dynamic SQL generation.
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlxAttribute.SqlTemplateParameterName">
            <summary>
            Gets or sets the parameter name for SqlTemplate when AcceptsSqlTemplate is true.
            Defaults to "template" if not specified.
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlxAttribute.UseCompileTimeTemplate">
            <summary>
            指示此方法是否使用编译时 SQL 模板生成
            当为 true 时，将与 SqlTemplateAttribute 协作生成高性能代码
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlxAttribute.TemplateCacheKey">
            <summary>
            编译时模板的缓存键，用于优化重复查询
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.TableNameAttribute">
            <summary>
            Specifies the table name for a class.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.TableNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.TableNameAttribute"/> class.
            </summary>
            <param name="tableName">The table name.</param>
        </member>
        <member name="P:Sqlx.Annotations.TableNameAttribute.TableName">
            <summary>
            Gets the table name.
            </summary>
        </member>
        <member name="T:Sqlx.ExpressionToSql`1">
            <summary>
            Simple and efficient LINQ Expression to SQL converter (AOT-friendly, lock-free design)
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ForSqlServer">
            <summary>SQL Server dialect</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ForMySql">
            <summary>MySQL dialect</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ForPostgreSQL">
            <summary>PostgreSQL dialect</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ForSqlite">
            <summary>SQLite dialect</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ForOracle">
            <summary>Oracle dialect</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ForDB2">
            <summary>DB2 dialect</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Create">
            <summary>Default dialect (SQL Server)</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.#ctor(Sqlx.SqlDialect)">
            <summary>
            Initializes with specified SQL dialect
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Select(System.String[])">
            <summary>Sets custom SELECT columns</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Sets SELECT columns using expression</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>Sets SELECT columns using multiple expressions</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ConfigureSelect(System.Collections.Generic.List{System.String})">
            <summary>Configures SELECT columns</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.GetEntityProperties``1">
            <summary>Gets entity properties using generics (AOT-friendly)</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ExtractColumnsFromSelector``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            统一的列提取逻辑，避免重复代码
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Adds WHERE condition</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Adds AND condition (alias for Where)</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Adds ORDER BY ascending</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Adds ORDER BY descending</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Take(System.Int32)">
            <summary>Limits result count</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Skip(System.Int32)">
            <summary>Skips specified number of records</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ConfigureLimit(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Configures pagination limits</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>Sets column value for UPDATE</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Sets column value using expression for UPDATE</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ConfigureSet``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Configures UPDATE SET clause</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.AsInsert">
            <summary>Sets as INSERT operation</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.AsInsert(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Sets as INSERT operation with specific columns</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.AsInsertInto(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Sets as INSERT INTO with explicit columns (AOT-friendly)</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.AsInsertIntoAll">
            <summary>Sets as INSERT INTO all columns</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.AsInsertSelect(System.String)">
            <summary>Sets as INSERT using SELECT subquery</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.AsInsertSelect``1(Sqlx.ExpressionToSql{``0})">
            <summary>Sets as INSERT using another query</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Insert">
            <summary>Creates INSERT operation</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Insert(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Sets INSERT columns using expression</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.InsertInto(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>INSERT INTO with explicit columns (AOT-friendly)</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.InsertIntoAll">
            <summary>INSERT INTO all columns (uses reflection)</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.InsertSelect(System.String)">
            <summary>INSERT using SELECT subquery</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.InsertSelect``1(Sqlx.ExpressionToSql{``0})">
            <summary>INSERT using another query</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ConfigureInsert(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Configures INSERT operation with optional columns</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ConfigureInsertAll">
            <summary>Configures INSERT with all entity columns</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ConfigureInsertSelect(System.String)">
            <summary>Configures INSERT using SELECT subquery</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ConfigureInsertSelect``1(Sqlx.ExpressionToSql{``0})">
            <summary>Configures INSERT using another query</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.SetInsertColumns(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            统一的INSERT列设置逻辑
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Values(System.Object[])">
            <summary>Specifies INSERT values</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.AddValues(System.Object[])">
            <summary>Adds multiple INSERT values</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ConfigureValues(System.Object[])">
            <summary>Configures INSERT values</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Adds GROUP BY clause, returns grouped query</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.AddGroupBy(System.String)">
            <summary>Adds GROUP BY column</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Having(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Adds HAVING condition</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ConfigureGroupBy(System.String)">
            <summary>Configures GROUP BY</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ConfigureHaving(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Configures HAVING condition</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Delete">
            <summary>Creates DELETE statement</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Creates DELETE statement with WHERE condition</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.Update">
            <summary>Creates UPDATE statement</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ConfigureDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Configures DELETE operation</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ConfigureUpdate">
            <summary>Configures UPDATE operation</summary>
        </member>
        <member name="F:Sqlx.ExpressionToSql`1._custom">
            <summary>
            设置自定义 SELECT 子句（内部使用）。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.BuildSql">
            <summary>
            构建 SQL 语句，简单直接无缓存。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.BuildDeleteSql">
            <summary>
            构建DELETE SQL语句。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.UseParameterizedQueries">
            <summary>
            启用参数化查询模式，用于生成SqlTemplate
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ToTemplate">
            <summary>
            转换为 SQL 模板。如果未启用参数化模式，将自动启用并重新构建查询。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ToSql">
            <summary>
            转换为 SQL 字符串。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ToWhereClause">
            <summary>
            生成 WHERE 子句部分。
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSql`1.ToAdditionalClause">
            <summary>
            生成额外的子句（GROUP BY, HAVING, ORDER BY, LIMIT, OFFSET）。
            </summary>
        </member>
        <member name="T:Sqlx.SqlOperation">
            <summary>SQL operation types</summary>
        </member>
        <member name="F:Sqlx.SqlOperation.Select">
            <summary>SELECT operation</summary>
        </member>
        <member name="F:Sqlx.SqlOperation.Insert">
            <summary>INSERT operation</summary>
        </member>
        <member name="F:Sqlx.SqlOperation.Update">
            <summary>UPDATE operation</summary>
        </member>
        <member name="F:Sqlx.SqlOperation.Delete">
            <summary>DELETE operation</summary>
        </member>
        <member name="T:Sqlx.Any">
            <summary>Placeholder values for dynamic SQL generation</summary>
        </member>
        <member name="M:Sqlx.Any.Value``1">
            <summary>Generic placeholder value</summary>
        </member>
        <member name="M:Sqlx.Any.Value``1(System.String)">
            <summary>Named generic placeholder value</summary>
        </member>
        <member name="M:Sqlx.Any.String">
            <summary>String placeholder</summary>
        </member>
        <member name="M:Sqlx.Any.String(System.String)">
            <summary>Named string placeholder</summary>
        </member>
        <member name="M:Sqlx.Any.Int">
            <summary>Integer placeholder</summary>
        </member>
        <member name="M:Sqlx.Any.Int(System.String)">
            <summary>Named integer placeholder</summary>
        </member>
        <member name="M:Sqlx.Any.Bool">
            <summary>Boolean placeholder</summary>
        </member>
        <member name="M:Sqlx.Any.Bool(System.String)">
            <summary>Named boolean placeholder</summary>
        </member>
        <member name="M:Sqlx.Any.DateTime">
            <summary>DateTime placeholder</summary>
        </member>
        <member name="M:Sqlx.Any.DateTime(System.String)">
            <summary>Named DateTime placeholder</summary>
        </member>
        <member name="M:Sqlx.Any.Guid">
            <summary>Guid placeholder</summary>
        </member>
        <member name="M:Sqlx.Any.Guid(System.String)">
            <summary>Named Guid placeholder</summary>
        </member>
        <member name="T:Sqlx.GroupedExpressionToSql`2">
            <summary>
            Grouped query object supporting aggregation operations
            </summary>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.Select``1(System.Linq.Expressions.Expression{System.Func{Sqlx.IGrouping{`1,`0},``0}})">
            <summary>
            Selects grouped result projection
            </summary>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.Having(System.Linq.Expressions.Expression{System.Func{Sqlx.IGrouping{`1,`0},System.Boolean}})">
            <summary>
            添加 HAVING 条件。
            </summary>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.ParseLambdaExpressionEnhanced(System.Linq.Expressions.Expression)">
            <summary>
            增强的Lambda表达式解析，支持复杂的嵌套函数和表达式
            </summary>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.ParseLambdaBody(System.Linq.Expressions.Expression)">
            <summary>
            解析Lambda表达式的Body部分，支持嵌套函数
            </summary>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.ParseMethodCallInAggregate(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            在聚合函数上下文中解析方法调用
            </summary>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.ToSql">
            <summary>
            转换为SQL查询字符串。
            </summary>
            <returns>SQL查询字符串。</returns>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.ToTemplate">
            <summary>
            转换为SQL模板。
            </summary>
            <returns>SQL模板实例。</returns>
        </member>
        <member name="M:Sqlx.GroupedExpressionToSql`2.Dispose">
            <summary>
            释放资源，清理内部查询对象。
            </summary>
        </member>
        <member name="T:Sqlx.IGrouping`2">
            <summary>Grouping interface similar to LINQ IGrouping</summary>
        </member>
        <member name="P:Sqlx.IGrouping`2.Key">
            <summary>Gets the grouping key</summary>
        </member>
        <member name="T:Sqlx.GroupingExtensions">
            <summary>Extensions for grouping operations (expression tree parsing only)</summary>
        </member>
        <member name="M:Sqlx.GroupingExtensions.Count``2(Sqlx.IGrouping{``0,``1})">
            <summary>Count aggregation</summary>
        </member>
        <member name="M:Sqlx.GroupingExtensions.Sum``3(Sqlx.IGrouping{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>Sum aggregation</summary>
        </member>
        <member name="M:Sqlx.GroupingExtensions.Average``2(Sqlx.IGrouping{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Double}})">
            <summary>Average aggregation for double</summary>
        </member>
        <member name="M:Sqlx.GroupingExtensions.Average``2(Sqlx.IGrouping{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Decimal}})">
            <summary>Average aggregation for decimal</summary>
        </member>
        <member name="M:Sqlx.GroupingExtensions.Max``3(Sqlx.IGrouping{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>Max aggregation</summary>
        </member>
        <member name="M:Sqlx.GroupingExtensions.Min``3(Sqlx.IGrouping{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>Min aggregation</summary>
        </member>
        <member name="T:Sqlx.ExpressionToSqlBase">
            <summary>
            Abstract base class for ExpressionToSql with common expression parsing and database dialect adaptation
            </summary>
        </member>
        <member name="F:Sqlx.ExpressionToSqlBase._parameterized">
            <summary>
            Whether to use parameterized query mode (default: false - inline constant values)
            </summary>
        </member>
        <member name="F:Sqlx.ExpressionToSqlBase._counter">
            <summary>
            Parameter counter for generating unique parameter names
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.#ctor(Sqlx.SqlDialect,System.Type)">
            <summary>Initializes with SQL dialect and entity type</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.AddGroupBy(System.String)">
            <summary>Adds GROUP BY column</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.SetTableName(System.String)">
            <summary>Sets table name</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseExpression(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Enhanced expression parsing with support for math functions, string functions, and nested expressions
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseExpressionRaw(System.Linq.Expressions.Expression)">
            <summary>Parses expression as raw value</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseConditionalExpression(System.Linq.Expressions.ConditionalExpression)">
            <summary>Parses conditional expression</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>Parses method call expression</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ExtractParameterName(System.Linq.Expressions.MethodCallExpression)">
            <summary>Extracts parameter name from method arguments</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetDefaultValueForValueType(System.Type)">
            <summary>
            为值类型获取默认值（AOT友好）
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseAggregateMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            解析聚合函数中的方法调用，支持嵌套函数
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseLambdaExpression(System.Linq.Expressions.Expression)">
            <summary>
            增强的Lambda表达式解析，支持复杂的嵌套函数
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.TryParseBooleanComparison(System.Linq.Expressions.BinaryExpression)">
            <summary>
            尝试解析布尔比较，返回 null 如果不是布尔比较
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            解析二元表达式为SQL字符串
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetColumnName(System.Linq.Expressions.Expression)">
            <summary>
            获取表达式对应的列名
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetConstantValue(System.Linq.Expressions.ConstantExpression)">
            <summary>
            获取常量表达式的值
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.IsEntityProperty(System.Linq.Expressions.MemberExpression)">
            <summary>Checks if member is entity property</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetMemberValueOptimized(System.Linq.Expressions.MemberExpression)">
            <summary>Gets member value optimized</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetSimpleDefaultValue(System.Type)">
            <summary>
            获取简单的默认值（不使用复杂反射）
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.FormatConstantValue``1(``0)">
            <summary>Formats constant value</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.FormatConstantValue(System.Object)">
            <summary>Formats constant value</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.CreateParameter``1(``0)">
            <summary>Creates parameter</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.CreateParameter(System.Object)">
            <summary>Creates parameter</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.NeedsParentheses(System.Linq.Expressions.Expression)">
            <summary>Checks if expression needs parentheses</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.RemoveOuterParentheses(System.String)">
            <summary>Removes outer parentheses from condition</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.IsBooleanMember(System.Linq.Expressions.Expression)">
            <summary>Checks if expression is boolean member</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.IsConstantTrue(System.Linq.Expressions.Expression)">
            <summary>Checks if expression is constant true</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.IsConstantFalse(System.Linq.Expressions.Expression)">
            <summary>Checks if expression is constant false</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.IsStringPropertyAccess(System.Linq.Expressions.MemberExpression)">
            <summary>Checks if member is string property access</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.IsStringConcatenation(System.Linq.Expressions.BinaryExpression)">
            <summary>Checks if binary is string concatenation</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseStringProperty(System.Linq.Expressions.MemberExpression)">
            <summary>Parses string property</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseNotExpression(System.Linq.Expressions.Expression)">
            <summary>Parses NOT expression</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.FormatLogicalExpression(System.String,System.String,System.String,System.Linq.Expressions.BinaryExpression)">
            <summary>Formats logical expression</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ExtractColumns(System.Linq.Expressions.Expression)">
            <summary>
            从表达式中提取列名列表
            </summary>
        </member>
        <member name="P:Sqlx.ExpressionToSqlBase.DbType">
            <summary>Database type enum</summary>
        </member>
        <member name="P:Sqlx.ExpressionToSqlBase.DatabaseType">
            <summary>Database type string</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseMathFunction(System.Linq.Expressions.MethodCallExpression,System.String)">
            <summary>Parses math function</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseStringFunction(System.Linq.Expressions.MethodCallExpression,System.String)">
            <summary>Parses string function</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ParseDateTimeFunction(System.Linq.Expressions.MethodCallExpression,System.String)">
            <summary>Parses DateTime function</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetOperatorFunction(System.String,System.String,System.String)">
            <summary>Gets operator function</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.GetBinaryOperator(System.Linq.Expressions.ExpressionType)">
            <summary>Gets binary operator</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ToSql">
            <summary>Converts to SQL string</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ToTemplate">
            <summary>Converts to SQL template</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.Dispose">
            <summary>Disposes resources</summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlBase.ClearGlobalCache">
            <summary>Clears global cache</summary>
        </member>
        <member name="T:Sqlx.ParameterizedSql">
            <summary>
            Represents a parameterized SQL statement with SQL text and parameter values
            This is an execution-time instance, not a reusable template definition
            </summary>
        </member>
        <member name="M:Sqlx.ParameterizedSql.#ctor(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Represents a parameterized SQL statement with SQL text and parameter values
            This is an execution-time instance, not a reusable template definition
            </summary>
        </member>
        <member name="F:Sqlx.ParameterizedSql.Empty">
            <summary>
            Empty ParameterizedSql instance
            </summary>
        </member>
        <member name="M:Sqlx.ParameterizedSql.CreateWithDictionary(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates parameterized SQL using dictionary
            </summary>
            <param name="sql">SQL statement</param>
            <param name="parameters">Parameter dictionary</param>
            <returns>ParameterizedSql instance</returns>
        </member>
        <member name="M:Sqlx.ParameterizedSql.Create(System.String,System.Object)">
            <summary>Creates parameterized SQL using object parameters</summary>
        </member>
        <member name="M:Sqlx.ParameterizedSql.Render">
            <summary>
            Renders to final SQL string with inlined parameters
            </summary>
            <returns>Rendered SQL string</returns>
        </member>
        <member name="M:Sqlx.ParameterizedSql.Contains(System.String)">
            <summary>
            Checks if the SQL contains a specific substring
            </summary>
            <param name="value">The substring to search for</param>
            <returns>True if the SQL contains the substring</returns>
        </member>
        <member name="M:Sqlx.ParameterizedSql.ToString">
            <summary>
            Returns a string representation of the ParameterizedSql.
            </summary>
        </member>
        <member name="T:Sqlx.SqlParameterRenderer">
            <summary>
            SQL parameter renderer for inlining parameters into SQL
            </summary>
        </member>
        <member name="T:Sqlx.SimpleOperationInferrer">
            <summary>
            Simple operation inferrer for SQL template analysis
            </summary>
        </member>
        <member name="M:Sqlx.SimpleOperationInferrer.InferFromSql(System.String)">
            <summary>
            Infers SQL operation type from SQL text
            </summary>
            <param name="sql">SQL text to analyze</param>
            <returns>Inferred SQL operation type</returns>
        </member>
        <member name="M:Sqlx.SimpleOperationInferrer.InferFromMethodName(System.String)">
            <summary>
            Infers SQL operation type from method name
            </summary>
            <param name="methodName">Method name to analyze</param>
            <returns>Inferred SQL operation type</returns>
        </member>
        <member name="M:Sqlx.SimpleOperationInferrer.IsComplexSql(System.String)">
            <summary>
            Analyzes SQL for complexity
            </summary>
            <param name="sql">SQL to analyze</param>
            <returns>True if SQL is complex</returns>
        </member>
        <member name="T:Sqlx.ExpressionToSqlCrudExtensions">
            <summary>
            CRUD extensions for ExpressionToSql
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.ToInsertSql``1(Sqlx.ExpressionToSql{``0})">
            <summary>
            Generates INSERT SQL for the entity
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.ToUpdateSql``1(Sqlx.ExpressionToSql{``0})">
            <summary>
            Generates UPDATE SQL for the entity
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.ToDeleteSql``1(Sqlx.ExpressionToSql{``0})">
            <summary>
            Generates DELETE SQL for the entity
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.ToSelectSql``1(Sqlx.ExpressionToSql{``0})">
            <summary>
            Generates SELECT SQL for the entity
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.CreateInsertBuilder``1">
            <summary>
            Creates an insert builder
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.CreateUpdateBuilder``1">
            <summary>
            Creates an update builder
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.CreateDeleteBuilder``1">
            <summary>
            Creates a delete builder
            </summary>
        </member>
        <member name="M:Sqlx.ExpressionToSqlCrudExtensions.CreateSelectBuilder``1">
            <summary>
            Creates a select builder
            </summary>
        </member>
        <member name="T:Sqlx.DatabaseType">
            <summary>
            Database types enumeration for type-safe database selection
            </summary>
        </member>
        <member name="F:Sqlx.DatabaseType.SqlServer">
            <summary>Microsoft SQL Server</summary>
        </member>
        <member name="F:Sqlx.DatabaseType.MySql">
            <summary>MySQL database</summary>
        </member>
        <member name="F:Sqlx.DatabaseType.PostgreSql">
            <summary>PostgreSQL database</summary>
        </member>
        <member name="F:Sqlx.DatabaseType.SQLite">
            <summary>SQLite database</summary>
        </member>
        <member name="F:Sqlx.DatabaseType.Oracle">
            <summary>Oracle database</summary>
        </member>
        <member name="F:Sqlx.DatabaseType.DB2">
            <summary>DB2 database</summary>
        </member>
        <member name="T:Sqlx.SqlDefine">
            <summary>
            Database dialect definitions for mainstream databases (AOT-friendly)
            </summary>
        </member>
        <member name="F:Sqlx.SqlDefine.SqlServer">
            <summary>SQL Server: [column] with @ parameters</summary>
        </member>
        <member name="F:Sqlx.SqlDefine.MySql">
            <summary>MySQL: `column` with @ parameters</summary>
        </member>
        <member name="F:Sqlx.SqlDefine.PostgreSql">
            <summary>PostgreSQL: "column" with $ parameters</summary>
        </member>
        <member name="F:Sqlx.SqlDefine.PgSql">
            <summary>PostgreSQL: "column" with $ parameters (alias)</summary>
        </member>
        <member name="F:Sqlx.SqlDefine.SQLite">
            <summary>SQLite: [column] with $ parameters</summary>
        </member>
        <member name="F:Sqlx.SqlDefine.Sqlite">
            <summary>SQLite: [column] with $ parameters (alias)</summary>
        </member>
        <member name="F:Sqlx.SqlDefine.Oracle">
            <summary>Oracle: "column" with : parameters</summary>
        </member>
        <member name="F:Sqlx.SqlDefine.DB2">
            <summary>DB2: "column" with ? parameters</summary>
        </member>
        <member name="M:Sqlx.SqlDefine.GetDialect(Sqlx.DatabaseType)">
            <summary>Gets SQL dialect by database type</summary>
        </member>
        <member name="M:Sqlx.SqlDefine.GetDialect(System.String)">
            <summary>
            Gets database dialect for mainstream databases (string version for backward compatibility)
            </summary>
        </member>
        <member name="T:Sqlx.SqlDialect">
            <summary>SQL dialect configuration for database-specific syntax</summary>
        </member>
        <member name="M:Sqlx.SqlDialect.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>SQL dialect configuration for database-specific syntax</summary>
        </member>
        <member name="M:Sqlx.SqlDialect.WrapColumn(System.String)">
            <summary>Wraps a column name with dialect-specific delimiters.</summary>
        </member>
        <member name="M:Sqlx.SqlDialect.WrapString(System.String)">
            <summary>Wraps a string value with dialect-specific delimiters.</summary>
        </member>
        <member name="M:Sqlx.SqlDialect.CreateParameter(System.String)">
            <summary>Creates a parameter with dialect-specific prefix.</summary>
        </member>
        <member name="M:Sqlx.SqlDialect.EscapeString(System.String)">
            <summary>Escapes special characters in string values.</summary>
        </member>
        <member name="P:Sqlx.SqlDialect.DatabaseType">
            <summary>Gets database type (simplified version)</summary>
        </member>
        <member name="P:Sqlx.SqlDialect.DbType">
            <summary>Gets database type enum (type-safe version)</summary>
        </member>
        <member name="M:Sqlx.SqlDialect.GetConcatFunction(System.String[])">
            <summary>Gets string concatenation syntax</summary>
        </member>
        <member name="M:Sqlx.SqlDialect.GetLimitClause(System.Int32,System.Int32)">
            <summary>Gets pagination syntax</summary>
        </member>
        <member name="T:Sqlx.SqlDialectType">
            <summary>
            SQL dialect type enumeration
            </summary>
        </member>
        <member name="F:Sqlx.SqlDialectType.SqlServer">
            <summary>SQL Server dialect</summary>
        </member>
        <member name="F:Sqlx.SqlDialectType.MySql">
            <summary>MySQL dialect</summary>
        </member>
        <member name="F:Sqlx.SqlDialectType.PostgreSql">
            <summary>PostgreSQL dialect</summary>
        </member>
        <member name="F:Sqlx.SqlDialectType.SQLite">
            <summary>SQLite dialect</summary>
        </member>
        <member name="F:Sqlx.SqlDialectType.Oracle">
            <summary>Oracle dialect</summary>
        </member>
        <member name="F:Sqlx.SqlDialectType.DB2">
            <summary>DB2 dialect</summary>
        </member>
        <member name="T:Sqlx.SqlTemplateOptions">
            <summary>
            SQL template options for configuration
            </summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.Dialect">
            <summary>SQL dialect type</summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.UseCache">
            <summary>Whether to use cache</summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.ValidateParameters">
            <summary>Whether to validate parameters</summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.UseParameterizedQueries">
            <summary>Whether to use parameterized queries</summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.SafeMode">
            <summary>Whether to enable safe mode</summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.EnableCaching">
            <summary>Whether to enable caching</summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.CustomFunctions">
            <summary>Custom functions dictionary</summary>
        </member>
        <member name="M:Sqlx.SqlTemplateOptions.ForSqlServer">
            <summary>Creates options for SQL Server</summary>
        </member>
        <member name="M:Sqlx.SqlTemplateOptions.ForMySql">
            <summary>Creates options for MySQL</summary>
        </member>
        <member name="M:Sqlx.SqlTemplateOptions.ForPostgreSQL">
            <summary>Creates options for PostgreSQL</summary>
        </member>
        <member name="M:Sqlx.SqlTemplateOptions.ForSQLite">
            <summary>Creates options for SQLite</summary>
        </member>
        <member name="P:Sqlx.SqlTemplateOptions.Default">
            <summary>Default options</summary>
        </member>
        <member name="T:Sqlx.SqlTemplate">
            <summary>
            编译时 SQL 模板 - 提供安全的参数化查询功能
            动态 SQL 功能已迁移到 ExpressionToSql，此类专注于编译时安全性
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplate.#ctor(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            编译时 SQL 模板 - 提供安全的参数化查询功能
            动态 SQL 功能已迁移到 ExpressionToSql，此类专注于编译时安全性
            </summary>
        </member>
        <member name="F:Sqlx.SqlTemplate.Empty">
            <summary>Empty SQL template</summary>
        </member>
        <member name="M:Sqlx.SqlTemplate.Parse(System.String)">
            <summary>
            创建编译时安全的 SQL 模板（推荐使用 SqlTemplateAttribute）
            </summary>
            <param name="sql">SQL 字符串</param>
            <returns>模板定义</returns>
        </member>
        <member name="M:Sqlx.SqlTemplate.Execute(System.Object)">
            <summary>Executes template with parameters</summary>
        </member>
        <member name="M:Sqlx.SqlTemplate.Execute(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Executes template with parameter dictionary</summary>
        </member>
        <member name="M:Sqlx.SqlTemplate.Bind">
            <summary>
            Creates fluent parameter binder
            </summary>
            <returns>Parameter binder</returns>
        </member>
        <member name="P:Sqlx.SqlTemplate.IsPureTemplate">
            <summary>Checks if this is a pure template</summary>
        </member>
        <member name="M:Sqlx.SqlTemplate.Render(System.Object)">
            <summary>Renders template with parameters</summary>
        </member>
        <member name="M:Sqlx.SqlTemplate.Render(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Renders template with parameter dictionary</summary>
        </member>
        <member name="M:Sqlx.SqlTemplate.ToString">
            <summary>String representation</summary>
        </member>
        <member name="T:Sqlx.SqlTemplateBuilder">
            <summary>
            Fluent parameter binder
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateBuilder.Param``1(System.String,``0)">
            <summary>
            Binds parameter
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateBuilder.Params(System.Object)">
            <summary>
            Batch binds parameters (AOT-friendly)
            </summary>
        </member>
        <member name="M:Sqlx.SqlTemplateBuilder.Build">
            <summary>
            Builds final SQL
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
    </members>
</doc>
