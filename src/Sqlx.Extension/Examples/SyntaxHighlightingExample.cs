using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using Sqlx;
using Sqlx.Annotations;

namespace Sqlx.Extension.Examples
{
    /// <summary>
    /// Example demonstrating SqlTemplate syntax highlighting
    /// Open this file in Visual Studio to see the syntax coloring in action!
    /// </summary>
    [SqlDefine(SqlDefineTypes.SQLite)]
    [RepositoryFor(typeof(User))]
    public interface IUserRepository
    {
        // Example 1: Simple SELECT with placeholder and parameter
        // - SELECT, FROM, WHERE = Blue (SQL Keywords)
        // - {{columns}}, {{table}} = Orange (Placeholders)
        // - @id = Green (Parameters)
        [SqlTemplate("SELECT {{columns}} FROM {{table}} WHERE id = @id")]
        Task<User?> GetByIdAsync(long id, CancellationToken ct = default);

        // Example 2: Multiple keywords and placeholders
        [SqlTemplate("SELECT {{columns}} FROM {{table}} WHERE age >= @minAge AND status = @status {{orderby created_at --desc}} {{limit}} {{offset}}")]
        Task<List<User>> SearchAsync(int minAge, string status, int? limit = null, int? offset = null, CancellationToken ct = default);

        // Example 3: INSERT with placeholders
        [SqlTemplate("INSERT INTO {{table}} (name, age, email) VALUES (@name, @age, @email)")]
        [ReturnInsertedId]
        Task<long> InsertAsync(string name, int age, string email, CancellationToken ct = default);

        // Example 4: UPDATE with {{set}} placeholder
        [SqlTemplate("UPDATE {{table}} {{set}} WHERE id = @id")]
        Task<int> UpdateAsync(User user, CancellationToken ct = default);

        // Example 5: DELETE
        [SqlTemplate("DELETE FROM {{table}} WHERE id = @id")]
        Task<int> DeleteAsync(long id, CancellationToken ct = default);

        // Example 6: Batch operation
        [SqlTemplate("INSERT INTO {{table}} (name, age, email) VALUES {{batch_values}}")]
        [BatchOperation(MaxBatchSize = 500)]
        Task<int> BatchInsertAsync(IEnumerable<User> users, CancellationToken ct = default);

        // Example 7: Expression tree query
        [SqlTemplate("SELECT {{columns}} FROM {{table}} {{where}}")]
        Task<List<User>> QueryAsync([ExpressionToSql] Expression<Func<User, bool>> predicate, CancellationToken ct = default);

        // Example 8: Complex query with JOIN
        [SqlTemplate(@"
            SELECT u.{{columns}}, COUNT(o.id) as order_count
            FROM {{table}} u
            LEFT JOIN orders o ON o.user_id = u.id
            WHERE u.age >= @minAge
            GROUP BY u.id
            HAVING COUNT(o.id) > @minOrders
            {{orderby order_count --desc}}
            {{limit}}
        ")]
        Task<List<Dictionary<string, object?>>> GetActiveUsersAsync(int minAge, int minOrders, int? limit = null, CancellationToken ct = default);

        // Example 9: String literals and comments
        [SqlTemplate(@"
            -- Get users by status
            SELECT {{columns}} 
            FROM {{table}} 
            WHERE status = 'active'  /* Active users only */
            AND deleted_at IS NULL
        ")]
        Task<List<User>> GetActiveUsersAsync(CancellationToken ct = default);

        // Example 10: Complex WHERE with multiple operators
        [SqlTemplate("SELECT {{columns}} FROM {{table}} WHERE age BETWEEN @minAge AND @maxAge OR name LIKE @pattern")]
        Task<List<User>> FindUsersAsync(int minAge, int maxAge, string pattern, CancellationToken ct = default);
    }

    /// <summary>
    /// Partial implementation class
    /// </summary>
    public partial class UserRepository(DbConnection connection) : IUserRepository
    {
        // Implementation is auto-generated by Sqlx source generator
    }

    /// <summary>
    /// Example entity
    /// </summary>
    [TableName("users")]
    public class User
    {
        public long Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public int Age { get; set; }
        public string Status { get; set; } = "active";
        public DateTime CreatedAt { get; set; }
        public DateTime? DeletedAt { get; set; }
    }
}

