// -----------------------------------------------------------------------
// <auto-generated>
// -----------------------------------------------------------------------

namespace Sqlx;

using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

public partial class CSharpGenerator
{
    /// <summary>
    /// C# specific syntax receiver for collecting method symbols and repository classes.
    /// </summary>
    private class CSharpSyntaxReceiver : ISqlxSyntaxReceiver
    {
        public List<IMethodSymbol> Methods { get; } = new List<IMethodSymbol>();
        public List<INamedTypeSymbol> RepositoryClasses { get; } = new List<INamedTypeSymbol>();

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            // Legacy method - not used in modern Roslyn
        }

        public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
        {
            // Collect methods with Sqlx attributes
            if (context.Node is MethodDeclarationSyntax methodDeclaration)
            {
                if (context.SemanticModel.GetDeclaredSymbol(methodDeclaration) is IMethodSymbol method)
                {
                    if (HasSqlxAttribute(method))
                    {
                        Methods.Add(method);
                    }
                }
            }

            // Collect repository classes
            if (context.Node is ClassDeclarationSyntax classDeclaration)
            {
                if (context.SemanticModel.GetDeclaredSymbol(classDeclaration) is INamedTypeSymbol type)
                {
                    if (HasRepositoryForAttribute(type))
                    {
                        RepositoryClasses.Add(type);
                    }
                }
            }
        }

        private static bool HasSqlxAttribute(IMethodSymbol method)
        {
            // Only collect methods declared in classes to avoid generating implementations for interfaces
            if (method.ContainingType == null || method.ContainingType.TypeKind != TypeKind.Class)
            {
                return false;
            }

            return method.GetAttributes().Any(attr =>
                attr.AttributeClass?.Name == "SqlxAttribute" ||
                attr.AttributeClass?.Name == "RawSqlAttribute" ||
                attr.AttributeClass?.Name == "SqlExecuteTypeAttribute");
        }

        private static bool HasRepositoryForAttribute(INamedTypeSymbol type)
        {
            var attributes = type.GetAttributes();
            #if DEBUG
            System.Diagnostics.Debug.WriteLine($"Class {type.Name} has {attributes.Length} attributes:");
            foreach (var attr in attributes)
            {
                System.Diagnostics.Debug.WriteLine($"  - {attr.AttributeClass?.Name} ({attr.AttributeClass?.ToDisplayString()})");
            }
            #endif

            var hasAttr = attributes.Any(attr => attr.AttributeClass?.Name == "RepositoryForAttribute" || attr.AttributeClass?.Name == "RepositoryFor");
            #if DEBUG
            System.Diagnostics.Debug.WriteLine(hasAttr
                ? $"Found RepositoryFor attribute on {type.Name}"
                : $"No RepositoryFor attribute found on {type.Name}");
            #endif
            return hasAttr;
        }
    }
}


