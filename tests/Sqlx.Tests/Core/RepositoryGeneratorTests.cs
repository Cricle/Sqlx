using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Sqlx.Core;
using System.Linq;

namespace Sqlx.Tests.Core;

[TestClass]
public class RepositoryGeneratorTests
{
    private Compilation _compilation = null!;

    [TestInitialize]
    public void Setup()
    {
        var source = @"
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace TestNamespace 
{
    public interface IUserService
    {
        Task<User> GetByIdAsync(int id);
        Task<List<User>> GetAllAsync();
        Task<int> CreateAsync(User user);
        Task<bool> UpdateAsync(User user);
        Task<bool> DeleteAsync(int id);
    }
    
    public partial class UserRepository : IUserService
    {
        private readonly System.Data.Common.DbConnection _connection;
        
        public UserRepository(System.Data.Common.DbConnection connection)
        {
            _connection = connection;
        }
        
        // Methods will be generated
        public Task<User> GetByIdAsync(int id) => throw new NotImplementedException();
        public Task<List<User>> GetAllAsync() => throw new NotImplementedException();
        public Task<int> CreateAsync(User user) => throw new NotImplementedException();
        public Task<bool> UpdateAsync(User user) => throw new NotImplementedException();
        public Task<bool> DeleteAsync(int id) => throw new NotImplementedException();
    }
    
    public class User 
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
    }
}";

        var syntaxTree = CSharpSyntaxTree.ParseText(source);
        _compilation = CSharpCompilation.Create(
            "TestAssembly",
            new[] { syntaxTree },
            new[] { 
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(System.Collections.Generic.List<>).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(System.Threading.Tasks.Task).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(System.Data.Common.DbConnection).Assembly.Location)
            });
    }

    [TestMethod]
    public void GenerateImplementation_WithValidParameters_GeneratesCode()
    {
        // Arrange
        var sb = new IndentedStringBuilder("");
        var repositoryClass = GetTypeSymbol("TestNamespace.UserRepository");
        var serviceInterface = GetTypeSymbol("TestNamespace.IUserService");
        var entityType = GetTypeSymbol("TestNamespace.User");
        var tableName = "users";

        // Act
        RepositoryGenerator.GenerateImplementation(sb, repositoryClass, serviceInterface, entityType, tableName);
        var result = sb.ToString();

        // Assert
        Assert.IsNotNull(result);
        Assert.IsTrue(result.Length > 0);
        Assert.IsTrue(result.Contains("namespace TestNamespace"));
        Assert.IsTrue(result.Contains("partial class UserRepository"));
        Assert.IsTrue(result.Contains("IUserService"));
    }

    [TestMethod]
    public void GenerateImplementation_ContainsFileHeader()
    {
        // Arrange
        var sb = new IndentedStringBuilder("");
        var repositoryClass = GetTypeSymbol("TestNamespace.UserRepository");
        var serviceInterface = GetTypeSymbol("TestNamespace.IUserService");
        var entityType = GetTypeSymbol("TestNamespace.User");
        var tableName = "users";

        // Act
        RepositoryGenerator.GenerateImplementation(sb, repositoryClass, serviceInterface, entityType, tableName);
        var result = sb.ToString();

        // Assert
        Assert.IsTrue(result.Contains("<auto-generated>"));
        Assert.IsTrue(result.Contains("Sqlx Repository Generator"));
        Assert.IsTrue(result.Contains("#nullable disable"));
        Assert.IsTrue(result.Contains("#pragma warning disable"));
    }

    [TestMethod]
    public void GenerateImplementation_ContainsRequiredUsings()
    {
        // Arrange
        var sb = new IndentedStringBuilder("");
        var repositoryClass = GetTypeSymbol("TestNamespace.UserRepository");
        var serviceInterface = GetTypeSymbol("TestNamespace.IUserService");
        var entityType = GetTypeSymbol("TestNamespace.User");
        var tableName = "users";

        // Act
        RepositoryGenerator.GenerateImplementation(sb, repositoryClass, serviceInterface, entityType, tableName);
        var result = sb.ToString();

        // Assert
        Assert.IsTrue(result.Contains("using System;"));
        Assert.IsTrue(result.Contains("using System.Collections.Generic;"));
        Assert.IsTrue(result.Contains("using System.Data;"));
        Assert.IsTrue(result.Contains("using System.Data.Common;"));
        Assert.IsTrue(result.Contains("using System.Threading;"));
        Assert.IsTrue(result.Contains("using System.Threading.Tasks;"));
        Assert.IsTrue(result.Contains("using Sqlx.Annotations;"));
    }

    [TestMethod]
    public void GenerateImplementation_WithCorrectNamespace()
    {
        // Arrange
        var sb = new IndentedStringBuilder("");
        var repositoryClass = GetTypeSymbol("TestNamespace.UserRepository");
        var serviceInterface = GetTypeSymbol("TestNamespace.IUserService");
        var entityType = GetTypeSymbol("TestNamespace.User");
        var tableName = "users";

        // Act
        RepositoryGenerator.GenerateImplementation(sb, repositoryClass, serviceInterface, entityType, tableName);
        var result = sb.ToString();

        // Assert
        Assert.IsTrue(result.Contains("namespace TestNamespace"));
        Assert.IsTrue(result.Contains("{"));
        // Should have proper closing braces
        var openBraces = result.Count(c => c == '{');
        var closeBraces = result.Count(c => c == '}');
        Assert.IsTrue(openBraces > 0);
        Assert.IsTrue(closeBraces > 0);
    }

    [TestMethod]
    public void GenerateImplementation_WithCorrectClassDeclaration()
    {
        // Arrange
        var sb = new IndentedStringBuilder("");
        var repositoryClass = GetTypeSymbol("TestNamespace.UserRepository");
        var serviceInterface = GetTypeSymbol("TestNamespace.IUserService");
        var entityType = GetTypeSymbol("TestNamespace.User");
        var tableName = "users";

        // Act
        RepositoryGenerator.GenerateImplementation(sb, repositoryClass, serviceInterface, entityType, tableName);
        var result = sb.ToString();

        // Assert
        Assert.IsTrue(result.Contains("public partial class UserRepository"));
        Assert.IsTrue(result.Contains(": TestNamespace.IUserService"));
    }

    [TestMethod]
    public void GenerateImplementation_GeneratesMethodImplementations()
    {
        // Arrange
        var sb = new IndentedStringBuilder("");
        var repositoryClass = GetTypeSymbol("TestNamespace.UserRepository");
        var serviceInterface = GetTypeSymbol("TestNamespace.IUserService");
        var entityType = GetTypeSymbol("TestNamespace.User");
        var tableName = "users";

        // Act
        RepositoryGenerator.GenerateImplementation(sb, repositoryClass, serviceInterface, entityType, tableName);
        var result = sb.ToString();

        // Assert
        // Should contain method implementations for interface methods
        Assert.IsTrue(result.Contains("GetByIdAsync") || result.Contains("GetAllAsync") || 
                     result.Contains("CreateAsync") || result.Contains("UpdateAsync") || 
                     result.Contains("DeleteAsync"));
    }

    [TestMethod]
    public void GenerateImplementation_WithNullEntityType_HandlesGracefully()
    {
        // Arrange
        var sb = new IndentedStringBuilder("");
        var repositoryClass = GetTypeSymbol("TestNamespace.UserRepository");
        var serviceInterface = GetTypeSymbol("TestNamespace.IUserService");
        var tableName = "users";

        // Act
        RepositoryGenerator.GenerateImplementation(sb, repositoryClass, serviceInterface, null, tableName);
        var result = sb.ToString();

        // Assert
        Assert.IsNotNull(result);
        Assert.IsTrue(result.Length > 0);
        Assert.IsTrue(result.Contains("partial class UserRepository"));
    }

    [TestMethod]
    public void GenerateImplementation_WithEmptyTableName_HandlesGracefully()
    {
        // Arrange
        var sb = new IndentedStringBuilder("");
        var repositoryClass = GetTypeSymbol("TestNamespace.UserRepository");
        var serviceInterface = GetTypeSymbol("TestNamespace.IUserService");
        var entityType = GetTypeSymbol("TestNamespace.User");

        // Act
        RepositoryGenerator.GenerateImplementation(sb, repositoryClass, serviceInterface, entityType, "");
        var result = sb.ToString();

        // Assert
        Assert.IsNotNull(result);
        Assert.IsTrue(result.Length > 0);
        Assert.IsTrue(result.Contains("partial class UserRepository"));
    }

    [TestMethod]
    public void GenerateImplementation_ProducesWellFormedCode()
    {
        // Arrange
        var sb = new IndentedStringBuilder("");
        var repositoryClass = GetTypeSymbol("TestNamespace.UserRepository");
        var serviceInterface = GetTypeSymbol("TestNamespace.IUserService");
        var entityType = GetTypeSymbol("TestNamespace.User");
        var tableName = "users";

        // Act
        RepositoryGenerator.GenerateImplementation(sb, repositoryClass, serviceInterface, entityType, tableName);
        var result = sb.ToString();

        // Assert
        // Check that the generated code has proper structure
        Assert.IsFalse(string.IsNullOrWhiteSpace(result));
        
        // Should have balanced braces
        var openBraces = result.Count(c => c == '{');
        var closeBraces = result.Count(c => c == '}');
        Assert.AreEqual(openBraces, closeBraces);
        
        // Should have proper line endings
        Assert.IsTrue(result.Contains(System.Environment.NewLine) || result.Contains("\n"));
    }

    [TestMethod]
    public void GenerateImplementation_WithGlobalNamespace_HandlesCorrectly()
    {
        // Test with a type in global namespace
        var globalSource = @"
public interface IGlobalService
{
    System.Threading.Tasks.Task<string> GetValueAsync();
}

public partial class GlobalRepository : IGlobalService
{
    public System.Threading.Tasks.Task<string> GetValueAsync() => throw new System.NotImplementedException();
}";

        var syntaxTree = CSharpSyntaxTree.ParseText(globalSource);
        var compilation = CSharpCompilation.Create(
            "GlobalTestAssembly",
            new[] { syntaxTree },
            new[] { 
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(System.Threading.Tasks.Task).Assembly.Location)
            });

        var repositoryClass = compilation.GetTypeByMetadataName("GlobalRepository") as INamedTypeSymbol;
        var serviceInterface = compilation.GetTypeByMetadataName("IGlobalService") as INamedTypeSymbol;

        // Arrange
        var sb = new IndentedStringBuilder("");

        // Act
        RepositoryGenerator.GenerateImplementation(sb, repositoryClass!, serviceInterface!, null, "test_table");
        var result = sb.ToString();

        // Assert
        Assert.IsNotNull(result);
        Assert.IsTrue(result.Length > 0);
        // Should not contain namespace declaration for global namespace
        Assert.IsFalse(result.Contains("namespace"));
    }

    #region Helper Methods

    private INamedTypeSymbol GetTypeSymbol(string typeName)
    {
        var type = _compilation.GetTypeByMetadataName(typeName);
        Assert.IsNotNull(type, $"Could not find type: {typeName}");
        return type;
    }

    #endregion
}
