using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Data.Sqlite;
using Sqlx;
using Sqlx.Annotations;
using TodoWebApi.Models;

namespace TodoWebApi.Services;

/// <summary>
/// Advanced WHERE clause examples using source-generated SQL templates.
/// Demonstrates 4 different ways to build dynamic WHERE conditions.
/// </summary>
public interface IAdvancedWhereRepository
{
    // ========================================
    // 1. Static WHERE ({{where id}})
    // ========================================
    /// <summary>Simple primary key lookup - most common case.</summary>
    [SqlxAttribute("SELECT {{columns}} FROM {{table}} WHERE {{where id}}")]
    Task<Todo?> GetByIdAsync(long id);
    
    // ========================================
    // 2. Auto WHERE ({{where auto}})
    // ========================================
    /// <summary>Auto-generates WHERE from method parameters.</summary>
    /// <remarks>
    /// Generated SQL: SELECT * FROM todos WHERE title = @title AND is_completed = @isCompleted
    /// All parameters become WHERE conditions with AND.
    /// </remarks>
    [SqlxAttribute("SELECT {{columns}} FROM {{table}} WHERE {{where auto}}")]
    Task<List<Todo>> FindAsync(string title, bool isCompleted);
    
    // ========================================
    // 3. ExpressionToSql Parameter ({{where}})
    // ========================================
    /// <summary>Dynamic WHERE from ExpressionToSql - type-safe LINQ.</summary>
    /// <remarks>
    /// Usage:
    /// <code>
    /// var whereExpr = ExpressionToSql&lt;Todo&gt;.ForSqlite()
    ///     .Where(t => t.Priority >= 3)
    ///     .Where(t => !t.IsCompleted);
    /// var todos = await repo.SearchAsync(whereExpr);
    /// </code>
    /// Generated SQL: SELECT * FROM todos WHERE Priority >= 3 AND IsCompleted = 0
    /// Parameters from ExpressionToSql are automatically extracted and bound.
    /// </remarks>
    [SqlxAttribute("SELECT {{columns}} FROM {{table}} WHERE {{where}}")]
    Task<List<Todo>> SearchAsync([ExpressionToSql] ExpressionToSqlBase whereExpression);
    
    // ========================================
    // 4. DynamicSql Fragment ({{where @customWhere}})
    // ========================================
    /// <summary>Custom WHERE fragment from string parameter - advanced use.</summary>
    /// <remarks>
    /// ⚠️ Use with caution! Must validate input to prevent SQL injection.
    /// The framework validates fragment safety using SqlValidator.
    /// 
    /// Usage:
    /// <code>
    /// await repo.CustomSearchAsync("priority > 2 AND title LIKE '%urgent%'");
    /// </code>
    /// 
    /// Allowed: WHERE clauses, AND/OR, LIKE, IN, BETWEEN, etc.
    /// Forbidden: DROP, TRUNCATE, ALTER, CREATE, comments (--, /*), exec functions
    /// </remarks>
    [SqlxAttribute("SELECT {{columns}} FROM {{table}} WHERE {{where @customWhere}}")]
    Task<List<Todo>> CustomSearchAsync([DynamicSql(Type = DynamicSqlType.Fragment)] string customWhere);
    
    // ========================================
    // 5. Batch DELETE with ExpressionToSql
    // ========================================
    /// <summary>Batch delete using dynamic WHERE conditions.</summary>
    /// <remarks>
    /// Usage:
    /// <code>
    /// var whereExpr = ExpressionToSql&lt;Todo&gt;.ForSqlite()
    ///     .Where(t => t.IsCompleted)
    ///     .Where(t => t.CompletedAt &lt; DateTime.Now.AddMonths(-6));
    /// var count = await repo.BatchDeleteAsync(whereExpr);
    /// </code>
    /// Deletes all completed todos older than 6 months.
    /// </remarks>
    [SqlxAttribute("DELETE FROM {{table}} WHERE {{where}}")]
    Task<int> BatchDeleteAsync([ExpressionToSql] ExpressionToSqlBase whereExpression);
    
    // ========================================
    // 6. Batch UPDATE with ExpressionToSql
    // ========================================
    /// <summary>Batch update using dynamic WHERE conditions.</summary>
    /// <remarks>
    /// Usage:
    /// <code>
    /// var whereExpr = ExpressionToSql&lt;Todo&gt;.ForSqlite()
    ///     .Where(t => t.DueDate &lt; DateTime.Now)
    ///     .Where(t => !t.IsCompleted);
    /// var count = await repo.MarkOverdueAsync(whereExpr);
    /// </code>
    /// Marks all overdue incomplete todos as high priority.
    /// </remarks>
    [SqlxAttribute("UPDATE {{table}} SET priority = 5 WHERE {{where}}")]
    Task<int> MarkOverdueAsync([ExpressionToSql] ExpressionToSqlBase whereExpression);
}

[TableName("todos")]
[SqlDefine(SqlDefineTypes.SQLite)]
[RepositoryFor(typeof(IAdvancedWhereRepository))]
public partial class AdvancedWhereRepository(SqliteConnection connection) : IAdvancedWhereRepository
{
    // Implementation auto-generated by Sqlx
    
    // Optional: monitor generated SQL
    partial void OnExecuting(string operationName, global::System.Data.IDbCommand command)
    {
        System.Diagnostics.Debug.WriteLine($"[{operationName}] SQL: {command.CommandText}");
        foreach (global::System.Data.IDataParameter p in command.Parameters)
        {
            System.Diagnostics.Debug.WriteLine($"  {p.ParameterName} = {p.Value}");
        }
    }
}

