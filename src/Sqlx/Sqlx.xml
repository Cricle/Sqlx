<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sqlx</name>
    </assembly>
    <members>
        <member name="T:Sqlx.Annotations.DbSetTypeAttribute">
            <summary>
            Specifies the entity type for DbContext methods returning tuples or generic collections.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.DbSetTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.DbSetTypeAttribute"/> class.
            </summary>
            <param name="type">The entity type.</param>
        </member>
        <member name="P:Sqlx.Annotations.DbSetTypeAttribute.Type">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.ExpressionToSqlAttribute">
            <summary>
            Indicates that a parameter should be converted from a LINQ expression to SQL.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.RawSqlAttribute">
            <summary>
            Specifies raw SQL command text for methods or parameters.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.RawSqlAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.RawSqlAttribute"/> class.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.RawSqlAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.RawSqlAttribute"/> class.
            </summary>
            <param name="sql">The raw SQL command text.</param>
        </member>
        <member name="P:Sqlx.Annotations.RawSqlAttribute.Sql">
            <summary>
            Gets or sets the raw SQL command text.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.RepositoryForAttribute">
            <summary>
            Marks a class as a repository for a specified service interface.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.RepositoryForAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.RepositoryForAttribute"/> class.
            </summary>
            <param name="serviceType">The service interface type.</param>
        </member>
        <member name="P:Sqlx.Annotations.RepositoryForAttribute.ServiceType">
            <summary>
            Gets the service interface type.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlDefineAttribute">
            <summary>
            Specifies the database dialect for SQL generation.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlDefineAttribute.#ctor(Sqlx.Annotations.SqlDefineTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.SqlDefineAttribute"/> class with a predefined dialect.
            </summary>
            <param name="dialectType">The database dialect type.</param>
        </member>
        <member name="M:Sqlx.Annotations.SqlDefineAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.SqlDefineAttribute"/> class with custom dialect settings.
            </summary>
            <param name="columnLeft">Left column delimiter.</param>
            <param name="columnRight">Right column delimiter.</param>
            <param name="stringLeft">Left string delimiter.</param>
            <param name="stringRight">Right string delimiter.</param>
            <param name="parameterPrefix">Parameter prefix.</param>
        </member>
        <member name="P:Sqlx.Annotations.SqlDefineAttribute.DialectType">
            <summary>
            Gets the database dialect type.
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlDefineAttribute.ColumnLeft">
            <summary>
            Gets the left column delimiter.
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlDefineAttribute.ColumnRight">
            <summary>
            Gets the right column delimiter.
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlDefineAttribute.StringLeft">
            <summary>
            Gets the left string delimiter.
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlDefineAttribute.StringRight">
            <summary>
            Gets the right string delimiter.
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlDefineAttribute.ParameterPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlExecuteTypeAttribute">
            <summary>
            Specifies CRUD operation types and target table names.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlExecuteTypeAttribute.#ctor(Sqlx.Annotations.SqlExecuteTypes,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.SqlExecuteTypeAttribute"/> class.
            </summary>
            <param name="executeType">The SQL operation type.</param>
            <param name="tableName">The target table name.</param>
        </member>
        <member name="P:Sqlx.Annotations.SqlExecuteTypeAttribute.ExecuteType">
            <summary>
            Gets the SQL operation type.
            </summary>
        </member>
        <member name="P:Sqlx.Annotations.SqlExecuteTypeAttribute.TableName">
            <summary>
            Gets the target table name.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlxAttribute">
            <summary>
            Specifies SQL command text or stored procedure name for a method.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlxAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.SqlxAttribute"/> class.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlxAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.SqlxAttribute"/> class.
            </summary>
            <param name="storedProcedureName">The stored procedure name.</param>
        </member>
        <member name="P:Sqlx.Annotations.SqlxAttribute.StoredProcedureName">
            <summary>
            Gets or sets the stored procedure name.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.TableNameAttribute">
            <summary>
            Specifies the database table name for an entity.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.TableNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sqlx.Annotations.TableNameAttribute"/> class.
            </summary>
            <param name="tableName">The database table name.</param>
        </member>
        <member name="P:Sqlx.Annotations.TableNameAttribute.TableName">
            <summary>
            Gets the database table name.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.ExpressionToSql`1">
            <summary>
            Provides LINQ expression to SQL conversion functionality.
            </summary>
            <typeparam name="T">The entity type for expressions.</typeparam>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.#ctor(System.ValueTuple{System.String,System.String,System.String,System.String,System.String})">
            <summary>
            Initializes a new instance with the specified SQL dialect.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.ForSqlServer">
            <summary>
            Creates an ExpressionToSql builder for SQL Server dialect.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.ForMySql">
            <summary>
            Creates an ExpressionToSql builder for MySQL dialect.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.ForPostgreSQL">
            <summary>
            Creates an ExpressionToSql builder for PostgreSQL dialect.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.ForOracle">
            <summary>
            Creates an ExpressionToSql builder for Oracle dialect.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.ForDB2">
            <summary>
            Creates an ExpressionToSql builder for DB2 dialect.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.ForSqlite">
            <summary>
            Creates an ExpressionToSql builder for SQLite dialect.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.Create">
            <summary>
            Creates an ExpressionToSql builder with default (SQL Server) dialect.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds a WHERE condition to the query.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds an AND condition to the query.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds an ORDER BY clause to the query.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds an ORDER BY DESC clause to the query.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.Take(System.Int32)">
            <summary>
            Limits the number of returned rows.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.Skip(System.Int32)">
            <summary>
            Skips the specified number of rows.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Sets a value for an UPDATE operation. Supports patterns like a=1.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sets a value using an expression for an UPDATE operation. Supports patterns like a=a+1.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.Insert(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specifies columns for an INSERT operation.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.Values(System.Object[])">
            <summary>
            Specifies values for an INSERT operation.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.ToTemplate">
            <summary>
            Converts the built query to a parameterized SQL template.
            Results are cached for performance on repeated calls.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.ToSql">
            <summary>
            Converts the built query to a SQL string.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.ToWhereClause">
            <summary>
            Generates the WHERE clause portion of the query.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.ToAdditionalClause">
            <summary>
            Generates additional clauses for the query.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.ExpressionToSql`1.Dispose">
            <summary>
            Releases resources used by this instance.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlDefine">
            <summary>
            Provides database dialect-specific SQL formatting definitions.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefine.MySql">
            <summary>
            MySQL dialect configuration with backtick column wrapping and @ parameter prefix.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefine.SqlServer">
            <summary>
            SQL Server dialect configuration with square bracket column wrapping and @ parameter prefix.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefine.PgSql">
            <summary>
            PostgreSQL dialect configuration with double quote column wrapping and $ parameter prefix.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefine.Oracle">
            <summary>
            Oracle dialect configuration with double quote column wrapping and : parameter prefix.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefine.DB2">
            <summary>
            DB2 dialect configuration with double quote column wrapping and ? parameter prefix.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefine.Sqlite">
            <summary>
            SQLite dialect configuration with square bracket column wrapping and @ parameter prefix.
            </summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlDefineTypes">
            <summary>
            Defines database dialect types for SQL generation.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.MySql">
            <summary>MySQL dialect with backtick column wrapping.</summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.SqlServer">
            <summary>SQL Server dialect with square bracket column wrapping.</summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.Postgresql">
            <summary>PostgreSQL dialect with double quote column wrapping.</summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.Oracle">
            <summary>Oracle dialect with double quote column wrapping and colon parameters.</summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.DB2">
            <summary>DB2 dialect with double quote column wrapping and question mark parameters.</summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlDefineTypes.SQLite">
            <summary>SQLite dialect with square bracket column wrapping.</summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlExecuteTypes">
            <summary>
            Defines SQL operation types for CRUD operations.
            </summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlExecuteTypes.Select">
            <summary>SELECT operation.</summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlExecuteTypes.Update">
            <summary>UPDATE operation.</summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlExecuteTypes.Insert">
            <summary>INSERT operation.</summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlExecuteTypes.Delete">
            <summary>DELETE operation.</summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlExecuteTypes.BatchInsert">
            <summary>Batch INSERT operation.</summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlExecuteTypes.BatchUpdate">
            <summary>Batch UPDATE operation.</summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlExecuteTypes.BatchDelete">
            <summary>Batch DELETE operation.</summary>
        </member>
        <member name="F:Sqlx.Annotations.SqlExecuteTypes.BatchCommand">
            <summary>ADO.NET BatchCommand operation.</summary>
        </member>
        <member name="T:Sqlx.Annotations.SqlTemplate">
            <summary>
            Represents a SQL template with parameterized command text and parameters.
            </summary>
        </member>
        <member name="M:Sqlx.Annotations.SqlTemplate.#ctor(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Represents a SQL template with parameterized command text and parameters.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
    </members>
</doc>
