name: Publish to NuGet

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3-beta, etc.

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: production  # Use environment protection rules
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for GitVersion
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Extract version from tag
      id: get_version
      run: |
        # Remove 'v' prefix from tag (v1.0.0 -> 1.0.0)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution in Release mode
      run: dotnet build --configuration Release --no-restore --verbosity minimal
      
    - name: Run tests before publishing
      run: dotnet test --configuration Release --no-build --verbosity minimal
      
    - name: Create output directory
      run: mkdir -p ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
      
    - name: Pack NuGet package
      run: |
        dotnet pack src/Sqlx/Sqlx.csproj \
          --configuration Release \
          --no-build \
          --verbosity minimal \
          --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} \
          /p:PackageVersion=${{ steps.get_version.outputs.VERSION }} \
          /p:AssemblyVersion=${{ steps.get_version.outputs.VERSION }} \
          /p:FileVersion=${{ steps.get_version.outputs.VERSION }} \
          /p:InformationalVersion=${{ steps.get_version.outputs.VERSION }}
          
    - name: List generated packages
      run: ls -la ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
      
    - name: Verify package contents
      run: |
        for package in ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg; do
          echo "=== Contents of $(basename $package) ==="
          dotnet nuget locals all --list
          unzip -l "$package" | head -20
          echo ""
        done
        
    - name: Push to NuGet.org
      run: |
        dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg \
          --source ${{ env.NUGET_SOURCE_URL }} \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --skip-duplicate \
          --no-symbols
          
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true
        files: |
          ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg
        body: |
          ## What's Changed
          
          Release version `${{ steps.get_version.outputs.VERSION }}` of Sqlx.
          
          ### Package Information
          - **Package**: Sqlx
          - **Version**: ${{ steps.get_version.outputs.VERSION }}
          - **NuGet**: https://www.nuget.org/packages/Sqlx/${{ steps.get_version.outputs.VERSION }}
          
          ### Installation
          ```bash
          dotnet add package Sqlx --version ${{ steps.get_version.outputs.VERSION }}
          ```
          
          Or via Package Manager:
          ```powershell
          Install-Package Sqlx -Version ${{ steps.get_version.outputs.VERSION }}
          ```
          
          For more details, see the full changelog below.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Comment on related issues
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ steps.get_version.outputs.VERSION }}';
          const tagName = '${{ github.ref_name }}';
          
          // Find issues that mention this version or release
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'release'
          });
          
          for (const issue of issues) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `üéâ Version \`${version}\` has been released!\n\nüì¶ **NuGet**: https://www.nuget.org/packages/Sqlx/${version}\nüè∑Ô∏è **GitHub Release**: https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${tagName}`
            });
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



