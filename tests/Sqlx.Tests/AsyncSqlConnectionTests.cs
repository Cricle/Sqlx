// -----------------------------------------------------------------------
// <copyright file="AsyncSqlConnectionTests.cs" company="Cricle">
// Copyright (c) Cricle. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

namespace Sqlx.Tests;

using Microsoft.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;

[TestClass]
public class AsyncSqlConnectionTests : CodeGenerationTestBase
{
    [TestMethod]
    public void ScalarResult()
    {
        string source = @"
using System.Data.Common;
using System.Threading.Tasks;
using Sqlx.Annotations;

namespace Foo
{
    partial class C
    {
        private DbConnection connection;

        [Sqlx(""sp_TestSP"")]
        public partial Task<int> M(int clientId, string? personId);
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);
        
        // Validate that code generation succeeded and contains expected elements
        Assert.IsTrue(output.Contains("namespace Foo"), "Generated code should contain Foo namespace");
        Assert.IsTrue(output.Contains("partial class C"), "Generated code should contain partial class C");
        Assert.IsTrue(output.Contains("public async partial System.Threading.Tasks.Task<int> M"), "Generated code should contain async method M");
        Assert.IsTrue(output.Contains("sp_TestSP"), "Generated code should contain stored procedure reference");
        Assert.IsTrue(output.Contains("client_id"), "Generated code should contain client_id parameter");
        Assert.IsTrue(output.Contains("person_id"), "Generated code should contain person_id parameter");
        Assert.IsTrue(output.Contains("ExecuteScalarAsync"), "Generated code should contain async execution");
    }

    [TestMethod]
    public void MapResultSetToProcedure()
    {
        string source = @"
namespace Foo
{
    public class Item
    {
        public string StringValue { get; set; }
        public int Int32Value { get; set; }
        public int? NullableInt32Value { get; set; }
    }

    class C
    {
        private DbConnection connection;

        [Sqlx(""sp_TestSP"")]
        public partial Task<IList<Item>> M()
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Collections.Generic;
    using System.Data.Common;
    using System.Linq;

    partial class C
    {
        public partial async Task<IList<Foo.Item>> M()
        {
            var connection = this.connection;
            if(connection.State != global::System.Data.ConnectionState.Open)
            {
                await connection.OpenAsync().ConfigureAwait(false);
            }
            using var command = connection.CreateCommand();
            var sqlQuery = @""sp_TestSP"";
            command.CommandText = sqlQuery;
            using global::System.Data.Common.DbDataReader reader = await command.ExecuteReaderAsync().ConfigureAwait(false);
            var __result = new List<Item>();
            while (await reader.ReadAsync().ConfigureAwait(false))
            {
                var item = new Item();
                item.StringValue = reader.GetString(0);
                item.Int32Value = reader.GetInt32(1);
                item.NullableInt32Value = reader.GetInt32(2);
                __result.Add(item);
            }

            await reader.CloseAsync().ConfigureAwait(false);
            return __result;
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void MapSingleObjectToProcedureFromDbContext()
    {
        string source = @"
namespace Foo
{
    class C
    {
        [Sqlx(""sp_TestSP"")]
        public partial Task<Item> M()
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Data.Common;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Storage;

    partial class C
    {
        public partial async System.Threading.Tasks.Task<Item?> M()
        {
            var sqlQuery = @""sp_TestSP"";
            Item __result = null!;
            var asyncEnumerable = this.dbContext.Items.FromSqlRaw(sqlQuery).AsAsyncEnumerable();
            await foreach (var current in asyncEnumerable)
            {
                __result = current;
                break;
            }
            return __result;
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void MapSingleObjectToProcedureConnection()
    {
        string source = @"
namespace Foo
{
    public class Item
    {
        public string StringValue { get; set; }
        public int Int32Value { get; set; }
        public int? NullableInt32Value { get; set; }
    }

    class C
    {
        private DbConnection connection;

        [Sqlx(""sp_TestSP"")]
        public partial Task<Item> M()
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Collections.Generic;
    using System.Data.Common;
    using System.Linq;

    partial class C
    {
        public partial async System.Threading.Tasks.Task<Foo.Item?> M()
        {
            var connection = this.connection;
            if(connection.State != global::System.Data.ConnectionState.Open)
            {
                await connection.OpenAsync().ConfigureAwait(false);
            }
            using var command = connection.CreateCommand();
            var sqlQuery = @""sp_TestSP"";
            command.CommandText = sqlQuery;
            using global::System.Data.Common.DbDataReader reader = await command.ExecuteReaderAsync(global::System.Data.CommandBehavior.SingleResult | global::System.Data.CommandBehavior.SingleRow).ConfigureAwait(false);
            if (!(await reader.ReadAsync().ConfigureAwait(false)))
            {
                return default;
            }

            var __result = new Item();
            __result.StringValue = reader.GetString(0);
            __result.Int32Value = reader.GetInt32(1);
            __result.NullableInt32Value = reader.GetInt32(2);
            await reader.CloseAsync().ConfigureAwait(false);
            return __result;
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void MapListFromDbContext()
    {
        string source = @"
namespace Foo
{
    class C
    {
        [Sqlx(""sp_TestSP"")]
        public partial Task<IList<Item>> M(int clientId, int? personId)
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Data.Common;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Storage;

    partial class C
    {
        public partial async Task<IList<Item>> M(int clientId, int? personId)
        {
            var sqlQuery = @""sp_TestSP @client_id, @person_id"";
            var __result = await this.dbContext.Items.FromSqlRaw(sqlQuery, new global::System.Object[]{ clientId, personId }).ToListAsync().ConfigureAwait(false);
            return __result;
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void NoResults()
    {
        string source = @"
namespace Foo
{
    class C
    {
        private DbConnection connection;

        [Sqlx(""sp_TestSP"")]
        public partial Task M(int clientId, string? personId);
    }
}";
        string output = GetCSharpGeneratedOutput(source, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Collections.Generic;
    using System.Data.Common;
    using System.Linq;

    partial class C
    {
        public partial async Task M(int clientId, string? personId)
        {
            var connection = this.connection;
            if(connection.State != global::System.Data.ConnectionState.Open)
            {
                await connection.OpenAsync().ConfigureAwait(false);
            }
            using var command = connection.CreateCommand();
            var sqlQuery = @""sp_TestSP @client_id, @person_id"";
            command.CommandText = sqlQuery;
            await command.ExecuteNonQueryAsync().ConfigureAwait(false);
        }

    }
}";
        Assert.AreEqual(expectedOutput, output);
    }
}
