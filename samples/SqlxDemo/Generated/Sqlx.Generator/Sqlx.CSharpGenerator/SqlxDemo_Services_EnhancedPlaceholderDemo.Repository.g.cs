// <auto-generated>
#nullable disable
#pragma warning disable
// </auto-generated>

namespace SqlxDemo.Services;

using System;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;

using System.Linq;
using System.Threading;
using Sqlx.Annotations;

partial class EnhancedPlaceholderDemo
{
    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{between:age|min=@minAge|max=@maxAge}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM enhanced_placeholder_demo WHERE [age] BETWEEN @@minAge AND @@maxAge</code>
    /// <para>🔧 Template Parameters:</para>
    /// <para>  • @minAge</para>
    /// <para>  • @maxAge</para>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:age&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="minAge">The minAge parameter.</param>
    /// <param name="maxAge">The maxAge parameter.</param>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{between:age|min=@minAge|max=@maxAge}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersByAgeRangeAsync(int minAge, int maxAge)
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM enhanced_placeholder_demo WHERE [age] BETWEEN @@minAge AND @@maxAge";

        var param_minAge = __cmd__.CreateParameter();
        param_minAge.ParameterName = "@minAge";
        param_minAge.Value = minAge;
        param_minAge.DbType = global::System.Data.DbType.Int32;
        __cmd__.Parameters.Add(param_minAge);

        var param_maxAge = __cmd__.CreateParameter();
        param_maxAge.ParameterName = "@maxAge";
        param_maxAge.Value = maxAge;
        param_maxAge.DbType = global::System.Data.DbType.Int32;
        __cmd__.Parameters.Add(param_maxAge);

        try
        {
            OnExecuting("GetUsersByAgeRangeAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersByAgeRangeAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersByAgeRangeAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{like:name|pattern=@namePattern}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM enhanced_placeholder_demo WHERE [name] LIKE CONCAT(&apos;%&apos;, @@namePattern, &apos;%&apos;)</code>
    /// <para>🔧 Template Parameters:</para>
    /// <para>  • @namePattern</para>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:name&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="namePattern">The namePattern parameter.</param>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{like:name|pattern=@namePattern}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersByNamePatternAsync(string namePattern)
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM enhanced_placeholder_demo WHERE [name] LIKE CONCAT('%', @@namePattern, '%')";

        var param_namePattern = __cmd__.CreateParameter();
        param_namePattern.ParameterName = "@namePattern";
        param_namePattern.Value = namePattern;
        param_namePattern.DbType = global::System.Data.DbType.String;
        __cmd__.Parameters.Add(param_namePattern);

        try
        {
            OnExecuting("GetUsersByNamePatternAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersByNamePatternAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersByNamePatternAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{in:department_id|values=@deptIds}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM enhanced_placeholder_demo WHERE [department_id] IN (@@deptIds)</code>
    /// <para>🔧 Template Parameters:</para>
    /// <para>  • @deptIds</para>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:department_id&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="deptIds">The List entity to process.</param>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{in:department_id|values=@deptIds}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersByDepartmentsAsync(System.Collections.Generic.List<int> deptIds)
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM enhanced_placeholder_demo WHERE [department_id] IN (@@deptIds)";

        var param_deptIds = __cmd__.CreateParameter();
        param_deptIds.ParameterName = "@deptIds";
        param_deptIds.Value = deptIds;
        param_deptIds.DbType = global::System.Data.DbType.Object;
        __cmd__.Parameters.Add(param_deptIds);

        try
        {
            OnExecuting("GetUsersByDepartmentsAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersByDepartmentsAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersByDepartmentsAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{isnull:bonus}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM enhanced_placeholder_demo WHERE [bonus] IS NULL</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:bonus&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{isnull:bonus}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersWithoutBonusAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM enhanced_placeholder_demo WHERE [bonus] IS NULL";

        try
        {
            OnExecuting("GetUsersWithoutBonusAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersWithoutBonusAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersWithoutBonusAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{notnull:performance_rating}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM enhanced_placeholder_demo WHERE [performance_rating] IS NOT NULL</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:performance_rating&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{notnull:performance_rating}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersWithPerformanceRatingAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM enhanced_placeholder_demo WHERE [performance_rating] IS NOT NULL";

        try
        {
            OnExecuting("GetUsersWithPerformanceRatingAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersWithPerformanceRatingAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersWithPerformanceRatingAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{today:hire_date}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM enhanced_placeholder_demo WHERE CAST(GETDATE() AS DATE)</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:hire_date&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{today:hire_date}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetTodayHiredUsersAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM enhanced_placeholder_demo WHERE CAST(GETDATE() AS DATE)";

        try
        {
            OnExecuting("GetTodayHiredUsersAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetTodayHiredUsersAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetTodayHiredUsersAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{week:hire_date}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM enhanced_placeholder_demo WHERE DATEPART(week, GETDATE())</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:hire_date&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{week:hire_date}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetWeekHiredUsersAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM enhanced_placeholder_demo WHERE DATEPART(week, GETDATE())";

        try
        {
            OnExecuting("GetWeekHiredUsersAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetWeekHiredUsersAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetWeekHiredUsersAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{month:hire_date}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM enhanced_placeholder_demo WHERE MONTH(GETDATE())</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:hire_date&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{month:hire_date}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetMonthHiredUsersAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM enhanced_placeholder_demo WHERE MONTH(GETDATE())";

        try
        {
            OnExecuting("GetMonthHiredUsersAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetMonthHiredUsersAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetMonthHiredUsersAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{year:hire_date}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM enhanced_placeholder_demo WHERE YEAR([created_at])</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:hire_date&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{year:hire_date}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetYearHiredUsersAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM enhanced_placeholder_demo WHERE YEAR([created_at])";

        try
        {
            OnExecuting("GetYearHiredUsersAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetYearHiredUsersAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetYearHiredUsersAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{contains:email|text=@searchText}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM enhanced_placeholder_demo WHERE CHARINDEX(@searchValue, [email]) &gt; 0</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:email&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>  • Parameter &apos;searchValue&apos; not found in method signature</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="searchText">The searchText parameter.</param>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{contains:email|text=@searchText}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersByEmailContainsAsync(string searchText)
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM enhanced_placeholder_demo WHERE CHARINDEX(@searchValue, [email]) > 0";

        var param_searchText = __cmd__.CreateParameter();
        param_searchText.ParameterName = "@searchText";
        param_searchText.Value = searchText;
        param_searchText.DbType = global::System.Data.DbType.String;
        __cmd__.Parameters.Add(param_searchText);

        try
        {
            OnExecuting("GetUsersByEmailContainsAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersByEmailContainsAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersByEmailContainsAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{startswith:name|prefix=@namePrefix}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM enhanced_placeholder_demo WHERE [name] LIKE CONCAT(@prefix, &apos;%&apos;)</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:name&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>  • Parameter &apos;prefix&apos; not found in method signature</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="namePrefix">The namePrefix parameter.</param>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{startswith:name|prefix=@namePrefix}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersByNameStartsWithAsync(string namePrefix)
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM enhanced_placeholder_demo WHERE [name] LIKE CONCAT(@prefix, '%')";

        var param_namePrefix = __cmd__.CreateParameter();
        param_namePrefix.ParameterName = "@namePrefix";
        param_namePrefix.Value = namePrefix;
        param_namePrefix.DbType = global::System.Data.DbType.String;
        __cmd__.Parameters.Add(param_namePrefix);

        try
        {
            OnExecuting("GetUsersByNameStartsWithAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersByNameStartsWithAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersByNameStartsWithAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} WHERE {{endswith:email|suffix=@emailSuffix}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM enhanced_placeholder_demo WHERE [email] LIKE CONCAT(&apos;%&apos;, @suffix)</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:email&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>  • Parameter &apos;suffix&apos; not found in method signature</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="emailSuffix">The emailSuffix parameter.</param>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} WHERE {{endswith:email|suffix=@emailSuffix}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersByEmailEndsWithAsync(string emailSuffix)
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM enhanced_placeholder_demo WHERE [email] LIKE CONCAT('%', @suffix)";

        var param_emailSuffix = __cmd__.CreateParameter();
        param_emailSuffix.ParameterName = "@emailSuffix";
        param_emailSuffix.Value = emailSuffix;
        param_emailSuffix.DbType = global::System.Data.DbType.String;
        __cmd__.Parameters.Add(param_emailSuffix);

        try
        {
            OnExecuting("GetUsersByEmailEndsWithAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersByEmailEndsWithAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersByEmailEndsWithAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}}, {{round:salary|decimals=2}} as rounded_salary FROM {{table}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT *, ROUND([salary], 2) as rounded_salary FROM enhanced_placeholder_demo</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:salary&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}}, {{round:salary|decimals=2}} as rounded_salary FROM {{table}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersWithRoundedSalaryAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT *, ROUND([salary], 2) as rounded_salary FROM enhanced_placeholder_demo";

        try
        {
            OnExecuting("GetUsersWithRoundedSalaryAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersWithRoundedSalaryAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersWithRoundedSalaryAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}}, {{abs:performance_rating}} as abs_rating FROM {{table}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT *, ABS([performance_rating]) as abs_rating FROM enhanced_placeholder_demo</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:performance_rating&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}}, {{abs:performance_rating}} as abs_rating FROM {{table}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersWithAbsPerformanceAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT *, ABS([performance_rating]) as abs_rating FROM enhanced_placeholder_demo";

        try
        {
            OnExecuting("GetUsersWithAbsPerformanceAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersWithAbsPerformanceAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersWithAbsPerformanceAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Creates a new entity in the database.
    /// <para>📝 Original Template:</para>
    /// <code>INSERT INTO {{table}} ({{columns:auto|exclude=Id}}) {{batch_values:auto|size=@batchSize}}</code>
    /// <para>❌ Template Errors:</para>
    /// <para>  • Template contains potential SQL injection patterns</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="users">The List entity to process.</param>
    /// <param name="batchSize">The batchSize parameter.</param>
    /// <returns>A task containing the number of affected rows.</returns>
    [global::Sqlx.Annotations.Sqlx("INSERT INTO {{table}} ({{columns:auto|exclude=Id}}) {{batch_values:auto|size=@batchSize}}")]
    public System.Threading.Tasks.Task<int> BatchInsertUsersAsync(System.Collections.Generic.List<SqlxDemo.Models.User> users, int batchSize)
    {
        int __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"";

        var param_users = __cmd__.CreateParameter();
        param_users.ParameterName = "@users";
        param_users.Value = users;
        param_users.DbType = global::System.Data.DbType.Object;
        __cmd__.Parameters.Add(param_users);

        var param_batchSize = __cmd__.CreateParameter();
        param_batchSize.ParameterName = "@batchSize";
        param_batchSize.Value = batchSize;
        param_batchSize.DbType = global::System.Data.DbType.Int32;
        __cmd__.Parameters.Add(param_batchSize);

        try
        {
            OnExecuting("BatchInsertUsersAsync", __cmd__);

            var scalarResult = __cmd__.ExecuteScalar();
            __result__ = scalarResult != null ? (int)scalarResult : default(int);

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("BatchInsertUsersAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("BatchInsertUsersAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Executes a database operation.
    /// <para>📝 Original Template:</para>
    /// <code>{{upsert:auto|conflict=email|update=name,age,salary}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>MERGE enhanced_placeholder_demo USING (VALUES {{values}}) AS src ON email = src.email</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <param name="user">The User entity to process.</param>
    /// <returns>A task containing the number of affected rows.</returns>
    [global::Sqlx.Annotations.Sqlx("{{upsert:auto|conflict=email|update=name,age,salary}}")]
    public System.Threading.Tasks.Task<int> UpsertUserAsync(SqlxDemo.Models.User user)
    {
        int __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"MERGE enhanced_placeholder_demo USING (VALUES {{values}}) AS src ON email = src.email";

        var param_user = __cmd__.CreateParameter();
        param_user.ParameterName = "@user";
        param_user.Value = user;
        param_user.DbType = global::System.Data.DbType.Object;
        __cmd__.Parameters.Add(param_user);

        try
        {
            OnExecuting("UpsertUserAsync", __cmd__);

            var scalarResult = __cmd__.ExecuteScalar();
            __result__ = scalarResult != null ? (int)scalarResult : default(int);

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("UpsertUserAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("UpsertUserAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{columns:auto}} FROM {{table}} u WHERE {{exists:department|table=departments|condition=d.id = u.department_id AND d.is_active = 1}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT * FROM enhanced_placeholder_demo u WHERE EXISTS (SELECT 1 FROM table WHERE condition)</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:auto&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:department&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Cannot infer columns without entity type</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{columns:auto}} FROM {{table}} u WHERE {{exists:department|table=departments|condition=d.id = u.department_id AND d.is_active = 1}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<SqlxDemo.Models.User>> GetUsersInActiveDepartmentsAsync()
    {
        System.Collections.Generic.List<SqlxDemo.Models.User> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT * FROM enhanced_placeholder_demo u WHERE EXISTS (SELECT 1 FROM table WHERE condition)";

        try
        {
            OnExecuting("GetUsersInActiveDepartmentsAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<SqlxDemo.Models.User>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUsersInActiveDepartmentsAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUsersInActiveDepartmentsAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT {{groupby:age|range=10}} as age_group, COUNT(*) as user_count FROM {{table}} GROUP BY {{groupby:age|range=10}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT GROUP BY age as age_group, COUNT(*) as user_count FROM enhanced_placeholder_demo GROUP BY GROUP BY age</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:age&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:age&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT {{groupby:age|range=10}} as age_group, COUNT(*) as user_count FROM {{table}} GROUP BY {{groupby:age|range=10}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<dynamic>> GetUserAgeGroupStatsAsync()
    {
        System.Collections.Generic.List<dynamic> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT GROUP BY age as age_group, COUNT(*) as user_count FROM enhanced_placeholder_demo GROUP BY GROUP BY age";

        try
        {
            OnExecuting("GetUserAgeGroupStatsAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<dynamic>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetUserAgeGroupStatsAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetUserAgeGroupStatsAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Retrieves entity data from the database.
    /// <para>📝 Original Template:</para>
    /// <code>SELECT department_id, {{sum:salary}} as total_salary, {{avg:salary}} as avg_salary, {{max:salary}} as max_salary FROM {{table}} {{groupby:department_id}} {{having:count|min=5}}</code>
    /// <para>📋 Generated SQL (Template Processed):</para>
    /// <code>SELECT department_id, SUM(*) as total_salary, AVG(*) as avg_salary, MAX(*) as max_salary FROM enhanced_placeholder_demo GROUP BY department_id HAVING COUNT(*) &gt; 5</code>
    /// <para>⚠️ Template Warnings:</para>
    /// <para>  • Parameter &apos;:salary&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:salary&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:salary&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:department_id&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>  • Parameter &apos;:count&apos; doesn&apos;t use the correct prefix for SQL Server (expected &apos;@&apos;)</para>
    /// <para>🚀 This method was generated by Sqlx Advanced Template Engine</para>
    /// </summary>
    /// <returns>A task containing the collection of entities.</returns>
    [global::Sqlx.Annotations.Sqlx("SELECT department_id, {{sum:salary}} as total_salary, {{avg:salary}} as avg_salary, {{max:salary}} as max_salary FROM {{table}} {{groupby:department_id}} {{having:count|min=5}}")]
    public System.Threading.Tasks.Task<System.Collections.Generic.List<dynamic>> GetDepartmentSalaryStatsAsync()
    {
        System.Collections.Generic.List<dynamic> __result__ = default!;
        global::System.Data.IDbCommand? __cmd__ = null;
        var __startTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();

        if (connection.State != global::System.Data.ConnectionState.Open)
        {
            connection.Open();
        }

        __cmd__ = connection.CreateCommand();
        __cmd__.CommandText = @"SELECT department_id, SUM(*) as total_salary, AVG(*) as avg_salary, MAX(*) as max_salary FROM enhanced_placeholder_demo GROUP BY department_id HAVING COUNT(*) > 5";

        try
        {
            OnExecuting("GetDepartmentSalaryStatsAsync", __cmd__);

            __result__ = new System.Collections.Generic.List<dynamic>();
            using var reader = __cmd__.ExecuteReader();
            while (reader.Read())
            {
            }

            var __endTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuted("GetDepartmentSalaryStatsAsync", __cmd__, __result__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __endTimestamp__).Ticks);
        }
        catch (global::System.Exception __ex__)
        {
            var __failTimestamp__ = global::System.Diagnostics.Stopwatch.GetTimestamp();
            OnExecuteFail("GetDepartmentSalaryStatsAsync", __cmd__, __ex__, global::System.Diagnostics.Stopwatch.GetElapsedTime(__startTimestamp__, __failTimestamp__).Ticks);
            throw;
        }
        return global::System.Threading.Tasks.Task.FromResult(__result__);
    }

    /// <summary>
    /// Called before executing a repository operation.
    /// </summary>
    /// <param name="operationName">The name of the operation being executed.</param>
    /// <param name="command">The database command to be executed.</param>
    partial void OnExecuting(string operationName, global::System.Data.IDbCommand command);

    /// <summary>
    /// Called after successfully executing a repository operation.
    /// </summary>
    /// <param name="operationName">The name of the operation that was executed.</param>
    /// <param name="command">The database command that was executed.</param>
    /// <param name="result">The result of the operation.</param>
    /// <param name="elapsedTicks">The elapsed time in ticks.</param>
    partial void OnExecuted(string operationName, global::System.Data.IDbCommand command, object? result, long elapsedTicks);

    /// <summary>
    /// Called when a repository operation fails with an exception.
    /// </summary>
    /// <param name="operationName">The name of the operation that failed.</param>
    /// <param name="command">The database command that failed.</param>
    /// <param name="exception">The exception that occurred.</param>
    /// <param name="elapsedTicks">The elapsed time in ticks before failure.</param>
    partial void OnExecuteFail(string operationName, global::System.Data.IDbCommand command, global::System.Exception exception, long elapsedTicks);

}