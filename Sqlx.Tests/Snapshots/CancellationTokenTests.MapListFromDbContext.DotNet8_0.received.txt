// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591

namespace Foo
{

    using System;
    using System.Data.Common;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Storage;

    partial class C
    {
        public partial async Task<IList<Item>> M(int clientId, out int? personId, CancellationToken cancellationToken)
        {
            var connection = this.dbContext.Database.GetDbConnection();
            using var command = connection.CreateCommand();

            var parameter = command.CreateParameter();
            parameter.ParameterName = "@client_id";
            parameter.Value = clientId;
            command.Parameters.Add(parameter);

            parameter = command.CreateParameter();
            parameter.ParameterName = "@person_id";
            parameter.DbType = global::System.Data.DbType.Int32;
            parameter.Direction = global::System.Data.ParameterDirection.Output;
            command.Parameters.Add(parameter);

            var sqlQuery = @"sp_TestSP @client_id, @person_id OUTPUT";
            var __result = await this.dbContext.Items.FromSqlRaw(sqlQuery, new global::System.Object[]{ clientId, personId }).ToListAsync(cancellationToken).ConfigureAwait(false);
            personId = parameter.Value == DBNull.Value ? (int?)null : (int)parameter.Value;
            return __result;
        }

    }
}