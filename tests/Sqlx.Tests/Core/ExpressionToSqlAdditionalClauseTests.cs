// -----------------------------------------------------------------------
// <copyright file="ExpressionToSqlAdditionalClauseTests.cs" company="Cricle">
// Copyright (c) Cricle. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;

namespace Sqlx.Tests.Core
{
    [TestClass]
    public class ExpressionToSqlAdditionalClauseTests
    {
        [TestMethod]
        public void Generated_ToAdditionalClause_Contains_Order_Offset_Limit()
        {
            var source = @"using Sqlx.Annotations; 
namespace N { 
  public class X {}
}";

            var code = string.Join("\n", Generate(source));
            StringAssert.Contains(code, "public string ToAdditionalClause()");
            StringAssert.Contains(code, "ORDER BY");
            StringAssert.Contains(code, "OFFSET ");
            StringAssert.Contains(code, "LIMIT ");
        }

        private static List<string> Generate(string source)
        {
            var syntaxTree = CSharpSyntaxTree.ParseText(source);
            var references = new List<MetadataReference>
            {
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            };

            var compilation = CSharpCompilation.Create(
                "ExprAddClauseAsm",
                new[] { syntaxTree },
                references,
                new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

            var generator = new CSharpGenerator();
            var driver = CSharpGeneratorDriver.Create(generator);
            driver.RunGeneratorsAndUpdateCompilation(compilation, out var newCompilation, out var diags);

            var generated = new List<string>();
            foreach (var tree in newCompilation.SyntaxTrees)
            {
                var text = tree.ToString();
                if (text.Contains("// <auto-generated>") || string.IsNullOrEmpty(tree.FilePath))
                    generated.Add(text);
            }
            return generated;
        }
    }
}


