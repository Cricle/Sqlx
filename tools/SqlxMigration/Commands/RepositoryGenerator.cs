// -----------------------------------------------------------------------
// <copyright file="RepositoryGenerator.cs" company="Cricle">
// Copyright (c) Cricle. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

using Microsoft.Extensions.Logging;
using System;
using System.IO;
using System.Text;
using System.Threading.Tasks;

namespace SqlxMigration.Commands;

/// <summary>
/// Generates Sqlx repository interfaces and implementations.
/// </summary>
public class RepositoryGenerator
{
    private readonly ILogger _logger;

    public RepositoryGenerator(ILogger logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Generates a repository interface and implementation for the specified entity.
    /// </summary>
    /// <param name="projectPath">Path to the target project.</param>
    /// <param name="entityName">Name of the entity.</param>
    /// <param name="tableName">Database table name.</param>
    /// <param name="dialect">Database dialect.</param>
    public async Task GenerateAsync(string projectPath, string entityName, string tableName, string dialect)
    {
        _logger.LogInformation("üèóÔ∏è Generating repository for entity: {Entity}", entityName);
        _logger.LogInformation("üìä Table: {Table}, Dialect: {Dialect}", tableName, dialect);

        try
        {
            var projectDir = Path.GetDirectoryName(projectPath)!;
            
            // Create directories
            var repositoriesDir = Path.Combine(projectDir, "Repositories");
            var interfacesDir = Path.Combine(repositoriesDir, "Interfaces");
            
            Directory.CreateDirectory(repositoriesDir);
            Directory.CreateDirectory(interfacesDir);

            // Generate interface
            var interfaceContent = GenerateRepositoryInterface(entityName, tableName);
            var interfacePath = Path.Combine(interfacesDir, $"I{entityName}Repository.cs");
            await File.WriteAllTextAsync(interfacePath, interfaceContent);
            
            // Generate implementation
            var implementationContent = GenerateRepositoryImplementation(entityName, tableName, dialect);
            var implementationPath = Path.Combine(repositoriesDir, $"{entityName}Repository.cs");
            await File.WriteAllTextAsync(implementationPath, implementationContent);

            // Generate entity class if it doesn't exist
            var entitiesDir = Path.Combine(projectDir, "Entities");
            var entityPath = Path.Combine(entitiesDir, $"{entityName}.cs");
            
            if (!File.Exists(entityPath))
            {
                Directory.CreateDirectory(entitiesDir);
                var entityContent = GenerateEntityClass(entityName, tableName);
                await File.WriteAllTextAsync(entityPath, entityContent);
                _logger.LogInformation("üìÑ Generated entity: {Entity}", $"{entityName}.cs");
            }

            // Generate usage example
            var exampleContent = GenerateUsageExample(entityName, dialect);
            var examplePath = Path.Combine(projectDir, $"{entityName}RepositoryExample.cs");
            await File.WriteAllTextAsync(examplePath, exampleContent);

            _logger.LogInformation("‚úÖ Repository generation completed:");
            _logger.LogInformation("   üìÅ Interface: {Path}", Path.GetRelativePath(projectDir, interfacePath));
            _logger.LogInformation("   üìÅ Implementation: {Path}", Path.GetRelativePath(projectDir, implementationPath));
            _logger.LogInformation("   üìÅ Example: {Path}", Path.GetRelativePath(projectDir, examplePath));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå Repository generation failed");
            throw;
        }
    }

    private string GenerateRepositoryInterface(string entityName, string tableName)
    {
        var sb = new StringBuilder();
        
        sb.AppendLine("// This file was generated by Sqlx Migration Tool");
        sb.AppendLine("// You may need to customize the methods based on your specific requirements");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Threading;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine("using Sqlx.Annotations;");
        sb.AppendLine();
        sb.AppendLine("namespace YourProject.Repositories.Interfaces;");
        sb.AppendLine();
        sb.AppendLine("/// <summary>");
        sb.AppendLine($"/// Repository interface for {entityName} entity operations.");
        sb.AppendLine("/// </summary>");
        sb.AppendLine($"public interface I{entityName}Repository");
        sb.AppendLine("{");
        
        // Basic CRUD operations
        sb.AppendLine("    // ==================== QUERY OPERATIONS ====================");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Gets all {entityName} records.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [SqlExecuteType(SqlExecuteTypes.Select, \"{tableName}\")]");
        sb.AppendLine($"    IList<{entityName}> GetAll();");
        sb.AppendLine();
        
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Gets all {entityName} records asynchronously.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [SqlExecuteType(SqlExecuteTypes.Select, \"{tableName}\")]");
        sb.AppendLine($"    Task<IList<{entityName}>> GetAllAsync(CancellationToken cancellationToken = default);");
        sb.AppendLine();
        
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Gets a {entityName} by ID.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [Sqlx(\"SELECT * FROM {tableName} WHERE Id = @id\")]");
        sb.AppendLine($"    {entityName}? GetById(int id);");
        sb.AppendLine();
        
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Gets a {entityName} by ID asynchronously.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [Sqlx(\"SELECT * FROM {tableName} WHERE Id = @id\")]");
        sb.AppendLine($"    Task<{entityName}?> GetByIdAsync(int id, CancellationToken cancellationToken = default);");
        sb.AppendLine();
        
        // Modification operations
        sb.AppendLine("    // ==================== MODIFICATION OPERATIONS ====================");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Creates a new {entityName}.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [SqlExecuteType(SqlExecuteTypes.Insert, \"{tableName}\")]");
        sb.AppendLine($"    int Create({entityName} entity);");
        sb.AppendLine();
        
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Creates a new {entityName} asynchronously.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [SqlExecuteType(SqlExecuteTypes.Insert, \"{tableName}\")]");
        sb.AppendLine($"    Task<int> CreateAsync({entityName} entity, CancellationToken cancellationToken = default);");
        sb.AppendLine();
        
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Updates an existing {entityName}.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [SqlExecuteType(SqlExecuteTypes.Update, \"{tableName}\")]");
        sb.AppendLine($"    int Update({entityName} entity);");
        sb.AppendLine();
        
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Updates an existing {entityName} asynchronously.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [SqlExecuteType(SqlExecuteTypes.Update, \"{tableName}\")]");
        sb.AppendLine($"    Task<int> UpdateAsync({entityName} entity, CancellationToken cancellationToken = default);");
        sb.AppendLine();
        
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Deletes a {entityName} by ID.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [SqlExecuteType(SqlExecuteTypes.Delete, \"{tableName}\")]");
        sb.AppendLine($"    int Delete(int id);");
        sb.AppendLine();
        
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Deletes a {entityName} by ID asynchronously.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [SqlExecuteType(SqlExecuteTypes.Delete, \"{tableName}\")]");
        sb.AppendLine($"    Task<int> DeleteAsync(int id, CancellationToken cancellationToken = default);");
        sb.AppendLine();
        
        // Batch operations
        sb.AppendLine("    // ==================== BATCH OPERATIONS ====================");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Creates multiple {entityName}s in a batch operation for high performance.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [SqlExecuteType(SqlExecuteTypes.BatchInsert, \"{tableName}\")]");
        sb.AppendLine($"    int BatchCreate(IEnumerable<{entityName}> entities);");
        sb.AppendLine();
        
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Creates multiple {entityName}s in a batch operation asynchronously.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [SqlExecuteType(SqlExecuteTypes.BatchInsert, \"{tableName}\")]");
        sb.AppendLine($"    Task<int> BatchCreateAsync(IEnumerable<{entityName}> entities, CancellationToken cancellationToken = default);");
        sb.AppendLine();
        
        // Custom query methods
        sb.AppendLine("    // ==================== CUSTOM QUERIES ====================");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Gets {entityName}s with pagination support.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [Sqlx(\"SELECT * FROM {tableName} ORDER BY Id OFFSET @offset ROWS FETCH NEXT @limit ROWS ONLY\")]");
        sb.AppendLine($"    IList<{entityName}> GetPaged(int offset, int limit);");
        sb.AppendLine();
        
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Gets the total count of {entityName}s.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [Sqlx(\"SELECT COUNT(*) FROM {tableName}\")]");
        sb.AppendLine($"    int GetCount();");
        sb.AppendLine();
        
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Checks if a {entityName} exists by ID.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    [Sqlx(\"SELECT CASE WHEN EXISTS (SELECT 1 FROM {tableName} WHERE Id = @id) THEN 1 ELSE 0 END\")]");
        sb.AppendLine($"    bool Exists(int id);");
        
        sb.AppendLine("}");
        
        return sb.ToString();
    }

    private string GenerateRepositoryImplementation(string entityName, string tableName, string dialect)
    {
        var dialectEnum = dialect switch
        {
            "MySql" => "SqlDefineTypes.MySql",
            "SqlServer" => "SqlDefineTypes.SqlServer", 
            "PostgreSQL" => "SqlDefineTypes.Postgresql",
            "Oracle" => "SqlDefineTypes.Oracle",
            "DB2" => "SqlDefineTypes.DB2",
            "SQLite" => "SqlDefineTypes.SQLite",
            _ => "SqlDefineTypes.SqlServer"
        };

        var sb = new StringBuilder();
        
        sb.AppendLine("// This file was generated by Sqlx Migration Tool");
        sb.AppendLine("// The repository methods are auto-implemented by Sqlx source generators");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Data.Common;");
        sb.AppendLine("using Sqlx.Annotations;");
        sb.AppendLine("using YourProject.Repositories.Interfaces;");
        sb.AppendLine();
        sb.AppendLine("namespace YourProject.Repositories;");
        sb.AppendLine();
        sb.AppendLine("/// <summary>");
        sb.AppendLine($"/// {dialect} implementation of {entityName} repository.");
        sb.AppendLine("/// All methods are automatically implemented by Sqlx source generators.");
        sb.AppendLine("/// </summary>");
        sb.AppendLine($"[RepositoryFor(typeof(I{entityName}Repository))]");
        sb.AppendLine($"[SqlDefine({dialectEnum})]");
        sb.AppendLine($"public partial class {entityName}Repository : I{entityName}Repository");
        sb.AppendLine("{");
        sb.AppendLine("    private readonly DbConnection connection;");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Initializes a new instance of the {entityName}Repository class.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <param name=\"connection\">Database connection instance.</param>");
        sb.AppendLine($"    public {entityName}Repository(DbConnection connection)");
        sb.AppendLine("    {");
        sb.AppendLine("        this.connection = connection ?? throw new ArgumentNullException(nameof(connection));");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    // ‚ú® All repository methods are automatically implemented by Sqlx!");
        sb.AppendLine("    // The source generators will create optimized implementations for:");
        sb.AppendLine("    // - GetAll(), GetById() - High-performance SELECT operations");
        sb.AppendLine("    // - Create(), Update(), Delete() - Optimized CUD operations");
        sb.AppendLine("    // - BatchCreate() - High-performance batch operations");
        sb.AppendLine("    // - GetPaged(), GetCount(), Exists() - Custom query implementations");
        sb.AppendLine("    //");
        sb.AppendLine($"    // Database dialect: {dialect}");
        sb.AppendLine($"    // Target table: {tableName}");
        sb.AppendLine("    // Generated methods will use proper parameter binding and type safety");
        sb.AppendLine("}");
        
        return sb.ToString();
    }

    private string GenerateEntityClass(string entityName, string tableName)
    {
        var sb = new StringBuilder();
        
        sb.AppendLine("// This file was generated by Sqlx Migration Tool");
        sb.AppendLine("// You should customize the properties based on your database schema");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using Sqlx.Annotations;");
        sb.AppendLine();
        sb.AppendLine("namespace YourProject.Entities;");
        sb.AppendLine();
        sb.AppendLine("/// <summary>");
        sb.AppendLine($"/// Represents a {entityName} entity mapped to {tableName} table.");
        sb.AppendLine("/// </summary>");
        sb.AppendLine($"[TableName(\"{tableName}\")]");
        sb.AppendLine($"public class {entityName}");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Gets or sets the unique identifier for the {entityName}.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public int Id { get; set; }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Gets or sets the name of the {entityName}.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public string Name { get; set; } = string.Empty;");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Gets or sets the description of the {entityName}.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public string? Description { get; set; }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Gets or sets when the {entityName} was created.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Gets or sets when the {entityName} was last updated.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public DateTime? UpdatedAt { get; set; }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Gets or sets whether the {entityName} is active.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public bool IsActive { get; set; } = true;");
        sb.AppendLine();
        sb.AppendLine("    // TODO: Add more properties based on your database schema");
        sb.AppendLine("    // Example properties you might need:");
        sb.AppendLine("    // public string Email { get; set; } = string.Empty;");
        sb.AppendLine("    // public decimal Price { get; set; }");
        sb.AppendLine("    // public int CategoryId { get; set; }");
        sb.AppendLine("}");
        
        return sb.ToString();
    }

    private string GenerateUsageExample(string entityName, string dialect)
    {
        var sb = new StringBuilder();
        
        sb.AppendLine("// This file demonstrates how to use the generated Sqlx repository");
        sb.AppendLine("// Remove this file once you understand how to use the repository");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Data.Common;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using YourProject.Entities;");
        sb.AppendLine("using YourProject.Repositories;");
        sb.AppendLine("using YourProject.Repositories.Interfaces;");
        sb.AppendLine();
        sb.AppendLine("namespace YourProject.Examples;");
        sb.AppendLine();
        sb.AppendLine("/// <summary>");
        sb.AppendLine($"/// Example demonstrating how to use the {entityName}Repository with Sqlx.");
        sb.AppendLine("/// </summary>");
        sb.AppendLine($"public class {entityName}RepositoryExample");
        sb.AppendLine("{");
        sb.AppendLine($"    private readonly I{entityName}Repository _repository;");
        sb.AppendLine();
        sb.AppendLine($"    public {entityName}RepositoryExample(I{entityName}Repository repository)");
        sb.AppendLine("    {");
        sb.AppendLine("        _repository = repository ?? throw new ArgumentNullException(nameof(repository));");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Demonstrates basic CRUD operations.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public async Task DemonstrateCrudOperationsAsync()");
        sb.AppendLine("    {");
        sb.AppendLine("        Console.WriteLine($\"üöÄ {entityName} Repository Demo with Sqlx ({dialect})\");");
        sb.AppendLine("        Console.WriteLine(\"=======================================\\n\");");
        sb.AppendLine();
        sb.AppendLine("        // CREATE - Insert a new entity");
        sb.AppendLine($"        var new{entityName} = new {entityName}");
        sb.AppendLine("        {");
        sb.AppendLine($"            Name = \"Sample {entityName}\",");
        sb.AppendLine($"            Description = \"This is a sample {entityName.ToLower()} created by Sqlx\",");
        sb.AppendLine("            CreatedAt = DateTime.UtcNow,");
        sb.AppendLine("            IsActive = true");
        sb.AppendLine("        };");
        sb.AppendLine();
        sb.AppendLine($"        var newId = await _repository.CreateAsync(new{entityName});");
        sb.AppendLine($"        Console.WriteLine($\"‚úÖ Created new {entityName} with ID: {{newId}}\");");
        sb.AppendLine();
        sb.AppendLine("        // READ - Get the created entity");
        sb.AppendLine($"        var retrieved{entityName} = await _repository.GetByIdAsync(newId);");
        sb.AppendLine($"        Console.WriteLine($\"üìñ Retrieved {entityName}: {{retrieved{entityName}?.Name}}\");");
        sb.AppendLine();
        sb.AppendLine("        // UPDATE - Modify the entity");
        sb.AppendLine($"        if (retrieved{entityName} != null)");
        sb.AppendLine("        {");
        sb.AppendLine($"            retrieved{entityName}.Name = \"Updated {entityName}\";");
        sb.AppendLine($"            retrieved{entityName}.UpdatedAt = DateTime.UtcNow;");
        sb.AppendLine();
        sb.AppendLine($"            var updateResult = await _repository.UpdateAsync(retrieved{entityName});");
        sb.AppendLine($"            Console.WriteLine($\"üîÑ Updated {entityName}, affected rows: {{updateResult}}\");");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        // LIST - Get all entities");
        sb.AppendLine($"        var all{entityName}s = await _repository.GetAllAsync();");
        sb.AppendLine($"        Console.WriteLine($\"üìã Total {entityName}s: {{all{entityName}s.Count}}\");");
        sb.AppendLine();
        sb.AppendLine("        // PAGINATION - Get paged results");
        sb.AppendLine($"        var paged{entityName}s = _repository.GetPaged(0, 10);");
        sb.AppendLine($"        Console.WriteLine($\"üìÑ Paged {entityName}s (first 10): {{paged{entityName}s.Count}}\");");
        sb.AppendLine();
        sb.AppendLine("        // COUNT - Get total count");
        sb.AppendLine($"        var totalCount = _repository.GetCount();");
        sb.AppendLine($"        Console.WriteLine($\"üî¢ Total count: {{totalCount}}\");");
        sb.AppendLine();
        sb.AppendLine("        // EXISTS - Check existence");
        sb.AppendLine($"        var exists = _repository.Exists(newId);");
        sb.AppendLine($"        Console.WriteLine($\"‚ùì {entityName} {{newId}} exists: {{exists}}\");");
        sb.AppendLine();
        sb.AppendLine("        // DELETE - Remove the entity");
        sb.AppendLine($"        var deleteResult = await _repository.DeleteAsync(newId);");
        sb.AppendLine($"        Console.WriteLine($\"üóëÔ∏è Deleted {entityName}, affected rows: {{deleteResult}}\");");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Demonstrates high-performance batch operations.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public async Task DemonstrateBatchOperationsAsync()");
        sb.AppendLine("    {");
        sb.AppendLine("        Console.WriteLine($\"\\n‚ö° Batch Operations Demo\");");
        sb.AppendLine("        Console.WriteLine(\"========================\\n\");");
        sb.AppendLine();
        sb.AppendLine("        // Create multiple entities for batch insert");
        sb.AppendLine($"        var batchEntities = new List<{entityName}>();");
        sb.AppendLine("        for (int i = 1; i <= 100; i++)");
        sb.AppendLine("        {");
        sb.AppendLine($"            batchEntities.Add(new {entityName}");
        sb.AppendLine("            {");
        sb.AppendLine($"                Name = $\"Batch {entityName} {{i}}\",");
        sb.AppendLine($"                Description = $\"Batch created {entityName.ToLower()} number {{i}}\",");
        sb.AppendLine("                CreatedAt = DateTime.UtcNow,");
        sb.AppendLine("                IsActive = i % 2 == 0 // Alternate active status");
        sb.AppendLine("            });");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        // Perform batch insert - much faster than individual inserts!");
        sb.AppendLine("        var stopwatch = System.Diagnostics.Stopwatch.StartNew();");
        sb.AppendLine("        var batchResult = await _repository.BatchCreateAsync(batchEntities);");
        sb.AppendLine("        stopwatch.Stop();");
        sb.AppendLine();
        sb.AppendLine($"        Console.WriteLine($\"‚ö° Batch inserted {{batchResult}} {entityName}s in {{stopwatch.ElapsedMilliseconds}}ms\");");
        sb.AppendLine($"        Console.WriteLine($\"üìä Average: {{stopwatch.ElapsedMilliseconds / (double)batchResult:F2}}ms per {entityName.ToLower()}\");");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    // TODO: Add more examples based on your specific use cases");
        sb.AppendLine("    // - Complex queries with joins");
        sb.AppendLine("    // - Transaction handling");
        sb.AppendLine("    // - Error handling and retry logic");
        sb.AppendLine("    // - Performance monitoring");
        sb.AppendLine("}");
        sb.AppendLine();
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Dependency injection setup example.");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("public static class ServiceCollectionExtensions");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Registers {entityName} repository services.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static IServiceCollection AddEntityRepositories(this IServiceCollection services, string connectionString)");
        sb.AppendLine("    {");
        sb.AppendLine("        // Register your database connection factory");
        sb.AppendLine("        services.AddScoped<DbConnection>(provider =>");
        sb.AppendLine("        {");
        sb.AppendLine($"            // Replace with your actual {dialect} connection");
        sb.AppendLine($"            // return new {GetConnectionType(dialect)}(connectionString);");
        sb.AppendLine("            throw new NotImplementedException(\"Configure your database connection\");");
        sb.AppendLine("        });");
        sb.AppendLine();
        sb.AppendLine("        // Register repositories");
        sb.AppendLine($"        services.AddScoped<I{entityName}Repository, {entityName}Repository>();");
        sb.AppendLine();
        sb.AppendLine("        return services;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        
        return sb.ToString();
    }

    private string GetConnectionType(string dialect)
    {
        return dialect switch
        {
            "MySql" => "MySqlConnection",
            "SqlServer" => "SqlConnection",
            "PostgreSQL" => "NpgsqlConnection",
            "Oracle" => "OracleConnection",
            "DB2" => "DB2Connection",
            "SQLite" => "SqliteConnection",
            _ => "SqlConnection"
        };
    }
}
